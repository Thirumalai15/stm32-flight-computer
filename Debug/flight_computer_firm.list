
flight_computer_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eeb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800f040  0800f040  00010040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f654  0800f654  000111f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f654  0800f654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f65c  0800f65c  000111f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f65c  0800f65c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f660  0800f660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800f664  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111f4  2**0
                  CONTENTS
 10 .bss          00000a74  200001f4  200001f4  000111f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c68  20000c68  000111f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cb1  00000000  00000000  00011224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cb3  00000000  00000000  00026ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  0002ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcb  00000000  00000000  0002bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005c70  00000000  00000000  0002cb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e6c  00000000  00000000  000327f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd614  00000000  00000000  0004b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118c73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d0  00000000  00000000  00118cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0011ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f028 	.word	0x0800f028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f028 	.word	0x0800f028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001000:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001004:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800100c:	e000      	b.n	8001010 <ITM_SendChar+0x2c>
    {
      __NOP();
 800100e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001010:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800101a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fe47 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f819 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 f943 	bl	80012c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001042:	f000 f87f 	bl	8001144 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001046:	f000 f8d9 	bl	80011fc <MX_I2S3_Init>
  MX_SPI1_Init();
 800104a:	f000 f907 	bl	800125c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800104e:	f009 f8fb 	bl	800a248 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8001052:	f000 f8a5 	bl	80011a0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //Initalize the MPU6050

  mpu6050_init();
 8001056:	f000 fa45 	bl	80014e4 <mpu6050_init>
//	 altitude = BMP180_GetAlt(0);
//
//
//	 printf("Alt = %.2f\n", altitude);

	 mpu6050_read_all();
 800105a:	f000 fae5 	bl	8001628 <mpu6050_read_all>
	 HAL_Delay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001062:	f000 fea3 	bl	8001dac <HAL_Delay>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001066:	f009 f915 	bl	800a294 <MX_USB_HOST_Process>
	 mpu6050_read_all();
 800106a:	bf00      	nop
 800106c:	e7f5      	b.n	800105a <main+0x28>
	...

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	@ 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	@ 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00b fb00 	bl	800c684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	@ (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e0:	2308      	movs	r3, #8
 80010e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 f86a 	bl	80061d0 <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001102:	f000 f9e9 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001112:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2105      	movs	r1, #5
 8001124:	4618      	mov	r0, r3
 8001126:	f005 facb 	bl	80066c0 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001130:	f000 f9d2 	bl	80014d8 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	@ 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f003 fa33 	bl	80045ec <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f9a4 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000210 	.word	0x20000210
 8001198:	40005400 	.word	0x40005400
 800119c:	000186a0 	.word	0x000186a0

080011a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <MX_I2C2_Init+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <MX_I2C2_Init+0x58>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_I2C2_Init+0x50>)
 80011de:	f003 fa05 	bl	80045ec <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f976 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000264 	.word	0x20000264
 80011f4:	40005800 	.word	0x40005800
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <MX_I2S3_Init+0x58>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_I2S3_Init+0x54>)
 800121c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001220:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <MX_I2S3_Init+0x5c>)
 8001226:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_I2S3_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_I2S3_Init+0x54>)
 800123c:	f004 fb28 	bl	8005890 <HAL_I2S_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001246:	f000 f947 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002b8 	.word	0x200002b8
 8001254:	40003c00 	.word	0x40003c00
 8001258:	00017700 	.word	0x00017700

0800125c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001262:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <MX_SPI1_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001268:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_SPI1_Init+0x64>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_SPI1_Init+0x64>)
 80012ae:	f005 fd55 	bl	8006d5c <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b8:	f000 f90e 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000300 	.word	0x20000300
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a68      	ldr	r2, [pc, #416]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b66      	ldr	r3, [pc, #408]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	4b62      	ldr	r3, [pc, #392]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a61      	ldr	r2, [pc, #388]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b5f      	ldr	r3, [pc, #380]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b5b      	ldr	r3, [pc, #364]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a5a      	ldr	r2, [pc, #360]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b58      	ldr	r3, [pc, #352]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b54      	ldr	r3, [pc, #336]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a53      	ldr	r2, [pc, #332]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b51      	ldr	r3, [pc, #324]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a4c      	ldr	r2, [pc, #304]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a45      	ldr	r2, [pc, #276]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <MX_GPIO_Init+0x1c0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	4840      	ldr	r0, [pc, #256]	@ (800148c <MX_GPIO_Init+0x1c4>)
 800138c:	f000 ffe0 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	483e      	ldr	r0, [pc, #248]	@ (8001490 <MX_GPIO_Init+0x1c8>)
 8001396:	f000 ffdb 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800139a:	2200      	movs	r2, #0
 800139c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013a0:	483c      	ldr	r0, [pc, #240]	@ (8001494 <MX_GPIO_Init+0x1cc>)
 80013a2:	f000 ffd5 	bl	8002350 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013a6:	2308      	movs	r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4833      	ldr	r0, [pc, #204]	@ (800148c <MX_GPIO_Init+0x1c4>)
 80013be:	f000 fe2b 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	482d      	ldr	r0, [pc, #180]	@ (8001490 <MX_GPIO_Init+0x1c8>)
 80013da:	f000 fe1d 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013de:	2308      	movs	r3, #8
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ee:	2305      	movs	r3, #5
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4825      	ldr	r0, [pc, #148]	@ (8001490 <MX_GPIO_Init+0x1c8>)
 80013fa:	f000 fe0d 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001402:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4821      	ldr	r0, [pc, #132]	@ (8001498 <MX_GPIO_Init+0x1d0>)
 8001414:	f000 fe00 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001418:	2304      	movs	r3, #4
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	481c      	ldr	r0, [pc, #112]	@ (800149c <MX_GPIO_Init+0x1d4>)
 800142c:	f000 fdf4 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001430:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001434:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4812      	ldr	r0, [pc, #72]	@ (8001494 <MX_GPIO_Init+0x1cc>)
 800144a:	f000 fde5 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800144e:	2320      	movs	r3, #32
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <MX_GPIO_Init+0x1cc>)
 8001462:	f000 fdd9 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800146a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_GPIO_Init+0x1c4>)
 800147c:	f000 fdcc 	bl	8002018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001480:	bf00      	nop
 8001482:	3730      	adds	r7, #48	@ 0x30
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40021000 	.word	0x40021000
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400

080014a0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 (void)file;
 int DataIdx;

 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e009      	b.n	80014c6 <_write+0x26>
 {
   ITM_SendChar(*ptr++);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fd92 	bl	8000fe4 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbf1      	blt.n	80014b2 <_write+0x12>
 }
 return len;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <mpu6050_init>:

#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;

void mpu6050_init() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af04      	add	r7, sp, #16
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady( & hi2c1, (MPU6050_ADDR << 1) + 0, 1, 100);
 80014ea:	2364      	movs	r3, #100	@ 0x64
 80014ec:	2201      	movs	r2, #1
 80014ee:	21d0      	movs	r1, #208	@ 0xd0
 80014f0:	4843      	ldr	r0, [pc, #268]	@ (8001600 <mpu6050_init+0x11c>)
 80014f2:	f003 fceb 	bl	8004ecc <HAL_I2C_IsDeviceReady>
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]

  if (ret == HAL_OK) {
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d117      	bne.n	8001530 <mpu6050_init+0x4c>
    // i2c connected slow blink
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001506:	483f      	ldr	r0, [pc, #252]	@ (8001604 <mpu6050_init+0x120>)
 8001508:	f000 ff22 	bl	8002350 <HAL_GPIO_WritePin>
    HAL_Delay(800);
 800150c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001510:	f000 fc4c 	bl	8001dac <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151a:	483a      	ldr	r0, [pc, #232]	@ (8001604 <mpu6050_init+0x120>)
 800151c:	f000 ff18 	bl	8002350 <HAL_GPIO_WritePin>
    HAL_Delay(800);
 8001520:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001524:	f000 fc42 	bl	8001dac <HAL_Delay>

    printf("The MPU6050 device is ready \n");
 8001528:	4837      	ldr	r0, [pc, #220]	@ (8001608 <mpu6050_init+0x124>)
 800152a:	f00b f891 	bl	800c650 <puts>
 800152e:	e014      	b.n	800155a <mpu6050_init+0x76>
  } else {
    // i2c not connected fast blink
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001536:	4833      	ldr	r0, [pc, #204]	@ (8001604 <mpu6050_init+0x120>)
 8001538:	f000 ff0a 	bl	8002350 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800153c:	2064      	movs	r0, #100	@ 0x64
 800153e:	f000 fc35 	bl	8001dac <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001548:	482e      	ldr	r0, [pc, #184]	@ (8001604 <mpu6050_init+0x120>)
 800154a:	f000 ff01 	bl	8002350 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800154e:	2064      	movs	r0, #100	@ 0x64
 8001550:	f000 fc2c 	bl	8001dac <HAL_Delay>
    printf("Failed to initialize MPU6050 make sure i2c is connected properly \n");
 8001554:	482d      	ldr	r0, [pc, #180]	@ (800160c <mpu6050_init+0x128>)
 8001556:	f00b f87b 	bl	800c650 <puts>
  }

  uint8_t temp_data = FS_GYRO_500;
 800155a:	2308      	movs	r3, #8
 800155c:	71bb      	strb	r3, [r7, #6]
  ret = HAL_I2C_Mem_Write( & hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, & temp_data, 1, 100);
 800155e:	2364      	movs	r3, #100	@ 0x64
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	2301      	movs	r3, #1
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	1dbb      	adds	r3, r7, #6
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	221b      	movs	r2, #27
 800156e:	21d0      	movs	r1, #208	@ 0xd0
 8001570:	4823      	ldr	r0, [pc, #140]	@ (8001600 <mpu6050_init+0x11c>)
 8001572:	f003 f97f 	bl	8004874 <HAL_I2C_Mem_Write>
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]

  if (ret == HAL_OK) {
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <mpu6050_init+0xa4>
    printf("Configuring gyroscope, writing regsiter to 28\n");
 8001580:	4823      	ldr	r0, [pc, #140]	@ (8001610 <mpu6050_init+0x12c>)
 8001582:	f00b f865 	bl	800c650 <puts>
 8001586:	e002      	b.n	800158e <mpu6050_init+0xaa>
  } else {
    printf("Gyroscope Failed writing to register 28 \n");
 8001588:	4822      	ldr	r0, [pc, #136]	@ (8001614 <mpu6050_init+0x130>)
 800158a:	f00b f861 	bl	800c650 <puts>
  }

  temp_data = FS_ACCL_4G;
 800158e:	2308      	movs	r3, #8
 8001590:	71bb      	strb	r3, [r7, #6]
  ret = HAL_I2C_Mem_Write( & hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACCL, 1, & temp_data, 1, 100);
 8001592:	2364      	movs	r3, #100	@ 0x64
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	1dbb      	adds	r3, r7, #6
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	221c      	movs	r2, #28
 80015a2:	21d0      	movs	r1, #208	@ 0xd0
 80015a4:	4816      	ldr	r0, [pc, #88]	@ (8001600 <mpu6050_init+0x11c>)
 80015a6:	f003 f965 	bl	8004874 <HAL_I2C_Mem_Write>
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]

  if (ret == HAL_OK) {
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <mpu6050_init+0xd8>
    printf("Configuring Accelerometer: Writing to register 29 \n");
 80015b4:	4818      	ldr	r0, [pc, #96]	@ (8001618 <mpu6050_init+0x134>)
 80015b6:	f00b f84b 	bl	800c650 <puts>
 80015ba:	e002      	b.n	80015c2 <mpu6050_init+0xde>
  } else {
    printf("Accelerometer: Failed writing to register 28 \n");
 80015bc:	4817      	ldr	r0, [pc, #92]	@ (800161c <mpu6050_init+0x138>)
 80015be:	f00b f847 	bl	800c650 <puts>
  }

  temp_data = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	71bb      	strb	r3, [r7, #6]
  ret = HAL_I2C_Mem_Write( & hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, & temp_data, 1, 100);
 80015c6:	2364      	movs	r3, #100	@ 0x64
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	1dbb      	adds	r3, r7, #6
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	226b      	movs	r2, #107	@ 0x6b
 80015d6:	21d0      	movs	r1, #208	@ 0xd0
 80015d8:	4809      	ldr	r0, [pc, #36]	@ (8001600 <mpu6050_init+0x11c>)
 80015da:	f003 f94b 	bl	8004874 <HAL_I2C_Mem_Write>
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]

  if (ret == HAL_OK) {
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <mpu6050_init+0x10c>
    printf("Exiting from sleep mode \n");
 80015e8:	480d      	ldr	r0, [pc, #52]	@ (8001620 <mpu6050_init+0x13c>)
 80015ea:	f00b f831 	bl	800c650 <puts>
  } else {
    printf("Failed to exit from sleep mode \n");
  }

}
 80015ee:	e002      	b.n	80015f6 <mpu6050_init+0x112>
    printf("Failed to exit from sleep mode \n");
 80015f0:	480c      	ldr	r0, [pc, #48]	@ (8001624 <mpu6050_init+0x140>)
 80015f2:	f00b f82d 	bl	800c650 <puts>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000210 	.word	0x20000210
 8001604:	40020800 	.word	0x40020800
 8001608:	0800f040 	.word	0x0800f040
 800160c:	0800f060 	.word	0x0800f060
 8001610:	0800f0a4 	.word	0x0800f0a4
 8001614:	0800f0d4 	.word	0x0800f0d4
 8001618:	0800f100 	.word	0x0800f100
 800161c:	0800f134 	.word	0x0800f134
 8001620:	0800f164 	.word	0x0800f164
 8001624:	0800f180 	.word	0x0800f180

08001628 <mpu6050_read_all>:


}


void mpu6050_read_all() {
 8001628:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800162c:	b092      	sub	sp, #72	@ 0x48
 800162e:	af04      	add	r7, sp, #16

    float acc_x,acc_y,acc_z; // actual values
    float gyro_x,gyro_y,gyro_z;


    HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), ACC_REG_DATA, 1, data, 14, 1000);
 8001630:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	230e      	movs	r3, #14
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	223b      	movs	r2, #59	@ 0x3b
 8001642:	21d0      	movs	r1, #208	@ 0xd0
 8001644:	4854      	ldr	r0, [pc, #336]	@ (8001798 <mpu6050_read_all+0x170>)
 8001646:	f003 fa0f 	bl	8004a68 <HAL_I2C_Mem_Read>


    ACCEL_RAW_X = (int16_t)(data[0] << 8 | data[1]);
 800164a:	793b      	ldrb	r3, [r7, #4]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	797b      	ldrb	r3, [r7, #5]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	86fb      	strh	r3, [r7, #54]	@ 0x36
    ACCEL_RAW_Y = (int16_t)(data[2] << 8 | data[3]);
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	b21b      	sxth	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ACCEL_RAW_Z = (int16_t)(data[4] << 8 | data[5]);
 8001666:	7a3b      	ldrb	r3, [r7, #8]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	7a7b      	ldrb	r3, [r7, #9]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	867b      	strh	r3, [r7, #50]	@ 0x32

    GYRO_RAW_X = (int16_t)(data[8] << 8 | data[9]);
 8001674:	7b3b      	ldrb	r3, [r7, #12]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	863b      	strh	r3, [r7, #48]	@ 0x30
    GYRO_RAW_Y = (int16_t)(data[10] << 8 | data[11]);
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    GYRO_RAW_Z = (int16_t)(data[12] << 8 | data[13]);
 8001690:	7c3b      	ldrb	r3, [r7, #16]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	7c7b      	ldrb	r3, [r7, #17]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	85bb      	strh	r3, [r7, #44]	@ 0x2c


    // Raw values to actual values

	acc_x = (float)ACCEL_RAW_X/16384.0;
 800169e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016aa:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800179c <mpu6050_read_all+0x174>
 80016ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	acc_y = (float)ACCEL_RAW_Y/16384.0;
 80016b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c2:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800179c <mpu6050_read_all+0x174>
 80016c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	acc_z = (float)ACCEL_RAW_Z/16384.0;
 80016ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016da:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800179c <mpu6050_read_all+0x174>
 80016de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e2:	edc7 7a08 	vstr	s15, [r7, #32]

	gyro_x = (float)GYRO_RAW_X/131.0;
 80016e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f2:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80017a0 <mpu6050_read_all+0x178>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fa:	edc7 7a07 	vstr	s15, [r7, #28]
	gyro_y = (float)GYRO_RAW_Y/131.0;
 80016fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80017a0 <mpu6050_read_all+0x178>
 800170e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001712:	edc7 7a06 	vstr	s15, [r7, #24]
	gyro_z = (float)GYRO_RAW_Z/131.0;
 8001716:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001722:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80017a0 <mpu6050_read_all+0x178>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	edc7 7a05 	vstr	s15, [r7, #20]


    printf("Accelerometer (g): X=%.2f, Y=%.2f, Z=%.2f \n", acc_x, acc_y, acc_z);
 800172e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	4680      	mov	r8, r0
 8001736:	4689      	mov	r9, r1
 8001738:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800173a:	f7fe ff05 	bl	8000548 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	6a38      	ldr	r0, [r7, #32]
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001750:	e9cd 4500 	strd	r4, r5, [sp]
 8001754:	4642      	mov	r2, r8
 8001756:	464b      	mov	r3, r9
 8001758:	4812      	ldr	r0, [pc, #72]	@ (80017a4 <mpu6050_read_all+0x17c>)
 800175a:	f00a ff11 	bl	800c580 <iprintf>
    printf("Gyroscope : X=%.2f, Y=%.2f, Z=%.2f \n", gyro_x, gyro_y, gyro_z);
 800175e:	69f8      	ldr	r0, [r7, #28]
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_f2d>
 8001764:	4680      	mov	r8, r0
 8001766:	4689      	mov	r9, r1
 8001768:	69b8      	ldr	r0, [r7, #24]
 800176a:	f7fe feed 	bl	8000548 <__aeabi_f2d>
 800176e:	4604      	mov	r4, r0
 8001770:	460d      	mov	r5, r1
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7fe fee8 	bl	8000548 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001780:	e9cd 4500 	strd	r4, r5, [sp]
 8001784:	4642      	mov	r2, r8
 8001786:	464b      	mov	r3, r9
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <mpu6050_read_all+0x180>)
 800178a:	f00a fef9 	bl	800c580 <iprintf>
}
 800178e:	bf00      	nop
 8001790:	3738      	adds	r7, #56	@ 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001798:	20000210 	.word	0x20000210
 800179c:	46800000 	.word	0x46800000
 80017a0:	43030000 	.word	0x43030000
 80017a4:	0800f1bc 	.word	0x0800f1bc
 80017a8:	0800f1e8 	.word	0x0800f1e8

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f000 fbd2 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	@ 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a33      	ldr	r2, [pc, #204]	@ (80018e8 <HAL_I2C_MspInit+0xec>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12d      	bne.n	800187a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a31      	ldr	r2, [pc, #196]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800183a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001840:	2312      	movs	r3, #18
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800184c:	2304      	movs	r3, #4
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4619      	mov	r1, r3
 8001856:	4826      	ldr	r0, [pc, #152]	@ (80018f0 <HAL_I2C_MspInit+0xf4>)
 8001858:	f000 fbde 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	4a21      	ldr	r2, [pc, #132]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 8001866:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800186a:	6413      	str	r3, [r2, #64]	@ 0x40
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001878:	e031      	b.n	80018de <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <HAL_I2C_MspInit+0xf8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d12c      	bne.n	80018de <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	6313      	str	r3, [r2, #48]	@ 0x30
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a6:	2312      	movs	r3, #18
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b2:	2304      	movs	r3, #4
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <HAL_I2C_MspInit+0xf4>)
 80018be:	f000 fbab 	bl	8002018 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 80018cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_I2C_MspInit+0xf0>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40005400 	.word	0x40005400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40005800 	.word	0x40005800

080018f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	@ 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a31      	ldr	r2, [pc, #196]	@ (80019e8 <HAL_I2S_MspInit+0xf0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d15a      	bne.n	80019de <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001928:	2301      	movs	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800192c:	23c0      	movs	r3, #192	@ 0xc0
 800192e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4618      	mov	r0, r3
 800193a:	f005 f8cd 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001944:	f7ff fdc8 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a26      	ldr	r2, [pc, #152]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 8001952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001956:	6413      	str	r3, [r2, #64]	@ 0x40
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	4a1f      	ldr	r2, [pc, #124]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6313      	str	r3, [r2, #48]	@ 0x30
 8001974:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_I2S_MspInit+0xf4>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800199c:	2310      	movs	r3, #16
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ac:	2306      	movs	r3, #6
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b4:	4619      	mov	r1, r3
 80019b6:	480e      	ldr	r0, [pc, #56]	@ (80019f0 <HAL_I2S_MspInit+0xf8>)
 80019b8:	f000 fb2e 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019bc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ce:	2306      	movs	r3, #6
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4806      	ldr	r0, [pc, #24]	@ (80019f4 <HAL_I2S_MspInit+0xfc>)
 80019da:	f000 fb1d 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80019de:	bf00      	nop
 80019e0:	3738      	adds	r7, #56	@ 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40003c00 	.word	0x40003c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020800 	.word	0x40020800

080019f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <HAL_SPI_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a17      	ldr	r2, [pc, #92]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_SPI_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a52:	23e0      	movs	r3, #224	@ 0xe0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a62:	2305      	movs	r3, #5
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <HAL_SPI_MspInit+0x8c>)
 8001a6e:	f000 fad3 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40013000 	.word	0x40013000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <NMI_Handler+0x4>

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <UsageFault_Handler+0x4>

08001ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f000 f945 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <OTG_FS_IRQHandler+0x10>)
 8001aee:	f000 ff29 	bl	8002944 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000073c 	.word	0x2000073c

08001afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_kill>:

int _kill(int pid, int sig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b16:	f00a fdd1 	bl	800c6bc <__errno>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2216      	movs	r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_exit>:

void _exit (int status)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffe7 	bl	8001b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3e:	bf00      	nop
 8001b40:	e7fd      	b.n	8001b3e <_exit+0x12>

08001b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00a      	b.n	8001b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b54:	f3af 8000 	nop.w
 8001b58:	4601      	mov	r1, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf0      	blt.n	8001b54 <_read+0x12>
  }

  return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_isatty>:

int _isatty(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f00a fd52 	bl	800c6bc <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20020000 	.word	0x20020000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	20000358 	.word	0x20000358
 8001c4c:	20000c68 	.word	0x20000c68

08001c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c78:	f7ff ffea 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f00a fd11 	bl	800c6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff f9c4 	bl	8001032 <main>
  bx  lr    
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001cb8:	0800f664 	.word	0x0800f664
  ldr r2, =_sbss
 8001cbc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001cc0:	20000c68 	.word	0x20000c68

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <HAL_Init+0x40>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_Init+0x40>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_Init+0x40>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 f94f 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fd56 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f967 	bl	8001ffe <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d48:	f000 f92f 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	@ (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	2000035c 	.word	0x2000035c

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000035c 	.word	0x2000035c

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	@ (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	@ (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	@ 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff3e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff31 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	@ 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e16b      	b.n	800230c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 815a 	bne.w	8002306 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	2b02      	cmp	r3, #2
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80b4 	beq.w	8002306 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <HAL_GPIO_Init+0x30c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002324 <HAL_GPIO_Init+0x30c>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_GPIO_Init+0x30c>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002328 <HAL_GPIO_Init+0x310>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a52      	ldr	r2, [pc, #328]	@ (800232c <HAL_GPIO_Init+0x314>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02b      	beq.n	800223e <HAL_GPIO_Init+0x226>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a51      	ldr	r2, [pc, #324]	@ (8002330 <HAL_GPIO_Init+0x318>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d025      	beq.n	800223a <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a50      	ldr	r2, [pc, #320]	@ (8002334 <HAL_GPIO_Init+0x31c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <HAL_GPIO_Init+0x320>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4e      	ldr	r2, [pc, #312]	@ (800233c <HAL_GPIO_Init+0x324>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4d      	ldr	r2, [pc, #308]	@ (8002340 <HAL_GPIO_Init+0x328>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4c      	ldr	r2, [pc, #304]	@ (8002344 <HAL_GPIO_Init+0x32c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4b      	ldr	r2, [pc, #300]	@ (8002348 <HAL_GPIO_Init+0x330>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x20a>
 800221e:	2307      	movs	r3, #7
 8002220:	e00e      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002222:	2308      	movs	r3, #8
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002226:	2306      	movs	r3, #6
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x228>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x228>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	@ (8002328 <HAL_GPIO_Init+0x310>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <HAL_GPIO_Init+0x334>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a32      	ldr	r2, [pc, #200]	@ (800234c <HAL_GPIO_Init+0x334>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_GPIO_Init+0x334>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a27      	ldr	r2, [pc, #156]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b26      	ldr	r3, [pc, #152]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <HAL_GPIO_Init+0x334>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <HAL_GPIO_Init+0x334>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae90 	bls.w	8002034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40021c00 	.word	0x40021c00
 800234c:	40013c00 	.word	0x40013c00

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800236c:	e003      	b.n	8002376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af02      	add	r7, sp, #8
 8002388:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e059      	b.n	8002448 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f007 ffa8 	bl	800a304 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c2:	d102      	bne.n	80023ca <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fdc2 	bl	8006f58 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7c1a      	ldrb	r2, [r3, #16]
 80023dc:	f88d 2000 	strb.w	r2, [sp]
 80023e0:	3304      	adds	r3, #4
 80023e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e4:	f004 fd43 	bl	8006e6e <USB_CoreInit>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e026      	b.n	8002448 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f004 fdba 	bl	8006f7a <USB_SetCurrentMode>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e017      	b.n	8002448 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7c1a      	ldrb	r2, [r3, #16]
 8002420:	f88d 2000 	strb.w	r2, [sp]
 8002424:	3304      	adds	r3, #4
 8002426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002428:	f004 ff5c 	bl	80072e4 <USB_HostInit>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e004      	b.n	8002448 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b08b      	sub	sp, #44	@ 0x2c
 8002454:	af04      	add	r7, sp, #16
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	461a      	mov	r2, r3
 800245e:	4603      	mov	r3, r0
 8002460:	70fb      	strb	r3, [r7, #3]
 8002462:	460b      	mov	r3, r1
 8002464:	70bb      	strb	r3, [r7, #2]
 8002466:	4613      	mov	r3, r2
 8002468:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800246a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800246c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_HCD_HC_Init+0x2c>
 8002478:	2302      	movs	r3, #2
 800247a:	e09d      	b.n	80025b8 <HAL_HCD_HC_Init+0x168>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3319      	adds	r3, #25
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3314      	adds	r3, #20
 80024a8:	787a      	ldrb	r2, [r7, #1]
 80024aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3315      	adds	r3, #21
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3326      	adds	r3, #38	@ 0x26
 80024d0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80024d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	78bb      	ldrb	r3, [r7, #2]
 80024da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024de:	b2d8      	uxtb	r0, r3
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3316      	adds	r3, #22
 80024ee:	4602      	mov	r2, r0
 80024f0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fbc8 	bl	8002c8c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80024fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002500:	2b00      	cmp	r3, #0
 8002502:	da0a      	bge.n	800251a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3317      	adds	r3, #23
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e009      	b.n	800252e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	3317      	adds	r3, #23
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f005 f83a 	bl	80075ac <USB_GetHostSpeed>
 8002538:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800253a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d10b      	bne.n	800255a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002542:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_HCD_HC_Init+0x10a>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2bbc      	cmp	r3, #188	@ 0xbc
 8002554:	d901      	bls.n	800255a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002556:	23bc      	movs	r3, #188	@ 0xbc
 8002558:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3318      	adds	r3, #24
 800256a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800256e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	b298      	uxth	r0, r3
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3328      	adds	r3, #40	@ 0x28
 8002584:	4602      	mov	r2, r0
 8002586:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	b29b      	uxth	r3, r3
 8002590:	787c      	ldrb	r4, [r7, #1]
 8002592:	78ba      	ldrb	r2, [r7, #2]
 8002594:	78f9      	ldrb	r1, [r7, #3]
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4623      	mov	r3, r4
 80025a6:	f005 f829 	bl	80075fc <USB_HC_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_HCD_HC_Halt+0x1e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e00f      	b.n	80025fe <HAL_HCD_HC_Halt+0x3e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f005 fbbb 	bl	8007d6a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	70fb      	strb	r3, [r7, #3]
 800261a:	460b      	mov	r3, r1
 800261c:	70bb      	strb	r3, [r7, #2]
 800261e:	4613      	mov	r3, r2
 8002620:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	3317      	adds	r3, #23
 8002632:	78ba      	ldrb	r2, [r7, #2]
 8002634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3326      	adds	r3, #38	@ 0x26
 8002646:	787a      	ldrb	r2, [r7, #1]
 8002648:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800264a:	7c3b      	ldrb	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d114      	bne.n	800267a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	332a      	adds	r3, #42	@ 0x2a
 8002660:	2203      	movs	r2, #3
 8002662:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3319      	adds	r3, #25
 8002674:	7f3a      	ldrb	r2, [r7, #28]
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e009      	b.n	800268e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	332a      	adds	r3, #42	@ 0x2a
 800268a:	2202      	movs	r2, #2
 800268c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800268e:	787b      	ldrb	r3, [r7, #1]
 8002690:	2b03      	cmp	r3, #3
 8002692:	f200 8102 	bhi.w	800289a <HAL_HCD_HC_SubmitRequest+0x292>
 8002696:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	08002885 	.word	0x08002885
 80026a4:	08002771 	.word	0x08002771
 80026a8:	080027fb 	.word	0x080027fb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80026ac:	7c3b      	ldrb	r3, [r7, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 80f5 	bne.w	800289e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80026b4:	78bb      	ldrb	r3, [r7, #2]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d12d      	bne.n	8002716 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80026ba:	8b3b      	ldrh	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	333d      	adds	r3, #61	@ 0x3d
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	333d      	adds	r3, #61	@ 0x3d
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	332a      	adds	r3, #42	@ 0x2a
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80026fe:	e0ce      	b.n	800289e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	332a      	adds	r3, #42	@ 0x2a
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
      break;
 8002714:	e0c3      	b.n	800289e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	331a      	adds	r3, #26
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 80b8 	bne.w	800289e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	333c      	adds	r3, #60	@ 0x3c
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	332a      	adds	r3, #42	@ 0x2a
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
      break;
 8002758:	e0a1      	b.n	800289e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	332a      	adds	r3, #42	@ 0x2a
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
      break;
 800276e:	e096      	b.n	800289e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002770:	78bb      	ldrb	r3, [r7, #2]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d120      	bne.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	333d      	adds	r3, #61	@ 0x3d
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	332a      	adds	r3, #42	@ 0x2a
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80027a0:	e07e      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	332a      	adds	r3, #42	@ 0x2a
 80027b2:	2202      	movs	r2, #2
 80027b4:	701a      	strb	r2, [r3, #0]
      break;
 80027b6:	e073      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	333c      	adds	r3, #60	@ 0x3c
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	332a      	adds	r3, #42	@ 0x2a
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
      break;
 80027e2:	e05d      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	332a      	adds	r3, #42	@ 0x2a
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
      break;
 80027f8:	e052      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027fa:	78bb      	ldrb	r3, [r7, #2]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d120      	bne.n	8002842 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	333d      	adds	r3, #61	@ 0x3d
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10a      	bne.n	800282c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	332a      	adds	r3, #42	@ 0x2a
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800282a:	e039      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	332a      	adds	r3, #42	@ 0x2a
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
      break;
 8002840:	e02e      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	333c      	adds	r3, #60	@ 0x3c
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	332a      	adds	r3, #42	@ 0x2a
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
      break;
 800286c:	e018      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	332a      	adds	r3, #42	@ 0x2a
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
      break;
 8002882:	e00d      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	332a      	adds	r3, #42	@ 0x2a
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
      break;
 8002898:	e002      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800289e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	332c      	adds	r3, #44	@ 0x2c
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	8b39      	ldrh	r1, [r7, #24]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4403      	add	r3, r0
 80028c4:	3334      	adds	r3, #52	@ 0x34
 80028c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	334c      	adds	r3, #76	@ 0x4c
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3338      	adds	r3, #56	@ 0x38
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	3315      	adds	r3, #21
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334d      	adds	r3, #77	@ 0x4d
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3310      	adds	r3, #16
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	1d19      	adds	r1, r3, #4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	799b      	ldrb	r3, [r3, #6]
 8002932:	461a      	mov	r2, r3
 8002934:	f004 ff8e 	bl	8007854 <USB_HC_StartXfer>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop

08002944 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fc83 	bl	8007266 <USB_GetMode>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	f040 80fb 	bne.w	8002b5e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f004 fc46 	bl	80071fe <USB_ReadInterrupts>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80f1 	beq.w	8002b5c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 fc3d 	bl	80071fe <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800298a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800298e:	d104      	bne.n	800299a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002998:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fc2d 	bl	80071fe <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ae:	d104      	bne.n	80029ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fc1d 	bl	80071fe <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ce:	d104      	bne.n	80029da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fc0d 	bl	80071fe <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d103      	bne.n	80029f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2202      	movs	r2, #2
 80029f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fbff 	bl	80071fe <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a0a:	d120      	bne.n	8002a4e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a26:	2110      	movs	r1, #16
 8002a28:	6938      	ldr	r0, [r7, #16]
 8002a2a:	f004 faf2 	bl	8007012 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a2e:	6938      	ldr	r0, [r7, #16]
 8002a30:	f004 fb21 	bl	8007076 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7a5b      	ldrb	r3, [r3, #9]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d105      	bne.n	8002a48 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fd12 	bl	800746c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f007 fcd9 	bl	800a400 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fbd3 	bl	80071fe <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a62:	d102      	bne.n	8002a6a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f001 fd4d 	bl	8004504 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fbc5 	bl	80071fe <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d106      	bne.n	8002a8c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f007 fca2 	bl	800a3c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fbb4 	bl	80071fe <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002aa0:	d139      	bne.n	8002b16 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f005 f94e 	bl	8007d48 <USB_HC_ReadInterrupt>
 8002aac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e025      	b.n	8002b00 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d018      	beq.n	8002afa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ade:	d106      	bne.n	8002aee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f905 	bl	8002cf6 <HCD_HC_IN_IRQHandler>
 8002aec:	e005      	b.n	8002afa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 ff67 	bl	80039c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	795b      	ldrb	r3, [r3, #5]
 8002b04:	461a      	mov	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d3d3      	bcc.n	8002ab4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 fb6f 	bl	80071fe <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d101      	bne.n	8002b2e <HAL_HCD_IRQHandler+0x1ea>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_HCD_IRQHandler+0x1ec>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0210 	bic.w	r2, r2, #16
 8002b42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f001 fbfe 	bl	8004346 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0210 	orr.w	r2, r2, #16
 8002b58:	619a      	str	r2, [r3, #24]
 8002b5a:	e000      	b.n	8002b5e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b5c:	bf00      	nop
    }
  }
}
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_HCD_Start+0x16>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e013      	b.n	8002ba2 <HAL_HCD_Start+0x3e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fcd6 	bl	800753a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 f9cf 	bl	8006f36 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_HCD_Stop+0x16>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e00d      	b.n	8002bdc <HAL_HCD_Stop+0x32>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f005 fa29 	bl	8008024 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fc78 	bl	80074e6 <USB_ResetPort>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	@ 0x4c
 8002c1c:	781b      	ldrb	r3, [r3, #0]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3338      	adds	r3, #56	@ 0x38
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 fcba 	bl	80075da <USB_GetCurrentFrame>
 8002c66:	4603      	mov	r3, r0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fc95 	bl	80075ac <USB_GetHostSpeed>
 8002c82:	4603      	mov	r3, r0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	331a      	adds	r3, #26
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	331b      	adds	r3, #27
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3325      	adds	r3, #37	@ 0x25
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3324      	adds	r3, #36	@ 0x24
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 fa85 	bl	8007224 <USB_ReadChInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d11a      	bne.n	8002d5a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2304      	movs	r3, #4
 8002d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	334d      	adds	r3, #77	@ 0x4d
 8002d46:	2207      	movs	r2, #7
 8002d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 f809 	bl	8007d6a <USB_HC_Halt>
 8002d58:	e09e      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 fa5e 	bl	8007224 <USB_ReadChInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d72:	d11b      	bne.n	8002dac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	2208      	movs	r2, #8
 8002d9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 ffe0 	bl	8007d6a <USB_HC_Halt>
 8002daa:	e075      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fa35 	bl	8007224 <USB_ReadChInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d11a      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334d      	adds	r3, #77	@ 0x4d
 8002de6:	2206      	movs	r2, #6
 8002de8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 ffb9 	bl	8007d6a <USB_HC_Halt>
 8002df8:	e04e      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 fa0e 	bl	8007224 <USB_ReadChInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e12:	d11b      	bne.n	8002e4c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	334d      	adds	r3, #77	@ 0x4d
 8002e38:	2209      	movs	r2, #9
 8002e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f004 ff90 	bl	8007d6a <USB_HC_Halt>
 8002e4a:	e025      	b.n	8002e98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 f9e5 	bl	8007224 <USB_ReadChInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e60:	2b80      	cmp	r3, #128	@ 0x80
 8002e62:	d119      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334d      	adds	r3, #77	@ 0x4d
 8002e86:	2207      	movs	r2, #7
 8002e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 ff69 	bl	8007d6a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 f9bf 	bl	8007224 <USB_ReadChInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb0:	d112      	bne.n	8002ed8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f004 ff55 	bl	8007d6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	f000 bd75 	b.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 f99f 	bl	8007224 <USB_ReadChInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	f040 8128 	bne.w	8003142 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efe:	461a      	mov	r2, r3
 8002f00:	2320      	movs	r3, #32
 8002f02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	331b      	adds	r3, #27
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d119      	bne.n	8002f4e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	331b      	adds	r3, #27
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	0151      	lsls	r1, r2, #5
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	440a      	add	r2, r1
 8002f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	799b      	ldrb	r3, [r3, #6]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01b      	beq.n	8002f8e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3330      	adds	r3, #48	@ 0x30
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	1ac9      	subs	r1, r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	3338      	adds	r3, #56	@ 0x38
 8002f8c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	334d      	adds	r3, #77	@ 0x4d
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3344      	adds	r3, #68	@ 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3326      	adds	r3, #38	@ 0x26
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3326      	adds	r3, #38	@ 0x26
 8002fee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d110      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 feb4 	bl	8007d6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	2310      	movs	r3, #16
 8003012:	6093      	str	r3, [r2, #8]
 8003014:	e03d      	b.n	8003092 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3326      	adds	r3, #38	@ 0x26
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d00a      	beq.n	8003042 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800303e:	2b01      	cmp	r3, #1
 8003040:	d127      	bne.n	8003092 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	440a      	add	r2, r1
 8003058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800305c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003060:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	334c      	adds	r3, #76	@ 0x4c
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	334c      	adds	r3, #76	@ 0x4c
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f007 f9c5 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	799b      	ldrb	r3, [r3, #6]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d13b      	bne.n	8003112 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3338      	adds	r3, #56	@ 0x38
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4403      	add	r3, r0
 80030ba:	3328      	adds	r3, #40	@ 0x28
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	440b      	add	r3, r1
 80030c0:	1e59      	subs	r1, r3, #1
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4403      	add	r3, r0
 80030d0:	3328      	adds	r3, #40	@ 0x28
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8470 	beq.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	333c      	adds	r3, #60	@ 0x3c
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	f083 0301 	eor.w	r3, r3, #1
 80030fa:	b2d8      	uxtb	r0, r3
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	333c      	adds	r3, #60	@ 0x3c
 800310a:	4602      	mov	r2, r0
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	f000 bc58 	b.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	333c      	adds	r3, #60	@ 0x3c
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2d8      	uxtb	r0, r3
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	333c      	adds	r3, #60	@ 0x3c
 800313a:	4602      	mov	r2, r0
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	f000 bc40 	b.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f004 f86a 	bl	8007224 <USB_ReadChInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d131      	bne.n	80031be <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	2320      	movs	r3, #32
 800316a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	331a      	adds	r3, #26
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	f040 841f 	bne.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	331b      	adds	r3, #27
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	334d      	adds	r3, #77	@ 0x4d
 80031a8:	2203      	movs	r2, #3
 80031aa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f004 fdd8 	bl	8007d6a <USB_HC_Halt>
 80031ba:	f000 bc02 	b.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 f82c 	bl	8007224 <USB_ReadChInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	f040 8305 	bne.w	80037e2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	2302      	movs	r3, #2
 80031e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	334d      	adds	r3, #77	@ 0x4d
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d114      	bne.n	800322a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334d      	adds	r3, #77	@ 0x4d
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	334c      	adds	r3, #76	@ 0x4c
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e2cc      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334d      	adds	r3, #77	@ 0x4d
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d114      	bne.n	800326a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334c      	adds	r3, #76	@ 0x4c
 8003264:	2205      	movs	r2, #5
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e2ac      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334d      	adds	r3, #77	@ 0x4d
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b07      	cmp	r3, #7
 800327e:	d00b      	beq.n	8003298 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	334d      	adds	r3, #77	@ 0x4d
 8003290:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003292:	2b09      	cmp	r3, #9
 8003294:	f040 80a6 	bne.w	80033e4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	@ 0x4d
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3344      	adds	r3, #68	@ 0x44
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4403      	add	r3, r0
 80032cc:	3344      	adds	r3, #68	@ 0x44
 80032ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3344      	adds	r3, #68	@ 0x44
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d943      	bls.n	800336e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3344      	adds	r3, #68	@ 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	331a      	adds	r3, #26
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d123      	bne.n	8003358 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	331b      	adds	r3, #27
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	331c      	adds	r3, #28
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	440a      	add	r2, r1
 800334e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003356:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334c      	adds	r3, #76	@ 0x4c
 8003368:	2204      	movs	r2, #4
 800336a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800336c:	e229      	b.n	80037c2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334c      	adds	r3, #76	@ 0x4c
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3326      	adds	r3, #38	@ 0x26
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3326      	adds	r3, #38	@ 0x26
 80033a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	f040 8209 	bne.w	80037c2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e2:	e1ee      	b.n	80037c2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334d      	adds	r3, #77	@ 0x4d
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	f040 80c8 	bne.w	800358c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	331b      	adds	r3, #27
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	f040 81ce 	bne.w	80037c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3326      	adds	r3, #38	@ 0x26
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d16b      	bne.n	8003516 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3348      	adds	r3, #72	@ 0x48
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c59      	adds	r1, r3, #1
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4403      	add	r3, r0
 800345e:	3348      	adds	r3, #72	@ 0x48
 8003460:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003462:	78fa      	ldrb	r2, [r7, #3]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3348      	adds	r3, #72	@ 0x48
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d943      	bls.n	8003500 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3348      	adds	r3, #72	@ 0x48
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	331b      	adds	r3, #27
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3344      	adds	r3, #68	@ 0x44
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d809      	bhi.n	80034ca <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	331c      	adds	r3, #28
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	@ 0x4c
 80034fa:	2204      	movs	r2, #4
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e014      	b.n	800352a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334c      	adds	r3, #76	@ 0x4c
 8003510:	2202      	movs	r2, #2
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e009      	b.n	800352a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334c      	adds	r3, #76	@ 0x4c
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3326      	adds	r3, #38	@ 0x26
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3326      	adds	r3, #38	@ 0x26
 8003550:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003552:	2b02      	cmp	r3, #2
 8003554:	f040 8136 	bne.w	80037c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800356e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003576:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e11b      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	@ 0x4d
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	f040 8081 	bne.w	80036a6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334d      	adds	r3, #77	@ 0x4d
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	331b      	adds	r3, #27
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 80fa 	bne.w	80037c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334c      	adds	r3, #76	@ 0x4c
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003602:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	440a      	add	r2, r1
 800361a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800361e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003622:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	440a      	add	r2, r1
 800363a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800363e:	f023 0320 	bic.w	r3, r3, #32
 8003642:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3326      	adds	r3, #38	@ 0x26
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3326      	adds	r3, #38	@ 0x26
 800366a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800366c:	2b02      	cmp	r3, #2
 800366e:	f040 80a9 	bne.w	80037c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003688:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003690:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	e08e      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	334d      	adds	r3, #77	@ 0x4d
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d143      	bne.n	8003744 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	334d      	adds	r3, #77	@ 0x4d
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334c      	adds	r3, #76	@ 0x4c
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3326      	adds	r3, #38	@ 0x26
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3326      	adds	r3, #38	@ 0x26
 800370a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800370c:	2b02      	cmp	r3, #2
 800370e:	d159      	bne.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003726:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800372e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4413      	add	r3, r2
 8003738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800373c:	461a      	mov	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e03f      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	334d      	adds	r3, #77	@ 0x4d
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d126      	bne.n	80037a8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	334d      	adds	r3, #77	@ 0x4d
 800376a:	2202      	movs	r2, #2
 800376c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3344      	adds	r3, #68	@ 0x44
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c59      	adds	r1, r3, #1
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4403      	add	r3, r0
 800378e:	3344      	adds	r3, #68	@ 0x44
 8003790:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	334c      	adds	r3, #76	@ 0x4c
 80037a2:	2204      	movs	r2, #4
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e00d      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334d      	adds	r3, #77	@ 0x4d
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	f000 8100 	beq.w	80039c0 <HCD_HC_IN_IRQHandler+0xcca>
 80037c0:	e000      	b.n	80037c4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	334c      	adds	r3, #76	@ 0x4c
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 fe1e 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
 80037e0:	e0ef      	b.n	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fd1a 	bl	8007224 <USB_ReadChInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f6:	2b40      	cmp	r3, #64	@ 0x40
 80037f8:	d12f      	bne.n	800385a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003806:	461a      	mov	r2, r3
 8003808:	2340      	movs	r3, #64	@ 0x40
 800380a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	334d      	adds	r3, #77	@ 0x4d
 800381c:	2205      	movs	r2, #5
 800381e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	331a      	adds	r3, #26
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3344      	adds	r3, #68	@ 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fa89 	bl	8007d6a <USB_HC_Halt>
 8003858:	e0b3      	b.n	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 fcde 	bl	8007224 <USB_ReadChInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	f040 80a7 	bne.w	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3326      	adds	r3, #38	@ 0x26
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d11b      	bne.n	80038c2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3344      	adds	r3, #68	@ 0x44
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	334d      	adds	r3, #77	@ 0x4d
 80038ae:	2204      	movs	r2, #4
 80038b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fa55 	bl	8007d6a <USB_HC_Halt>
 80038c0:	e03f      	b.n	8003942 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	3326      	adds	r3, #38	@ 0x26
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3326      	adds	r3, #38	@ 0x26
 80038e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d129      	bne.n	8003942 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3344      	adds	r3, #68	@ 0x44
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	799b      	ldrb	r3, [r3, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HCD_HC_IN_IRQHandler+0xc2a>
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	331b      	adds	r3, #27
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d110      	bne.n	8003942 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	334d      	adds	r3, #77	@ 0x4d
 8003930:	2204      	movs	r2, #4
 8003932:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f004 fa14 	bl	8007d6a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	331b      	adds	r3, #27
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d129      	bne.n	80039ac <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	331b      	adds	r3, #27
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	440a      	add	r2, r1
 8003982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039a6:	f043 0320 	orr.w	r3, r3, #32
 80039aa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	2310      	movs	r3, #16
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	e000      	b.n	80039c2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80039c0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fc1c 	bl	8007224 <USB_ReadChInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d11b      	bne.n	8003a2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	2304      	movs	r3, #4
 8003a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334d      	adds	r3, #77	@ 0x4d
 8003a18:	2207      	movs	r2, #7
 8003a1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 f9a0 	bl	8007d6a <USB_HC_Halt>
 8003a2a:	f000 bc89 	b.w	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fbf4 	bl	8007224 <USB_ReadChInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	f040 8082 	bne.w	8003b4c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a54:	461a      	mov	r2, r3
 8003a56:	2320      	movs	r3, #32
 8003a58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3319      	adds	r3, #25
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d124      	bne.n	8003aba <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3319      	adds	r3, #25
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	334c      	adds	r3, #76	@ 0x4c
 8003a94:	2202      	movs	r2, #2
 8003a96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	334d      	adds	r3, #77	@ 0x4d
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 f958 	bl	8007d6a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	331a      	adds	r3, #26
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 8437 	bne.w	8004340 <HCD_HC_OUT_IRQHandler+0x978>
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	331b      	adds	r3, #27
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f040 842b 	bne.w	8004340 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3326      	adds	r3, #38	@ 0x26
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d009      	beq.n	8003b14 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	331b      	adds	r3, #27
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	334d      	adds	r3, #77	@ 0x4d
 8003b24:	2203      	movs	r2, #3
 8003b26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f004 f91a 	bl	8007d6a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	3344      	adds	r3, #68	@ 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e3f9      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 fb65 	bl	8007224 <USB_ReadChInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d111      	bne.n	8003b8a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b72:	461a      	mov	r2, r3
 8003b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b78:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 f8f1 	bl	8007d6a <USB_HC_Halt>
 8003b88:	e3da      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f003 fb46 	bl	8007224 <USB_ReadChInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d168      	bne.n	8003c74 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3344      	adds	r3, #68	@ 0x44
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 fb30 	bl	8007224 <USB_ReadChInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d112      	bne.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3319      	adds	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2340      	movs	r3, #64	@ 0x40
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	331b      	adds	r3, #27
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d019      	beq.n	8003c3e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	331b      	adds	r3, #27
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	334d      	adds	r3, #77	@ 0x4d
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 f87c 	bl	8007d6a <USB_HC_Halt>
 8003c72:	e365      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 fad1 	bl	8007224 <USB_ReadChInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d139      	bne.n	8003d00 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	334d      	adds	r3, #77	@ 0x4d
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	331a      	adds	r3, #26
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3319      	adds	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3344      	adds	r3, #68	@ 0x44
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 f83f 	bl	8007d6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2340      	movs	r3, #64	@ 0x40
 8003cfc:	6093      	str	r3, [r2, #8]
 8003cfe:	e31f      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 fa8b 	bl	8007224 <USB_ReadChInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d11a      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d24:	461a      	mov	r2, r3
 8003d26:	2308      	movs	r3, #8
 8003d28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	334d      	adds	r3, #77	@ 0x4d
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 f80f 	bl	8007d6a <USB_HC_Halt>
 8003d4c:	e2f8      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 fa64 	bl	8007224 <USB_ReadChInterrupts>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d144      	bne.n	8003df0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3344      	adds	r3, #68	@ 0x44
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334d      	adds	r3, #77	@ 0x4d
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3319      	adds	r3, #25
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d114      	bne.n	8003dce <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3318      	adds	r3, #24
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3319      	adds	r3, #25
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f003 ffc7 	bl	8007d6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de8:	461a      	mov	r2, r3
 8003dea:	2310      	movs	r3, #16
 8003dec:	6093      	str	r3, [r2, #8]
 8003dee:	e2a7      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f003 fa13 	bl	8007224 <USB_ReadChInterrupts>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b80      	cmp	r3, #128	@ 0x80
 8003e06:	f040 8083 	bne.w	8003f10 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	799b      	ldrb	r3, [r3, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d111      	bne.n	8003e36 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	334d      	adds	r3, #77	@ 0x4d
 8003e22:	2207      	movs	r2, #7
 8003e24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 ff9b 	bl	8007d6a <USB_HC_Halt>
 8003e34:	e062      	b.n	8003efc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3344      	adds	r3, #68	@ 0x44
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4403      	add	r3, r0
 8003e56:	3344      	adds	r3, #68	@ 0x44
 8003e58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3344      	adds	r3, #68	@ 0x44
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d922      	bls.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3344      	adds	r3, #68	@ 0x44
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	334c      	adds	r3, #76	@ 0x4c
 8003e94:	2204      	movs	r2, #4
 8003e96:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334c      	adds	r3, #76	@ 0x4c
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f006 fab4 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003eb4:	e022      	b.n	8003efc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	334c      	adds	r3, #76	@ 0x4c
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ee0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ee8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	6093      	str	r3, [r2, #8]
 8003f0e:	e217      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 f983 	bl	8007224 <USB_ReadChInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f28:	d11b      	bne.n	8003f62 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	334d      	adds	r3, #77	@ 0x4d
 8003f3a:	2209      	movs	r2, #9
 8003f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 ff0f 	bl	8007d6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5e:	6093      	str	r3, [r2, #8]
 8003f60:	e1ee      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 f95a 	bl	8007224 <USB_ReadChInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	f040 81df 	bne.w	800433a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334d      	adds	r3, #77	@ 0x4d
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f040 8093 	bne.w	80040cc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	334d      	adds	r3, #77	@ 0x4d
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	334c      	adds	r3, #76	@ 0x4c
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3326      	adds	r3, #38	@ 0x26
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d00b      	beq.n	8003ffc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3326      	adds	r3, #38	@ 0x26
 8003ff4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	f040 8190 	bne.w	800431c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	799b      	ldrb	r3, [r3, #6]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d115      	bne.n	8004030 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	333d      	adds	r3, #61	@ 0x3d
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	f083 0301 	eor.w	r3, r3, #1
 800401c:	b2d8      	uxtb	r0, r3
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	333d      	adds	r3, #61	@ 0x3d
 800402c:	4602      	mov	r2, r0
 800402e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	799b      	ldrb	r3, [r3, #6]
 8004034:	2b01      	cmp	r3, #1
 8004036:	f040 8171 	bne.w	800431c <HCD_HC_OUT_IRQHandler+0x954>
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3334      	adds	r3, #52	@ 0x34
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8165 	beq.w	800431c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3334      	adds	r3, #52	@ 0x34
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4403      	add	r3, r0
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	440b      	add	r3, r1
 8004078:	1e59      	subs	r1, r3, #1
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4403      	add	r3, r0
 8004088:	3328      	adds	r3, #40	@ 0x28
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004090:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 813f 	beq.w	800431c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	333d      	adds	r3, #61	@ 0x3d
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	f083 0301 	eor.w	r3, r3, #1
 80040b6:	b2d8      	uxtb	r0, r3
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	333d      	adds	r3, #61	@ 0x3d
 80040c6:	4602      	mov	r2, r0
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e127      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d120      	bne.n	8004124 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334d      	adds	r3, #77	@ 0x4d
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	331b      	adds	r3, #27
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 8107 	bne.w	800431c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	334c      	adds	r3, #76	@ 0x4c
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e0fb      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	334d      	adds	r3, #77	@ 0x4d
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d13a      	bne.n	80041b0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	334d      	adds	r3, #77	@ 0x4d
 800414a:	2202      	movs	r2, #2
 800414c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	334c      	adds	r3, #76	@ 0x4c
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	331b      	adds	r3, #27
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80d1 	bne.w	800431c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	331b      	adds	r3, #27
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ac:	6053      	str	r3, [r2, #4]
 80041ae:	e0b5      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	334d      	adds	r3, #77	@ 0x4d
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d114      	bne.n	80041f0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334d      	adds	r3, #77	@ 0x4d
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	334c      	adds	r3, #76	@ 0x4c
 80041ea:	2202      	movs	r2, #2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e095      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334d      	adds	r3, #77	@ 0x4d
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b06      	cmp	r3, #6
 8004204:	d114      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	334d      	adds	r3, #77	@ 0x4d
 8004216:	2202      	movs	r2, #2
 8004218:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	334c      	adds	r3, #76	@ 0x4c
 800422a:	2205      	movs	r2, #5
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e075      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334d      	adds	r3, #77	@ 0x4d
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b07      	cmp	r3, #7
 8004244:	d00a      	beq.n	800425c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	334d      	adds	r3, #77	@ 0x4d
 8004256:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004258:	2b09      	cmp	r3, #9
 800425a:	d170      	bne.n	800433e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334d      	adds	r3, #77	@ 0x4d
 800426c:	2202      	movs	r2, #2
 800426e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3344      	adds	r3, #68	@ 0x44
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4403      	add	r3, r0
 8004290:	3344      	adds	r3, #68	@ 0x44
 8004292:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3344      	adds	r3, #68	@ 0x44
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d914      	bls.n	80042d4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3344      	adds	r3, #68	@ 0x44
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334c      	adds	r3, #76	@ 0x4c
 80042ce:	2204      	movs	r2, #4
 80042d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042d2:	e022      	b.n	800431a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	334c      	adds	r3, #76	@ 0x4c
 80042e4:	2202      	movs	r2, #2
 80042e6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004306:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800431a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	334c      	adds	r3, #76	@ 0x4c
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f006 f872 	bl	800a41c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004338:	e002      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800433e:	bf00      	nop
  }
}
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b08a      	sub	sp, #40	@ 0x28
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	0c5b      	lsrs	r3, r3, #17
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800437a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d004      	beq.n	800438c <HCD_RXQLVL_IRQHandler+0x46>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b05      	cmp	r3, #5
 8004386:	f000 80b6 	beq.w	80044f6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800438a:	e0b7      	b.n	80044fc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80b3 	beq.w	80044fa <HCD_RXQLVL_IRQHandler+0x1b4>
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	332c      	adds	r3, #44	@ 0x2c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80a7 	beq.w	80044fa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3338      	adds	r3, #56	@ 0x38
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	18d1      	adds	r1, r2, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4403      	add	r3, r0
 80043d0:	3334      	adds	r3, #52	@ 0x34
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4299      	cmp	r1, r3
 80043d6:	f200 8083 	bhi.w	80044e0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	332c      	adds	r3, #44	@ 0x2c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	b292      	uxth	r2, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	f002 feaa 	bl	800714e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	332c      	adds	r3, #44	@ 0x2c
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	18d1      	adds	r1, r2, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4403      	add	r3, r0
 800441e:	332c      	adds	r3, #44	@ 0x2c
 8004420:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3338      	adds	r3, #56	@ 0x38
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	18d1      	adds	r1, r2, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4403      	add	r3, r0
 8004446:	3338      	adds	r3, #56	@ 0x38
 8004448:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	0cdb      	lsrs	r3, r3, #19
 800445a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4293      	cmp	r3, r2
 8004478:	d13f      	bne.n	80044fa <HCD_RXQLVL_IRQHandler+0x1b4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d03c      	beq.n	80044fa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004496:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800449e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	333c      	adds	r3, #60	@ 0x3c
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	f083 0301 	eor.w	r3, r3, #1
 80044c8:	b2d8      	uxtb	r0, r3
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	333c      	adds	r3, #60	@ 0x3c
 80044da:	4602      	mov	r2, r0
 80044dc:	701a      	strb	r2, [r3, #0]
      break;
 80044de:	e00c      	b.n	80044fa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	334c      	adds	r3, #76	@ 0x4c
 80044f0:	2204      	movs	r2, #4
 80044f2:	701a      	strb	r2, [r3, #0]
      break;
 80044f4:	e001      	b.n	80044fa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044fa:	bf00      	nop
  }
}
 80044fc:	bf00      	nop
 80044fe:	3728      	adds	r7, #40	@ 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004530:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	d10b      	bne.n	8004554 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d102      	bne.n	800454c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f005 ff4c 	bl	800a3e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f043 0302 	orr.w	r3, r3, #2
 8004552:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b08      	cmp	r3, #8
 800455c:	d132      	bne.n	80045c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d126      	bne.n	80045be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7a5b      	ldrb	r3, [r3, #9]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d113      	bne.n	80045a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800457e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004582:	d106      	bne.n	8004592 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f002 ff6e 	bl	800746c <USB_InitFSLSPClkSel>
 8004590:	e011      	b.n	80045b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f002 ff67 	bl	800746c <USB_InitFSLSPClkSel>
 800459e:	e00a      	b.n	80045b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	79db      	ldrb	r3, [r3, #7]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ae:	461a      	mov	r2, r3
 80045b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80045b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f005 ff3e 	bl	800a438 <HAL_HCD_PortEnabled_Callback>
 80045bc:	e002      	b.n	80045c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f005 ff48 	bl	800a454 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d103      	bne.n	80045d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0320 	orr.w	r3, r3, #32
 80045d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6013      	str	r3, [r2, #0]
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e12b      	b.n	8004856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fd f8f2 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	@ 0x24
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800463e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800464e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004650:	f002 fa2e 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8004654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4a81      	ldr	r2, [pc, #516]	@ (8004860 <HAL_I2C_Init+0x274>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d807      	bhi.n	8004670 <HAL_I2C_Init+0x84>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a80      	ldr	r2, [pc, #512]	@ (8004864 <HAL_I2C_Init+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	bf94      	ite	ls
 8004668:	2301      	movls	r3, #1
 800466a:	2300      	movhi	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e006      	b.n	800467e <HAL_I2C_Init+0x92>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a7d      	ldr	r2, [pc, #500]	@ (8004868 <HAL_I2C_Init+0x27c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	bf94      	ite	ls
 8004678:	2301      	movls	r3, #1
 800467a:	2300      	movhi	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0e7      	b.n	8004856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a78      	ldr	r2, [pc, #480]	@ (800486c <HAL_I2C_Init+0x280>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	0c9b      	lsrs	r3, r3, #18
 8004690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4a6a      	ldr	r2, [pc, #424]	@ (8004860 <HAL_I2C_Init+0x274>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d802      	bhi.n	80046c0 <HAL_I2C_Init+0xd4>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3301      	adds	r3, #1
 80046be:	e009      	b.n	80046d4 <HAL_I2C_Init+0xe8>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	4a69      	ldr	r2, [pc, #420]	@ (8004870 <HAL_I2C_Init+0x284>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	099b      	lsrs	r3, r3, #6
 80046d2:	3301      	adds	r3, #1
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	495c      	ldr	r1, [pc, #368]	@ (8004860 <HAL_I2C_Init+0x274>)
 80046f0:	428b      	cmp	r3, r1
 80046f2:	d819      	bhi.n	8004728 <HAL_I2C_Init+0x13c>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e59      	subs	r1, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004702:	1c59      	adds	r1, r3, #1
 8004704:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004708:	400b      	ands	r3, r1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_I2C_Init+0x138>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1e59      	subs	r1, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fbb1 f3f3 	udiv	r3, r1, r3
 800471c:	3301      	adds	r3, #1
 800471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004722:	e051      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 8004724:	2304      	movs	r3, #4
 8004726:	e04f      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <HAL_I2C_Init+0x168>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e58      	subs	r0, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	440b      	add	r3, r1
 800473e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004742:	3301      	adds	r3, #1
 8004744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	e012      	b.n	800477a <HAL_I2C_Init+0x18e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e58      	subs	r0, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	0099      	lsls	r1, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	fbb0 f3f3 	udiv	r3, r0, r3
 800476a:	3301      	adds	r3, #1
 800476c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Init+0x196>
 800477e:	2301      	movs	r3, #1
 8004780:	e022      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10e      	bne.n	80047a8 <HAL_I2C_Init+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1e58      	subs	r0, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	fbb0 f3f3 	udiv	r3, r0, r3
 800479c:	3301      	adds	r3, #1
 800479e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a6:	e00f      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	6809      	ldr	r1, [r1, #0]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6911      	ldr	r1, [r2, #16]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	430b      	orrs	r3, r1
 800480a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	000186a0 	.word	0x000186a0
 8004864:	001e847f 	.word	0x001e847f
 8004868:	003d08ff 	.word	0x003d08ff
 800486c:	431bde83 	.word	0x431bde83
 8004870:	10624dd3 	.word	0x10624dd3

08004874 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	460b      	mov	r3, r1
 8004888:	813b      	strh	r3, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800488e:	f7fd fa81 	bl	8001d94 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b20      	cmp	r3, #32
 800489e:	f040 80d9 	bne.w	8004a54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	2319      	movs	r3, #25
 80048a8:	2201      	movs	r2, #1
 80048aa:	496d      	ldr	r1, [pc, #436]	@ (8004a60 <HAL_I2C_Mem_Write+0x1ec>)
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fdb9 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
 80048ba:	e0cc      	b.n	8004a56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_I2C_Mem_Write+0x56>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0c5      	b.n	8004a56 <HAL_I2C_Mem_Write+0x1e2>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d007      	beq.n	80048f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2221      	movs	r2, #33	@ 0x21
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2240      	movs	r2, #64	@ 0x40
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004920:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a4d      	ldr	r2, [pc, #308]	@ (8004a64 <HAL_I2C_Mem_Write+0x1f0>)
 8004930:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004932:	88f8      	ldrh	r0, [r7, #6]
 8004934:	893a      	ldrh	r2, [r7, #8]
 8004936:	8979      	ldrh	r1, [r7, #10]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	4603      	mov	r3, r0
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fbf0 	bl	8005128 <I2C_RequestMemoryWrite>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d052      	beq.n	80049f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e081      	b.n	8004a56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fe7e 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	2b04      	cmp	r3, #4
 8004968:	d107      	bne.n	800497a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004978:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e06b      	b.n	8004a56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d11b      	bne.n	80049f4 <HAL_I2C_Mem_Write+0x180>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1aa      	bne.n	8004952 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fe71 	bl	80056e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d107      	bne.n	8004a24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e016      	b.n	8004a56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	00100002 	.word	0x00100002
 8004a64:	ffff0000 	.word	0xffff0000

08004a68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	@ 0x30
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	813b      	strh	r3, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a82:	f7fd f987 	bl	8001d94 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	f040 8214 	bne.w	8004ebe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2319      	movs	r3, #25
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	497b      	ldr	r1, [pc, #492]	@ (8004c8c <HAL_I2C_Mem_Read+0x224>)
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fcbf 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
 8004aae:	e207      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_I2C_Mem_Read+0x56>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e200      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d007      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2222      	movs	r2, #34	@ 0x22
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2240      	movs	r2, #64	@ 0x40
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a5b      	ldr	r2, [pc, #364]	@ (8004c90 <HAL_I2C_Mem_Read+0x228>)
 8004b24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b26:	88f8      	ldrh	r0, [r7, #6]
 8004b28:	893a      	ldrh	r2, [r7, #8]
 8004b2a:	8979      	ldrh	r1, [r7, #10]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	4603      	mov	r3, r0
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fb8c 	bl	8005254 <I2C_RequestMemoryRead>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e1bc      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e190      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e170      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	e150      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c0c:	e144      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	f200 80f1 	bhi.w	8004dfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d123      	bne.n	8004c68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fda7 	bl	8005778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e145      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c66:	e117      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d14e      	bne.n	8004d0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	2200      	movs	r2, #0
 8004c78:	4906      	ldr	r1, [pc, #24]	@ (8004c94 <HAL_I2C_Mem_Read+0x22c>)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fbd2 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e11a      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
 8004c8a:	bf00      	nop
 8004c8c:	00100002 	.word	0x00100002
 8004c90:	ffff0000 	.word	0xffff0000
 8004c94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d0c:	e0c4      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	2200      	movs	r2, #0
 8004d16:	496c      	ldr	r1, [pc, #432]	@ (8004ec8 <HAL_I2C_Mem_Read+0x460>)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb83 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0cb      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	2200      	movs	r2, #0
 8004d72:	4955      	ldr	r1, [pc, #340]	@ (8004ec8 <HAL_I2C_Mem_Read+0x460>)
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fb55 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e09d      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004df8:	e04e      	b.n	8004e98 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fcba 	bl	8005778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e058      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d124      	bne.n	8004e98 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d107      	bne.n	8004e66 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f aeb6 	bne.w	8004c0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e000      	b.n	8004ec0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
  }
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3728      	adds	r7, #40	@ 0x28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	00010004 	.word	0x00010004

08004ecc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004edc:	f7fc ff5a 	bl	8001d94 <HAL_GetTick>
 8004ee0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	f040 8111 	bne.w	8005116 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2319      	movs	r3, #25
 8004efa:	2201      	movs	r2, #1
 8004efc:	4988      	ldr	r1, [pc, #544]	@ (8005120 <HAL_I2C_IsDeviceReady+0x254>)
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fa90 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e104      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2C_IsDeviceReady+0x50>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e0fd      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d007      	beq.n	8004f42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2224      	movs	r2, #36	@ 0x24
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a70      	ldr	r2, [pc, #448]	@ (8005124 <HAL_I2C_IsDeviceReady+0x258>)
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fa4e 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f9c:	d103      	bne.n	8004fa6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0b6      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004fba:	f7fc feeb 	bl	8001d94 <HAL_GetTick>
 8004fbe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fee:	e025      	b.n	800503c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ff0:	f7fc fed0 	bl	8001d94 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <HAL_I2C_IsDeviceReady+0x13a>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	22a0      	movs	r2, #160	@ 0xa0
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b02      	cmp	r3, #2
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2ba0      	cmp	r3, #160	@ 0xa0
 8005046:	d005      	beq.n	8005054 <HAL_I2C_IsDeviceReady+0x188>
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_I2C_IsDeviceReady+0x188>
 800504e:	7dbb      	ldrb	r3, [r7, #22]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0cd      	beq.n	8004ff0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d129      	bne.n	80050be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005078:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2319      	movs	r3, #25
 8005096:	2201      	movs	r2, #1
 8005098:	4921      	ldr	r1, [pc, #132]	@ (8005120 <HAL_I2C_IsDeviceReady+0x254>)
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f9c2 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e036      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e02c      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	2319      	movs	r3, #25
 80050de:	2201      	movs	r2, #1
 80050e0:	490f      	ldr	r1, [pc, #60]	@ (8005120 <HAL_I2C_IsDeviceReady+0x254>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f99e 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e012      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	f4ff af32 	bcc.w	8004f66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	00100002 	.word	0x00100002
 8005124:	ffff0000 	.word	0xffff0000

08005128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	4608      	mov	r0, r1
 8005132:	4611      	mov	r1, r2
 8005134:	461a      	mov	r2, r3
 8005136:	4603      	mov	r3, r0
 8005138:	817b      	strh	r3, [r7, #10]
 800513a:	460b      	mov	r3, r1
 800513c:	813b      	strh	r3, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2200      	movs	r2, #0
 800515a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f960 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005178:	d103      	bne.n	8005182 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e05f      	b.n	8005246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005194:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	492d      	ldr	r1, [pc, #180]	@ (8005250 <I2C_RequestMemoryWrite+0x128>)
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f9bb 	bl	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e04c      	b.n	8005246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c4:	6a39      	ldr	r1, [r7, #32]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fa46 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d107      	bne.n	80051ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e02b      	b.n	8005246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f4:	893b      	ldrh	r3, [r7, #8]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	611a      	str	r2, [r3, #16]
 80051fe:	e021      	b.n	8005244 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	b29b      	uxth	r3, r3
 8005206:	b2da      	uxtb	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005210:	6a39      	ldr	r1, [r7, #32]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fa20 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2b04      	cmp	r3, #4
 8005224:	d107      	bne.n	8005236 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005234:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e005      	b.n	8005246 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523a:	893b      	ldrh	r3, [r7, #8]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	00010002 	.word	0x00010002

08005254 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800527c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800528c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	2200      	movs	r2, #0
 8005296:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f8c2 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00d      	beq.n	80052c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b4:	d103      	bne.n	80052be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0aa      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	4952      	ldr	r1, [pc, #328]	@ (8005420 <I2C_RequestMemoryRead+0x1cc>)
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f91d 	bl	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e097      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005300:	6a39      	ldr	r1, [r7, #32]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f9a8 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	2b04      	cmp	r3, #4
 8005314:	d107      	bne.n	8005326 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e076      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d105      	bne.n	800533c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005330:	893b      	ldrh	r3, [r7, #8]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	611a      	str	r2, [r3, #16]
 800533a:	e021      	b.n	8005380 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800533c:	893b      	ldrh	r3, [r7, #8]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	b29b      	uxth	r3, r3
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534c:	6a39      	ldr	r1, [r7, #32]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f982 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	2b04      	cmp	r3, #4
 8005360:	d107      	bne.n	8005372 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e050      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005376:	893b      	ldrh	r3, [r7, #8]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005382:	6a39      	ldr	r1, [r7, #32]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f967 	bl	8005658 <I2C_WaitOnTXEFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00d      	beq.n	80053ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	2b04      	cmp	r3, #4
 8005396:	d107      	bne.n	80053a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e035      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f82b 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e2:	d103      	bne.n	80053ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e013      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053f0:	897b      	ldrh	r3, [r7, #10]
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	6a3a      	ldr	r2, [r7, #32]
 8005404:	4906      	ldr	r1, [pc, #24]	@ (8005420 <I2C_RequestMemoryRead+0x1cc>)
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f886 	bl	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	00010002 	.word	0x00010002

08005424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005434:	e048      	b.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800543c:	d044      	beq.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fc fca9 	bl	8001d94 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d139      	bne.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10d      	bne.n	800547a <I2C_WaitOnFlagUntilTimeout+0x56>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	43da      	mvns	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	e00c      	b.n	8005494 <I2C_WaitOnFlagUntilTimeout+0x70>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	43da      	mvns	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	429a      	cmp	r2, r3
 8005498:	d116      	bne.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e023      	b.n	8005510 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d10d      	bne.n	80054ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	43da      	mvns	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	e00c      	b.n	8005508 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	43da      	mvns	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4013      	ands	r3, r2
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	429a      	cmp	r2, r3
 800550c:	d093      	beq.n	8005436 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005526:	e071      	b.n	800560c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005536:	d123      	bne.n	8005580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005546:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	f043 0204 	orr.w	r2, r3, #4
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e067      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005586:	d041      	beq.n	800560c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005588:	f7fc fc04 	bl	8001d94 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d136      	bne.n	800560c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10c      	bne.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf14      	ite	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	2300      	moveq	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	e00b      	b.n	80055da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	43da      	mvns	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4013      	ands	r3, r2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e021      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10c      	bne.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	43da      	mvns	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e00b      	b.n	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	43da      	mvns	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf14      	ite	ne
 8005642:	2301      	movne	r3, #1
 8005644:	2300      	moveq	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	f47f af6d 	bne.w	8005528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005664:	e034      	b.n	80056d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8e3 	bl	8005832 <I2C_IsAcknowledgeFailed>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e034      	b.n	80056e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800567c:	d028      	beq.n	80056d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fc fb89 	bl	8001d94 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11d      	bne.n	80056d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569e:	2b80      	cmp	r3, #128	@ 0x80
 80056a0:	d016      	beq.n	80056d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e007      	b.n	80056e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056da:	2b80      	cmp	r3, #128	@ 0x80
 80056dc:	d1c3      	bne.n	8005666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f4:	e034      	b.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f89b 	bl	8005832 <I2C_IsAcknowledgeFailed>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e034      	b.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800570c:	d028      	beq.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570e:	f7fc fb41 	bl	8001d94 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11d      	bne.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d016      	beq.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e007      	b.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d1c3      	bne.n	80056f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005784:	e049      	b.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b10      	cmp	r3, #16
 8005792:	d119      	bne.n	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0210 	mvn.w	r2, #16
 800579c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e030      	b.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fc fae4 	bl	8001d94 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d11d      	bne.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d016      	beq.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e007      	b.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b40      	cmp	r3, #64	@ 0x40
 8005826:	d1ae      	bne.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005848:	d11b      	bne.n	8005882 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005852:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f043 0204 	orr.w	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e128      	b.n	8005af4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a90      	ldr	r2, [pc, #576]	@ (8005afc <HAL_I2S_Init+0x26c>)
 80058ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fc f81b 	bl	80018f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80058d8:	f023 030f 	bic.w	r3, r3, #15
 80058dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2202      	movs	r2, #2
 80058e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d060      	beq.n	80059b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80058f6:	2310      	movs	r3, #16
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	e001      	b.n	8005900 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058fc:	2320      	movs	r3, #32
 80058fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b20      	cmp	r3, #32
 8005906:	d802      	bhi.n	800590e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800590e:	2001      	movs	r0, #1
 8005910:	f001 f9c4 	bl	8006c9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005914:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800591e:	d125      	bne.n	800596c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d010      	beq.n	800594a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	3305      	adds	r3, #5
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	e01f      	b.n	800598a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	fbb2 f2f3 	udiv	r2, r2, r3
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	3305      	adds	r3, #5
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	e00e      	b.n	800598a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	fbb2 f2f3 	udiv	r2, r2, r3
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	461a      	mov	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	3305      	adds	r3, #5
 8005988:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4a5c      	ldr	r2, [pc, #368]	@ (8005b00 <HAL_I2S_Init+0x270>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	08db      	lsrs	r3, r3, #3
 8005994:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	e003      	b.n	80059b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059b0:	2302      	movs	r3, #2
 80059b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d902      	bls.n	80059c4 <HAL_I2S_Init+0x134>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	2bff      	cmp	r3, #255	@ 0xff
 80059c2:	d907      	bls.n	80059d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	f043 0210 	orr.w	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e08f      	b.n	8005af4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	ea42 0103 	orr.w	r1, r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80059f2:	f023 030f 	bic.w	r3, r3, #15
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6851      	ldr	r1, [r2, #4]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	4311      	orrs	r1, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68d2      	ldr	r2, [r2, #12]
 8005a04:	4311      	orrs	r1, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6992      	ldr	r2, [r2, #24]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d161      	bne.n	8005ae4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a38      	ldr	r2, [pc, #224]	@ (8005b04 <HAL_I2S_Init+0x274>)
 8005a24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a37      	ldr	r2, [pc, #220]	@ (8005b08 <HAL_I2S_Init+0x278>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d101      	bne.n	8005a34 <HAL_I2S_Init+0x1a4>
 8005a30:	4b36      	ldr	r3, [pc, #216]	@ (8005b0c <HAL_I2S_Init+0x27c>)
 8005a32:	e001      	b.n	8005a38 <HAL_I2S_Init+0x1a8>
 8005a34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	4932      	ldr	r1, [pc, #200]	@ (8005b08 <HAL_I2S_Init+0x278>)
 8005a40:	428a      	cmp	r2, r1
 8005a42:	d101      	bne.n	8005a48 <HAL_I2S_Init+0x1b8>
 8005a44:	4a31      	ldr	r2, [pc, #196]	@ (8005b0c <HAL_I2S_Init+0x27c>)
 8005a46:	e001      	b.n	8005a4c <HAL_I2S_Init+0x1bc>
 8005a48:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005a4c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a50:	f023 030f 	bic.w	r3, r3, #15
 8005a54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b08 <HAL_I2S_Init+0x278>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d101      	bne.n	8005a64 <HAL_I2S_Init+0x1d4>
 8005a60:	4b2a      	ldr	r3, [pc, #168]	@ (8005b0c <HAL_I2S_Init+0x27c>)
 8005a62:	e001      	b.n	8005a68 <HAL_I2S_Init+0x1d8>
 8005a64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a68:	2202      	movs	r2, #2
 8005a6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a25      	ldr	r2, [pc, #148]	@ (8005b08 <HAL_I2S_Init+0x278>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d101      	bne.n	8005a7a <HAL_I2S_Init+0x1ea>
 8005a76:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <HAL_I2S_Init+0x27c>)
 8005a78:	e001      	b.n	8005a7e <HAL_I2S_Init+0x1ee>
 8005a7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8a:	d003      	beq.n	8005a94 <HAL_I2S_Init+0x204>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e001      	b.n	8005aa0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	897b      	ldrh	r3, [r7, #10]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005acc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8005b08 <HAL_I2S_Init+0x278>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <HAL_I2S_Init+0x24c>
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <HAL_I2S_Init+0x27c>)
 8005ada:	e001      	b.n	8005ae0 <HAL_I2S_Init+0x250>
 8005adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ae0:	897a      	ldrh	r2, [r7, #10]
 8005ae2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	08005c07 	.word	0x08005c07
 8005b00:	cccccccd 	.word	0xcccccccd
 8005b04:	08005d1d 	.word	0x08005d1d
 8005b08:	40003800 	.word	0x40003800
 8005b0c:	40003400 	.word	0x40003400

08005b10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	881a      	ldrh	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	1c9a      	adds	r2, r3, #2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10e      	bne.n	8005ba0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ffb8 	bl	8005b10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc2:	1c9a      	adds	r2, r3, #2
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10e      	bne.n	8005bfe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff93 	bl	8005b24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b086      	sub	sp, #24
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d13a      	bne.n	8005c98 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d109      	bne.n	8005c40 <I2S_IRQHandler+0x3a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d102      	bne.n	8005c40 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff ffb4 	bl	8005ba8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b40      	cmp	r3, #64	@ 0x40
 8005c48:	d126      	bne.n	8005c98 <I2S_IRQHandler+0x92>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d11f      	bne.n	8005c98 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff50 	bl	8005b38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d136      	bne.n	8005d12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d109      	bne.n	8005cc2 <I2S_IRQHandler+0xbc>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb8:	2b80      	cmp	r3, #128	@ 0x80
 8005cba:	d102      	bne.n	8005cc2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff45 	bl	8005b4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d122      	bne.n	8005d12 <I2S_IRQHandler+0x10c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d11b      	bne.n	8005d12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ce8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d04:	f043 0204 	orr.w	r2, r3, #4
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff13 	bl	8005b38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a92      	ldr	r2, [pc, #584]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d36:	4b92      	ldr	r3, [pc, #584]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d38:	e001      	b.n	8005d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a8b      	ldr	r2, [pc, #556]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d54:	4b8a      	ldr	r3, [pc, #552]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d56:	e001      	b.n	8005d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d68:	d004      	beq.n	8005d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 8099 	bne.w	8005ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d107      	bne.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f925 	bl	8005fd8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9c8 	bl	8006138 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dae:	2b40      	cmp	r3, #64	@ 0x40
 8005db0:	d13a      	bne.n	8005e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d035      	beq.n	8005e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dc8:	e001      	b.n	8005dce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005dca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4969      	ldr	r1, [pc, #420]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dd6:	428b      	cmp	r3, r1
 8005dd8:	d101      	bne.n	8005dde <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005dda:	4b69      	ldr	r3, [pc, #420]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ddc:	e001      	b.n	8005de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005dde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005de2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005de6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005df6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	f043 0202 	orr.w	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fe88 	bl	8005b38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	f040 80c3 	bne.w	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80bd 	beq.w	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a49      	ldr	r2, [pc, #292]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d101      	bne.n	8005e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e5a:	4b49      	ldr	r3, [pc, #292]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e5c:	e001      	b.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4944      	ldr	r1, [pc, #272]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e6a:	428b      	cmp	r3, r1
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e6e:	4b44      	ldr	r3, [pc, #272]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e70:	e001      	b.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e7a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fe4a 	bl	8005b38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ea4:	e089      	b.n	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d107      	bne.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8be 	bl	800603c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d107      	bne.n	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f8fd 	bl	80060d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee0:	2b40      	cmp	r3, #64	@ 0x40
 8005ee2:	d12f      	bne.n	8005f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d02a      	beq.n	8005f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005efc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f08:	4b1d      	ldr	r3, [pc, #116]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f0a:	e001      	b.n	8005f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4919      	ldr	r1, [pc, #100]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	d101      	bne.n	8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f1c:	4b18      	ldr	r3, [pc, #96]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f1e:	e001      	b.n	8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f36:	f043 0202 	orr.w	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fdfa 	bl	8005b38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d136      	bne.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d031      	beq.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a07      	ldr	r2, [pc, #28]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d101      	bne.n	8005f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f62:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f64:	e001      	b.n	8005f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4902      	ldr	r1, [pc, #8]	@ (8005f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f72:	428b      	cmp	r3, r1
 8005f74:	d106      	bne.n	8005f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f76:	4b02      	ldr	r3, [pc, #8]	@ (8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f78:	e006      	b.n	8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f7a:	bf00      	nop
 8005f7c:	40003800 	.word	0x40003800
 8005f80:	40003400 	.word	0x40003400
 8005f84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f8c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fdc0 	bl	8005b38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fb8:	e000      	b.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fba:	bf00      	nop
}
 8005fbc:	bf00      	nop
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	1c99      	adds	r1, r3, #2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6251      	str	r1, [r2, #36]	@ 0x24
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d113      	bne.n	8006032 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006018:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ffc9 	bl	8005fc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	1c99      	adds	r1, r3, #2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6251      	str	r1, [r2, #36]	@ 0x24
 800604e:	8819      	ldrh	r1, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1d      	ldr	r2, [pc, #116]	@ (80060cc <I2SEx_TxISR_I2SExt+0x90>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <I2SEx_TxISR_I2SExt+0x22>
 800605a:	4b1d      	ldr	r3, [pc, #116]	@ (80060d0 <I2SEx_TxISR_I2SExt+0x94>)
 800605c:	e001      	b.n	8006062 <I2SEx_TxISR_I2SExt+0x26>
 800605e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006062:	460a      	mov	r2, r1
 8006064:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d121      	bne.n	80060c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a12      	ldr	r2, [pc, #72]	@ (80060cc <I2SEx_TxISR_I2SExt+0x90>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <I2SEx_TxISR_I2SExt+0x50>
 8006088:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <I2SEx_TxISR_I2SExt+0x94>)
 800608a:	e001      	b.n	8006090 <I2SEx_TxISR_I2SExt+0x54>
 800608c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	490d      	ldr	r1, [pc, #52]	@ (80060cc <I2SEx_TxISR_I2SExt+0x90>)
 8006098:	428b      	cmp	r3, r1
 800609a:	d101      	bne.n	80060a0 <I2SEx_TxISR_I2SExt+0x64>
 800609c:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <I2SEx_TxISR_I2SExt+0x94>)
 800609e:	e001      	b.n	80060a4 <I2SEx_TxISR_I2SExt+0x68>
 80060a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff81 	bl	8005fc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40003800 	.word	0x40003800
 80060d0:	40003400 	.word	0x40003400

080060d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68d8      	ldr	r0, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	1c99      	adds	r1, r3, #2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80060ec:	b282      	uxth	r2, r0
 80060ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d113      	bne.n	8006130 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006116:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff ff4a 	bl	8005fc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <I2SEx_RxISR_I2SExt+0x16>
 800614a:	4b20      	ldr	r3, [pc, #128]	@ (80061cc <I2SEx_RxISR_I2SExt+0x94>)
 800614c:	e001      	b.n	8006152 <I2SEx_RxISR_I2SExt+0x1a>
 800614e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006152:	68d8      	ldr	r0, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	1c99      	adds	r1, r3, #2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800615e:	b282      	uxth	r2, r0
 8006160:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d121      	bne.n	80061be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a12      	ldr	r2, [pc, #72]	@ (80061c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d101      	bne.n	8006188 <I2SEx_RxISR_I2SExt+0x50>
 8006184:	4b11      	ldr	r3, [pc, #68]	@ (80061cc <I2SEx_RxISR_I2SExt+0x94>)
 8006186:	e001      	b.n	800618c <I2SEx_RxISR_I2SExt+0x54>
 8006188:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	490d      	ldr	r1, [pc, #52]	@ (80061c8 <I2SEx_RxISR_I2SExt+0x90>)
 8006194:	428b      	cmp	r3, r1
 8006196:	d101      	bne.n	800619c <I2SEx_RxISR_I2SExt+0x64>
 8006198:	4b0c      	ldr	r3, [pc, #48]	@ (80061cc <I2SEx_RxISR_I2SExt+0x94>)
 800619a:	e001      	b.n	80061a0 <I2SEx_RxISR_I2SExt+0x68>
 800619c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff ff03 	bl	8005fc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40003800 	.word	0x40003800
 80061cc:	40003400 	.word	0x40003400

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e267      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d075      	beq.n	80062da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061ee:	4b88      	ldr	r3, [pc, #544]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d00c      	beq.n	8006214 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fa:	4b85      	ldr	r3, [pc, #532]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006202:	2b08      	cmp	r3, #8
 8006204:	d112      	bne.n	800622c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006206:	4b82      	ldr	r3, [pc, #520]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006212:	d10b      	bne.n	800622c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006214:	4b7e      	ldr	r3, [pc, #504]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05b      	beq.n	80062d8 <HAL_RCC_OscConfig+0x108>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d157      	bne.n	80062d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e242      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006234:	d106      	bne.n	8006244 <HAL_RCC_OscConfig+0x74>
 8006236:	4b76      	ldr	r3, [pc, #472]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a75      	ldr	r2, [pc, #468]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e01d      	b.n	8006280 <HAL_RCC_OscConfig+0xb0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x98>
 800624e:	4b70      	ldr	r3, [pc, #448]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6f      	ldr	r2, [pc, #444]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4b6d      	ldr	r3, [pc, #436]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a6c      	ldr	r2, [pc, #432]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e00b      	b.n	8006280 <HAL_RCC_OscConfig+0xb0>
 8006268:	4b69      	ldr	r3, [pc, #420]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a68      	ldr	r2, [pc, #416]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800626e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4b66      	ldr	r3, [pc, #408]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a65      	ldr	r2, [pc, #404]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800627a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800627e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d013      	beq.n	80062b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fb fd84 	bl	8001d94 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006290:	f7fb fd80 	bl	8001d94 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	@ 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e207      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0xc0>
 80062ae:	e014      	b.n	80062da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b0:	f7fb fd70 	bl	8001d94 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b8:	f7fb fd6c 	bl	8001d94 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b64      	cmp	r3, #100	@ 0x64
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e1f3      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ca:	4b51      	ldr	r3, [pc, #324]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0xe8>
 80062d6:	e000      	b.n	80062da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d063      	beq.n	80063ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f2:	4b47      	ldr	r3, [pc, #284]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d11c      	bne.n	8006338 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062fe:	4b44      	ldr	r3, [pc, #272]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d116      	bne.n	8006338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630a:	4b41      	ldr	r3, [pc, #260]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_RCC_OscConfig+0x152>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d001      	beq.n	8006322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e1c7      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006322:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4937      	ldr	r1, [pc, #220]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006332:	4313      	orrs	r3, r2
 8006334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006336:	e03a      	b.n	80063ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006340:	4b34      	ldr	r3, [pc, #208]	@ (8006414 <HAL_RCC_OscConfig+0x244>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006346:	f7fb fd25 	bl	8001d94 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800634e:	f7fb fd21 	bl	8001d94 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e1a8      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006360:	4b2b      	ldr	r3, [pc, #172]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636c:	4b28      	ldr	r3, [pc, #160]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4925      	ldr	r1, [pc, #148]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]
 8006380:	e015      	b.n	80063ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006382:	4b24      	ldr	r3, [pc, #144]	@ (8006414 <HAL_RCC_OscConfig+0x244>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fb fd04 	bl	8001d94 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006390:	f7fb fd00 	bl	8001d94 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e187      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d036      	beq.n	8006428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d016      	beq.n	80063f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c2:	4b15      	ldr	r3, [pc, #84]	@ (8006418 <HAL_RCC_OscConfig+0x248>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c8:	f7fb fce4 	bl	8001d94 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d0:	f7fb fce0 	bl	8001d94 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e167      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <HAL_RCC_OscConfig+0x240>)
 80063e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0x200>
 80063ee:	e01b      	b.n	8006428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <HAL_RCC_OscConfig+0x248>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f6:	f7fb fccd 	bl	8001d94 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063fc:	e00e      	b.n	800641c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063fe:	f7fb fcc9 	bl	8001d94 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d907      	bls.n	800641c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e150      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
 8006410:	40023800 	.word	0x40023800
 8006414:	42470000 	.word	0x42470000
 8006418:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800641c:	4b88      	ldr	r3, [pc, #544]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 800641e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ea      	bne.n	80063fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8097 	beq.w	8006564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643a:	4b81      	ldr	r3, [pc, #516]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	4b7d      	ldr	r3, [pc, #500]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	4a7c      	ldr	r2, [pc, #496]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 8006450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006454:	6413      	str	r3, [r2, #64]	@ 0x40
 8006456:	4b7a      	ldr	r3, [pc, #488]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006466:	4b77      	ldr	r3, [pc, #476]	@ (8006644 <HAL_RCC_OscConfig+0x474>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d118      	bne.n	80064a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006472:	4b74      	ldr	r3, [pc, #464]	@ (8006644 <HAL_RCC_OscConfig+0x474>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a73      	ldr	r2, [pc, #460]	@ (8006644 <HAL_RCC_OscConfig+0x474>)
 8006478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800647c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800647e:	f7fb fc89 	bl	8001d94 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006486:	f7fb fc85 	bl	8001d94 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e10c      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006498:	4b6a      	ldr	r3, [pc, #424]	@ (8006644 <HAL_RCC_OscConfig+0x474>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d106      	bne.n	80064ba <HAL_RCC_OscConfig+0x2ea>
 80064ac:	4b64      	ldr	r3, [pc, #400]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b0:	4a63      	ldr	r2, [pc, #396]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b8:	e01c      	b.n	80064f4 <HAL_RCC_OscConfig+0x324>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b05      	cmp	r3, #5
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0x30c>
 80064c2:	4b5f      	ldr	r3, [pc, #380]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c6:	4a5e      	ldr	r2, [pc, #376]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064c8:	f043 0304 	orr.w	r3, r3, #4
 80064cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d2:	4a5b      	ldr	r2, [pc, #364]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0x324>
 80064dc:	4b58      	ldr	r3, [pc, #352]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e0:	4a57      	ldr	r2, [pc, #348]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e8:	4b55      	ldr	r3, [pc, #340]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ec:	4a54      	ldr	r2, [pc, #336]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80064ee:	f023 0304 	bic.w	r3, r3, #4
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d015      	beq.n	8006528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fc:	f7fb fc4a 	bl	8001d94 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006502:	e00a      	b.n	800651a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006504:	f7fb fc46 	bl	8001d94 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006512:	4293      	cmp	r3, r2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e0cb      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651a:	4b49      	ldr	r3, [pc, #292]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0ee      	beq.n	8006504 <HAL_RCC_OscConfig+0x334>
 8006526:	e014      	b.n	8006552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006528:	f7fb fc34 	bl	8001d94 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652e:	e00a      	b.n	8006546 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006530:	f7fb fc30 	bl	8001d94 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e0b5      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006546:	4b3e      	ldr	r3, [pc, #248]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1ee      	bne.n	8006530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d105      	bne.n	8006564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006558:	4b39      	ldr	r3, [pc, #228]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 800655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655c:	4a38      	ldr	r2, [pc, #224]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 800655e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006562:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a1 	beq.w	80066b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800656e:	4b34      	ldr	r3, [pc, #208]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
 8006576:	2b08      	cmp	r3, #8
 8006578:	d05c      	beq.n	8006634 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d141      	bne.n	8006606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006582:	4b31      	ldr	r3, [pc, #196]	@ (8006648 <HAL_RCC_OscConfig+0x478>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006588:	f7fb fc04 	bl	8001d94 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006590:	f7fb fc00 	bl	8001d94 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e087      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a2:	4b27      	ldr	r3, [pc, #156]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	019b      	lsls	r3, r3, #6
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	3b01      	subs	r3, #1
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	491b      	ldr	r1, [pc, #108]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x478>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065de:	f7fb fbd9 	bl	8001d94 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e6:	f7fb fbd5 	bl	8001d94 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e05c      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f8:	4b11      	ldr	r3, [pc, #68]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x416>
 8006604:	e054      	b.n	80066b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b10      	ldr	r3, [pc, #64]	@ (8006648 <HAL_RCC_OscConfig+0x478>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660c:	f7fb fbc2 	bl	8001d94 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fb fbbe 	bl	8001d94 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e045      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <HAL_RCC_OscConfig+0x470>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x444>
 8006632:	e03d      	b.n	80066b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d107      	bne.n	800664c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e038      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
 8006640:	40023800 	.word	0x40023800
 8006644:	40007000 	.word	0x40007000
 8006648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800664c:	4b1b      	ldr	r3, [pc, #108]	@ (80066bc <HAL_RCC_OscConfig+0x4ec>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d028      	beq.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d121      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d11a      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800667c:	4013      	ands	r3, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006684:	4293      	cmp	r3, r2
 8006686:	d111      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	3b01      	subs	r3, #1
 8006696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d107      	bne.n	80066ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40023800 	.word	0x40023800

080066c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0cc      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d4:	4b68      	ldr	r3, [pc, #416]	@ (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d90c      	bls.n	80066fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b65      	ldr	r3, [pc, #404]	@ (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ea:	4b63      	ldr	r3, [pc, #396]	@ (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0b8      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d020      	beq.n	800674a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006714:	4b59      	ldr	r3, [pc, #356]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4a58      	ldr	r2, [pc, #352]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800671e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800672c:	4b53      	ldr	r3, [pc, #332]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4a52      	ldr	r2, [pc, #328]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006738:	4b50      	ldr	r3, [pc, #320]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	494d      	ldr	r1, [pc, #308]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	4313      	orrs	r3, r2
 8006748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d044      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675e:	4b47      	ldr	r3, [pc, #284]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d119      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07f      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d003      	beq.n	800677e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677a:	2b03      	cmp	r3, #3
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	4b3f      	ldr	r3, [pc, #252]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e06f      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678e:	4b3b      	ldr	r3, [pc, #236]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e067      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679e:	4b37      	ldr	r3, [pc, #220]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 0203 	bic.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4934      	ldr	r1, [pc, #208]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b0:	f7fb faf0 	bl	8001d94 <HAL_GetTick>
 80067b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fb faec 	bl	8001d94 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e04f      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	4b2b      	ldr	r3, [pc, #172]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 020c 	and.w	r2, r3, #12
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	429a      	cmp	r2, r3
 80067de:	d1eb      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e0:	4b25      	ldr	r3, [pc, #148]	@ (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d20c      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b22      	ldr	r3, [pc, #136]	@ (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b20      	ldr	r3, [pc, #128]	@ (8006878 <HAL_RCC_ClockConfig+0x1b8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e032      	b.n	800686e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006814:	4b19      	ldr	r3, [pc, #100]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4916      	ldr	r1, [pc, #88]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006832:	4b12      	ldr	r3, [pc, #72]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	490e      	ldr	r1, [pc, #56]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006846:	f000 f821 	bl	800688c <HAL_RCC_GetSysClockFreq>
 800684a:	4602      	mov	r2, r0
 800684c:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	091b      	lsrs	r3, r3, #4
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	490a      	ldr	r1, [pc, #40]	@ (8006880 <HAL_RCC_ClockConfig+0x1c0>)
 8006858:	5ccb      	ldrb	r3, [r1, r3]
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	4a09      	ldr	r2, [pc, #36]	@ (8006884 <HAL_RCC_ClockConfig+0x1c4>)
 8006860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006862:	4b09      	ldr	r3, [pc, #36]	@ (8006888 <HAL_RCC_ClockConfig+0x1c8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7fb fa50 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40023c00 	.word	0x40023c00
 800687c:	40023800 	.word	0x40023800
 8006880:	0800f214 	.word	0x0800f214
 8006884:	20000000 	.word	0x20000000
 8006888:	20000004 	.word	0x20000004

0800688c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800688c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006890:	b094      	sub	sp, #80	@ 0x50
 8006892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a4:	4b79      	ldr	r3, [pc, #484]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 030c 	and.w	r3, r3, #12
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d00d      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0x40>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	f200 80e1 	bhi.w	8006a78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d003      	beq.n	80068c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068be:	e0db      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c0:	4b73      	ldr	r3, [pc, #460]	@ (8006a90 <HAL_RCC_GetSysClockFreq+0x204>)
 80068c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068c4:	e0db      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068c6:	4b73      	ldr	r3, [pc, #460]	@ (8006a94 <HAL_RCC_GetSysClockFreq+0x208>)
 80068c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ca:	e0d8      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068cc:	4b6f      	ldr	r3, [pc, #444]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068d6:	4b6d      	ldr	r3, [pc, #436]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d063      	beq.n	80069aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	2200      	movs	r2, #0
 80068ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80068ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068fe:	4622      	mov	r2, r4
 8006900:	462b      	mov	r3, r5
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	0159      	lsls	r1, r3, #5
 800690c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006910:	0150      	lsls	r0, r2, #5
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4621      	mov	r1, r4
 8006918:	1a51      	subs	r1, r2, r1
 800691a:	6139      	str	r1, [r7, #16]
 800691c:	4629      	mov	r1, r5
 800691e:	eb63 0301 	sbc.w	r3, r3, r1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006930:	4659      	mov	r1, fp
 8006932:	018b      	lsls	r3, r1, #6
 8006934:	4651      	mov	r1, sl
 8006936:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800693a:	4651      	mov	r1, sl
 800693c:	018a      	lsls	r2, r1, #6
 800693e:	4651      	mov	r1, sl
 8006940:	ebb2 0801 	subs.w	r8, r2, r1
 8006944:	4659      	mov	r1, fp
 8006946:	eb63 0901 	sbc.w	r9, r3, r1
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800695a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800695e:	4690      	mov	r8, r2
 8006960:	4699      	mov	r9, r3
 8006962:	4623      	mov	r3, r4
 8006964:	eb18 0303 	adds.w	r3, r8, r3
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	462b      	mov	r3, r5
 800696c:	eb49 0303 	adc.w	r3, r9, r3
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800697e:	4629      	mov	r1, r5
 8006980:	024b      	lsls	r3, r1, #9
 8006982:	4621      	mov	r1, r4
 8006984:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006988:	4621      	mov	r1, r4
 800698a:	024a      	lsls	r2, r1, #9
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006992:	2200      	movs	r2, #0
 8006994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800699c:	f7fa f974 	bl	8000c88 <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4613      	mov	r3, r2
 80069a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069a8:	e058      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069aa:	4b38      	ldr	r3, [pc, #224]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x200>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	099b      	lsrs	r3, r3, #6
 80069b0:	2200      	movs	r2, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	4611      	mov	r1, r2
 80069b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ba:	623b      	str	r3, [r7, #32]
 80069bc:	2300      	movs	r3, #0
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	f04f 0000 	mov.w	r0, #0
 80069cc:	f04f 0100 	mov.w	r1, #0
 80069d0:	0159      	lsls	r1, r3, #5
 80069d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069d6:	0150      	lsls	r0, r2, #5
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4641      	mov	r1, r8
 80069de:	ebb2 0a01 	subs.w	sl, r2, r1
 80069e2:	4649      	mov	r1, r9
 80069e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069fc:	ebb2 040a 	subs.w	r4, r2, sl
 8006a00:	eb63 050b 	sbc.w	r5, r3, fp
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	00eb      	lsls	r3, r5, #3
 8006a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a12:	00e2      	lsls	r2, r4, #3
 8006a14:	4614      	mov	r4, r2
 8006a16:	461d      	mov	r5, r3
 8006a18:	4643      	mov	r3, r8
 8006a1a:	18e3      	adds	r3, r4, r3
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	464b      	mov	r3, r9
 8006a20:	eb45 0303 	adc.w	r3, r5, r3
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a32:	4629      	mov	r1, r5
 8006a34:	028b      	lsls	r3, r1, #10
 8006a36:	4621      	mov	r1, r4
 8006a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	028a      	lsls	r2, r1, #10
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a46:	2200      	movs	r2, #0
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	61fa      	str	r2, [r7, #28]
 8006a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a50:	f7fa f91a 	bl	8000c88 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a8c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	3301      	adds	r3, #1
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a76:	e002      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3750      	adds	r7, #80	@ 0x50
 8006a84:	46bd      	mov	sp, r7
 8006a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	00f42400 	.word	0x00f42400
 8006a94:	007a1200 	.word	0x007a1200

08006a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	@ (8006aac <HAL_RCC_GetHCLKFreq+0x14>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20000000 	.word	0x20000000

08006ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ab4:	f7ff fff0 	bl	8006a98 <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4903      	ldr	r1, [pc, #12]	@ (8006ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	0800f224 	.word	0x0800f224

08006ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d035      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b00:	4b62      	ldr	r3, [pc, #392]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b06:	f7fb f945 	bl	8001d94 <HAL_GetTick>
 8006b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b0e:	f7fb f941 	bl	8001d94 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e0b0      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b20:	4b5b      	ldr	r3, [pc, #364]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f0      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	019a      	lsls	r2, r3, #6
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	071b      	lsls	r3, r3, #28
 8006b38:	4955      	ldr	r1, [pc, #340]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b40:	4b52      	ldr	r3, [pc, #328]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b46:	f7fb f925 	bl	8001d94 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b4e:	f7fb f921 	bl	8001d94 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e090      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b60:	4b4b      	ldr	r3, [pc, #300]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0f0      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8083 	beq.w	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	4b44      	ldr	r3, [pc, #272]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	4a43      	ldr	r2, [pc, #268]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b8a:	4b41      	ldr	r3, [pc, #260]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b96:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba2:	f7fb f8f7 	bl	8001d94 <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fb f8f3 	bl	8001d94 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e062      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bbc:	4b35      	ldr	r3, [pc, #212]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bc8:	4b31      	ldr	r3, [pc, #196]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02f      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d028      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf0:	4b29      	ldr	r3, [pc, #164]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf6:	4b28      	ldr	r3, [pc, #160]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bfc:	4a24      	ldr	r2, [pc, #144]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c02:	4b23      	ldr	r3, [pc, #140]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d114      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c0e:	f7fb f8c1 	bl	8001d94 <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fb f8bd 	bl	8001d94 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e02a      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	4b18      	ldr	r3, [pc, #96]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ee      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5a:	490d      	ldr	r1, [pc, #52]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]
 8006c60:	e005      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c62:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4a0a      	ldr	r2, [pc, #40]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c68:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	4b08      	ldr	r3, [pc, #32]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7a:	4905      	ldr	r1, [pc, #20]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	42470068 	.word	0x42470068
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40007000 	.word	0x40007000
 8006c98:	42470e40 	.word	0x42470e40

08006c9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d13f      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cba:	4b24      	ldr	r3, [pc, #144]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cd0:	d12f      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cd4:	617b      	str	r3, [r7, #20]
          break;
 8006cd6:	e02f      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ce4:	d108      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce6:	4b19      	ldr	r3, [pc, #100]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cee:	4a19      	ldr	r2, [pc, #100]	@ (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e007      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cf8:	4b14      	ldr	r3, [pc, #80]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d00:	4a15      	ldr	r2, [pc, #84]	@ (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d08:	4b10      	ldr	r3, [pc, #64]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d0e:	099b      	lsrs	r3, r3, #6
 8006d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d22:	0f1b      	lsrs	r3, r3, #28
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	617b      	str	r3, [r7, #20]
          break;
 8006d30:	e002      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]
          break;
 8006d36:	bf00      	nop
        }
      }
      break;
 8006d38:	e000      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006d3a:	bf00      	nop
    }
  }
  return frequency;
 8006d3c:	697b      	ldr	r3, [r7, #20]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	00bb8000 	.word	0x00bb8000
 8006d54:	007a1200 	.word	0x007a1200
 8006d58:	00f42400 	.word	0x00f42400

08006d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e07b      	b.n	8006e66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d108      	bne.n	8006d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d7e:	d009      	beq.n	8006d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	61da      	str	r2, [r3, #28]
 8006d86:	e005      	b.n	8006d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fa fe22 	bl	80019f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e18:	ea42 0103 	orr.w	r1, r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	f003 0104 	and.w	r1, r3, #4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	f003 0210 	and.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e6e:	b084      	sub	sp, #16
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	f107 001c 	add.w	r0, r7, #28
 8006e7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e80:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d123      	bne.n	8006ed0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d105      	bne.n	8006ec4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f9dc 	bl	8007282 <USB_CoreReset>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	e01b      	b.n	8006f08 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9d0 	bl	8007282 <USB_CoreReset>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006efa:	e005      	b.n	8006f08 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f08:	7fbb      	ldrb	r3, [r7, #30]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d10b      	bne.n	8006f26 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f043 0206 	orr.w	r2, r3, #6
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f32:	b004      	add	sp, #16
 8006f34:	4770      	bx	lr

08006f36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f043 0201 	orr.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 0201 	bic.w	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d115      	bne.n	8006fc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fa8:	200a      	movs	r0, #10
 8006faa:	f7fa feff 	bl	8001dac <HAL_Delay>
      ms += 10U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	330a      	adds	r3, #10
 8006fb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f956 	bl	8007266 <USB_GetMode>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d01e      	beq.n	8006ffe <USB_SetCurrentMode+0x84>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fc4:	d9f0      	bls.n	8006fa8 <USB_SetCurrentMode+0x2e>
 8006fc6:	e01a      	b.n	8006ffe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d115      	bne.n	8006ffa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fda:	200a      	movs	r0, #10
 8006fdc:	f7fa fee6 	bl	8001dac <HAL_Delay>
      ms += 10U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	330a      	adds	r3, #10
 8006fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f93d 	bl	8007266 <USB_GetMode>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <USB_SetCurrentMode+0x84>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ff6:	d9f0      	bls.n	8006fda <USB_SetCurrentMode+0x60>
 8006ff8:	e001      	b.n	8006ffe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e005      	b.n	800700a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2bc8      	cmp	r3, #200	@ 0xc8
 8007002:	d101      	bne.n	8007008 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800702c:	d901      	bls.n	8007032 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e01b      	b.n	800706a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	daf2      	bge.n	8007020 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	019b      	lsls	r3, r3, #6
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007056:	d901      	bls.n	800705c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e006      	b.n	800706a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b20      	cmp	r3, #32
 8007066:	d0f0      	beq.n	800704a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800708e:	d901      	bls.n	8007094 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e018      	b.n	80070c6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	daf2      	bge.n	8007082 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2210      	movs	r2, #16
 80070a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b2:	d901      	bls.n	80070b8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e006      	b.n	80070c6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d0f0      	beq.n	80070a6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b089      	sub	sp, #36	@ 0x24
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	4611      	mov	r1, r2
 80070de:	461a      	mov	r2, r3
 80070e0:	460b      	mov	r3, r1
 80070e2:	71fb      	strb	r3, [r7, #7]
 80070e4:	4613      	mov	r3, r2
 80070e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d123      	bne.n	8007140 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070f8:	88bb      	ldrh	r3, [r7, #4]
 80070fa:	3303      	adds	r3, #3
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e018      	b.n	8007138 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	031a      	lsls	r2, r3, #12
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007112:	461a      	mov	r2, r3
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6013      	str	r3, [r2, #0]
      pSrc++;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3301      	adds	r3, #1
 800711e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	3301      	adds	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	3301      	adds	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3301      	adds	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	3301      	adds	r3, #1
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	429a      	cmp	r2, r3
 800713e:	d3e2      	bcc.n	8007106 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3724      	adds	r7, #36	@ 0x24
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800714e:	b480      	push	{r7}
 8007150:	b08b      	sub	sp, #44	@ 0x2c
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	4613      	mov	r3, r2
 800715a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	089b      	lsrs	r3, r3, #2
 8007168:	b29b      	uxth	r3, r3
 800716a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007174:	2300      	movs	r3, #0
 8007176:	623b      	str	r3, [r7, #32]
 8007178:	e014      	b.n	80071a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	601a      	str	r2, [r3, #0]
    pDest++;
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	3301      	adds	r3, #1
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	3301      	adds	r3, #1
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	3301      	adds	r3, #1
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	3301      	adds	r3, #1
 80071a2:	623b      	str	r3, [r7, #32]
 80071a4:	6a3a      	ldr	r2, [r7, #32]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3e6      	bcc.n	800717a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071ac:	8bfb      	ldrh	r3, [r7, #30]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01e      	beq.n	80071f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071bc:	461a      	mov	r2, r3
 80071be:	f107 0310 	add.w	r3, r7, #16
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	701a      	strb	r2, [r3, #0]
      i++;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	3301      	adds	r3, #1
 80071dc:	623b      	str	r3, [r7, #32]
      pDest++;
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	3301      	adds	r3, #1
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80071e4:	8bfb      	ldrh	r3, [r7, #30]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071ea:	8bfb      	ldrh	r3, [r7, #30]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1ea      	bne.n	80071c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	372c      	adds	r7, #44	@ 0x2c
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	4013      	ands	r3, r2
 8007256:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007258:	68bb      	ldr	r3, [r7, #8]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f003 0301 	and.w	r3, r3, #1
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800729a:	d901      	bls.n	80072a0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e01b      	b.n	80072d8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	daf2      	bge.n	800728e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f043 0201 	orr.w	r2, r3, #1
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072c4:	d901      	bls.n	80072ca <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e006      	b.n	80072d8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d0f0      	beq.n	80072b8 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e4:	b084      	sub	sp, #16
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80072f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007304:	461a      	mov	r2, r3
 8007306:	2300      	movs	r3, #0
 8007308:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d119      	bne.n	800736e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800733a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800733e:	2b01      	cmp	r3, #1
 8007340:	d10a      	bne.n	8007358 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e014      	b.n	8007382 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007366:	f023 0304 	bic.w	r3, r3, #4
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e009      	b.n	8007382 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800737c:	f023 0304 	bic.w	r3, r3, #4
 8007380:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007382:	2110      	movs	r1, #16
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fe44 	bl	8007012 <USB_FlushTxFifo>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fe6e 	bl	8007076 <USB_FlushRxFifo>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	e015      	b.n	80073d6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b6:	461a      	mov	r2, r3
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ca:	461a      	mov	r2, r3
 80073cc:	2300      	movs	r3, #0
 80073ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	3301      	adds	r3, #1
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073da:	461a      	mov	r2, r3
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4293      	cmp	r3, r2
 80073e0:	d3e3      	bcc.n	80073aa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073ee:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a18      	ldr	r2, [pc, #96]	@ (8007454 <USB_HostInit+0x170>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d10b      	bne.n	8007410 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073fe:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a15      	ldr	r2, [pc, #84]	@ (8007458 <USB_HostInit+0x174>)
 8007404:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a14      	ldr	r2, [pc, #80]	@ (800745c <USB_HostInit+0x178>)
 800740a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800740e:	e009      	b.n	8007424 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2280      	movs	r2, #128	@ 0x80
 8007414:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a11      	ldr	r2, [pc, #68]	@ (8007460 <USB_HostInit+0x17c>)
 800741a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a11      	ldr	r2, [pc, #68]	@ (8007464 <USB_HostInit+0x180>)
 8007420:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f043 0210 	orr.w	r2, r3, #16
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699a      	ldr	r2, [r3, #24]
 800743c:	4b0a      	ldr	r3, [pc, #40]	@ (8007468 <USB_HostInit+0x184>)
 800743e:	4313      	orrs	r3, r2
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007450:	b004      	add	sp, #16
 8007452:	4770      	bx	lr
 8007454:	40040000 	.word	0x40040000
 8007458:	01000200 	.word	0x01000200
 800745c:	00e00300 	.word	0x00e00300
 8007460:	00600080 	.word	0x00600080
 8007464:	004000e0 	.word	0x004000e0
 8007468:	a3200008 	.word	0xa3200008

0800746c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074a4:	4313      	orrs	r3, r2
 80074a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d107      	bne.n	80074be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074b4:	461a      	mov	r2, r3
 80074b6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80074ba:	6053      	str	r3, [r2, #4]
 80074bc:	e00c      	b.n	80074d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d107      	bne.n	80074d4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ca:	461a      	mov	r2, r3
 80074cc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80074d0:	6053      	str	r3, [r2, #4]
 80074d2:	e001      	b.n	80074d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007506:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007514:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007516:	2064      	movs	r0, #100	@ 0x64
 8007518:	f7fa fc48 	bl	8001dac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007528:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800752a:	200a      	movs	r0, #10
 800752c:	f7fa fc3e 	bl	8001dac <HAL_Delay>

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800755e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <USB_DriveVbus+0x44>
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d106      	bne.n	800757e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007578:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800757c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007588:	d109      	bne.n	800759e <USB_DriveVbus+0x64>
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800759c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	0c5b      	lsrs	r3, r3, #17
 80075ca:	f003 0303 	and.w	r3, r3, #3
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	b29b      	uxth	r3, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4603      	mov	r3, r0
 800760c:	70fb      	strb	r3, [r7, #3]
 800760e:	460b      	mov	r3, r1
 8007610:	70bb      	strb	r3, [r7, #2]
 8007612:	4613      	mov	r3, r2
 8007614:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4413      	add	r3, r2
 8007626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800762a:	461a      	mov	r2, r3
 800762c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007630:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007632:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007636:	2b03      	cmp	r3, #3
 8007638:	d87c      	bhi.n	8007734 <USB_HC_Init+0x138>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <USB_HC_Init+0x44>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007651 	.word	0x08007651
 8007644:	080076f7 	.word	0x080076f7
 8007648:	08007651 	.word	0x08007651
 800764c:	080076b9 	.word	0x080076b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765c:	461a      	mov	r2, r3
 800765e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007664:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007668:	2b00      	cmp	r3, #0
 800766a:	da10      	bge.n	800768e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	4413      	add	r3, r2
 8007674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	440a      	add	r2, r1
 8007682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800768a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800768c:	e055      	b.n	800773a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a6f      	ldr	r2, [pc, #444]	@ (8007850 <USB_HC_Init+0x254>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d151      	bne.n	800773a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	4413      	add	r3, r2
 800769e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80076b4:	60d3      	str	r3, [r2, #12]
      break;
 80076b6:	e040      	b.n	800773a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076c4:	461a      	mov	r2, r3
 80076c6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80076ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80076cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da34      	bge.n	800773e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80076f4:	e023      	b.n	800773e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007702:	461a      	mov	r2, r3
 8007704:	f240 2325 	movw	r3, #549	@ 0x225
 8007708:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800770a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800770e:	2b00      	cmp	r3, #0
 8007710:	da17      	bge.n	8007742 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4413      	add	r3, r2
 800771a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	440a      	add	r2, r1
 8007728:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800772c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007730:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007732:	e006      	b.n	8007742 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	77fb      	strb	r3, [r7, #31]
      break;
 8007738:	e004      	b.n	8007744 <USB_HC_Init+0x148>
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <USB_HC_Init+0x148>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <USB_HC_Init+0x148>
      break;
 8007742:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007750:	461a      	mov	r2, r3
 8007752:	2300      	movs	r3, #0
 8007754:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	440a      	add	r2, r1
 800776c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007770:	f043 0302 	orr.w	r3, r3, #2
 8007774:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	f003 030f 	and.w	r3, r3, #15
 8007784:	2101      	movs	r1, #1
 8007786:	fa01 f303 	lsl.w	r3, r1, r3
 800778a:	6939      	ldr	r1, [r7, #16]
 800778c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007790:	4313      	orrs	r3, r2
 8007792:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80077a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da03      	bge.n	80077b0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80077a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	e001      	b.n	80077b4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fef9 	bl	80075ac <USB_GetHostSpeed>
 80077ba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80077bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d106      	bne.n	80077d2 <USB_HC_Init+0x1d6>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d003      	beq.n	80077d2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80077ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e001      	b.n	80077d6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077d6:	787b      	ldrb	r3, [r7, #1]
 80077d8:	059b      	lsls	r3, r3, #22
 80077da:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077de:	78bb      	ldrb	r3, [r7, #2]
 80077e0:	02db      	lsls	r3, r3, #11
 80077e2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80077e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077ec:	049b      	lsls	r3, r3, #18
 80077ee:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80077f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80077f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80077f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80077fa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	431a      	orrs	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007814:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007816:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800781a:	2b03      	cmp	r3, #3
 800781c:	d003      	beq.n	8007826 <USB_HC_Init+0x22a>
 800781e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d10f      	bne.n	8007846 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	440a      	add	r2, r1
 800783c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007844:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007846:	7ffb      	ldrb	r3, [r7, #31]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3720      	adds	r7, #32
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40040000 	.word	0x40040000

08007854 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	@ 0x30
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800786c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007870:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a5d      	ldr	r2, [pc, #372]	@ (80079ec <USB_HC_StartXfer+0x198>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d12f      	bne.n	80078da <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d11c      	bne.n	80078ba <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	7c9b      	ldrb	r3, [r3, #18]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <USB_HC_StartXfer+0x3c>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7c9b      	ldrb	r3, [r3, #18]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d124      	bne.n	80078da <USB_HC_StartXfer+0x86>
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	799b      	ldrb	r3, [r3, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d120      	bne.n	80078da <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b6:	60d3      	str	r3, [r2, #12]
 80078b8:	e00f      	b.n	80078da <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	791b      	ldrb	r3, [r3, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <USB_HC_StartXfer+0x86>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	795b      	ldrb	r3, [r3, #5]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d107      	bne.n	80078da <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	4619      	mov	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fb6b 	bl	8007fac <USB_DoPing>
        return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e232      	b.n	8007d40 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	799b      	ldrb	r3, [r3, #6]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d158      	bne.n	8007994 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80078e2:	2301      	movs	r3, #1
 80078e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	78db      	ldrb	r3, [r3, #3]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	8a92      	ldrh	r2, [r2, #20]
 80078f4:	fb03 f202 	mul.w	r2, r3, r2
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	61da      	str	r2, [r3, #28]
 80078fc:	e07c      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	7c9b      	ldrb	r3, [r3, #18]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d130      	bne.n	8007968 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	2bbc      	cmp	r3, #188	@ 0xbc
 800790c:	d918      	bls.n	8007940 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	8a9b      	ldrh	r3, [r3, #20]
 8007912:	461a      	mov	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d003      	beq.n	8007930 <USB_HC_StartXfer+0xdc>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d103      	bne.n	8007938 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2202      	movs	r2, #2
 8007934:	60da      	str	r2, [r3, #12]
 8007936:	e05f      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2201      	movs	r2, #1
 800793c:	60da      	str	r2, [r3, #12]
 800793e:	e05b      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6a1a      	ldr	r2, [r3, #32]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d007      	beq.n	8007960 <USB_HC_StartXfer+0x10c>
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d003      	beq.n	8007960 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2204      	movs	r2, #4
 800795c:	60da      	str	r2, [r3, #12]
 800795e:	e04b      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2203      	movs	r2, #3
 8007964:	60da      	str	r2, [r3, #12]
 8007966:	e047      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d10d      	bne.n	800798a <USB_HC_StartXfer+0x136>
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	8a92      	ldrh	r2, [r2, #20]
 8007976:	4293      	cmp	r3, r2
 8007978:	d907      	bls.n	800798a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800797a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	8a92      	ldrh	r2, [r2, #20]
 8007980:	fb03 f202 	mul.w	r2, r3, r2
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	61da      	str	r2, [r3, #28]
 8007988:	e036      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	61da      	str	r2, [r3, #28]
 8007992:	e031      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d018      	beq.n	80079ce <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	8a92      	ldrh	r2, [r2, #20]
 80079a4:	4413      	add	r3, r2
 80079a6:	3b01      	subs	r3, #1
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	8a92      	ldrh	r2, [r2, #20]
 80079ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80079b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80079b4:	8b7b      	ldrh	r3, [r7, #26]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d90b      	bls.n	80079d2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80079ba:	8b7b      	ldrh	r3, [r7, #26]
 80079bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	8a92      	ldrh	r2, [r2, #20]
 80079c4:	fb03 f202 	mul.w	r2, r3, r2
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	61da      	str	r2, [r3, #28]
 80079cc:	e001      	b.n	80079d2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80079ce:	2301      	movs	r3, #1
 80079d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	78db      	ldrb	r3, [r3, #3]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	8a92      	ldrh	r2, [r2, #20]
 80079e0:	fb03 f202 	mul.w	r2, r3, r2
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	61da      	str	r2, [r3, #28]
 80079e8:	e006      	b.n	80079f8 <USB_HC_StartXfer+0x1a4>
 80079ea:	bf00      	nop
 80079ec:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	6a1a      	ldr	r2, [r3, #32]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a02:	04d9      	lsls	r1, r3, #19
 8007a04:	4ba3      	ldr	r3, [pc, #652]	@ (8007c94 <USB_HC_StartXfer+0x440>)
 8007a06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	7d9b      	ldrb	r3, [r3, #22]
 8007a0e:	075b      	lsls	r3, r3, #29
 8007a10:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a14:	69f9      	ldr	r1, [r7, #28]
 8007a16:	0148      	lsls	r0, r1, #5
 8007a18:	6a39      	ldr	r1, [r7, #32]
 8007a1a:	4401      	add	r1, r0
 8007a1c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6999      	ldr	r1, [r3, #24]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	2300      	movne	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	6a3a      	ldr	r2, [r7, #32]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	7e7b      	ldrb	r3, [r7, #25]
 8007a86:	075b      	lsls	r3, r3, #29
 8007a88:	69f9      	ldr	r1, [r7, #28]
 8007a8a:	0148      	lsls	r0, r1, #5
 8007a8c:	6a39      	ldr	r1, [r7, #32]
 8007a8e:	4401      	add	r1, r0
 8007a90:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	799b      	ldrb	r3, [r3, #6]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	f040 80c3 	bne.w	8007c28 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	7c5b      	ldrb	r3, [r3, #17]
 8007aa6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007aac:	4313      	orrs	r3, r2
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	6a3a      	ldr	r2, [r7, #32]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007abe:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	6a3a      	ldr	r2, [r7, #32]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ada:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ade:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	79db      	ldrb	r3, [r3, #7]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d123      	bne.n	8007b30 <USB_HC_StartXfer+0x2dc>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	78db      	ldrb	r3, [r3, #3]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11f      	bne.n	8007b30 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	6a3a      	ldr	r2, [r7, #32]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b0e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	6a3a      	ldr	r2, [r7, #32]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b2e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	7c9b      	ldrb	r3, [r3, #18]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d003      	beq.n	8007b40 <USB_HC_StartXfer+0x2ec>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	7c9b      	ldrb	r3, [r3, #18]
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d117      	bne.n	8007b70 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d113      	bne.n	8007b70 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10f      	bne.n	8007b70 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	6a3a      	ldr	r2, [r7, #32]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b6e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	7c9b      	ldrb	r3, [r3, #18]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d162      	bne.n	8007c3e <USB_HC_StartXfer+0x3ea>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	78db      	ldrb	r3, [r3, #3]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d15e      	bne.n	8007c3e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d858      	bhi.n	8007c3c <USB_HC_StartXfer+0x3e8>
 8007b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <USB_HC_StartXfer+0x33c>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007bc3 	.word	0x08007bc3
 8007b98:	08007be5 	.word	0x08007be5
 8007b9c:	08007c07 	.word	0x08007c07
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	6a3a      	ldr	r2, [r7, #32]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bbe:	6053      	str	r3, [r2, #4]
          break;
 8007bc0:	e03d      	b.n	8007c3e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	0151      	lsls	r1, r2, #5
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bdc:	f043 030e 	orr.w	r3, r3, #14
 8007be0:	6053      	str	r3, [r2, #4]
          break;
 8007be2:	e02c      	b.n	8007c3e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c02:	6053      	str	r3, [r2, #4]
          break;
 8007c04:	e01b      	b.n	8007c3e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	6a3a      	ldr	r2, [r7, #32]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c24:	6053      	str	r3, [r2, #4]
          break;
 8007c26:	e00a      	b.n	8007c3e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c34:	461a      	mov	r2, r3
 8007c36:	2300      	movs	r3, #0
 8007c38:	6053      	str	r3, [r2, #4]
 8007c3a:	e000      	b.n	8007c3e <USB_HC_StartXfer+0x3ea>
          break;
 8007c3c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c54:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	78db      	ldrb	r3, [r3, #3]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c64:	613b      	str	r3, [r7, #16]
 8007c66:	e003      	b.n	8007c70 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c6e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c76:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	461a      	mov	r2, r3
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	e055      	b.n	8007d40 <USB_HC_StartXfer+0x4ec>
 8007c94:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	78db      	ldrb	r3, [r3, #3]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d14e      	bne.n	8007d3e <USB_HC_StartXfer+0x4ea>
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d04a      	beq.n	8007d3e <USB_HC_StartXfer+0x4ea>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	79db      	ldrb	r3, [r3, #7]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d146      	bne.n	8007d3e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	7c9b      	ldrb	r3, [r3, #18]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d831      	bhi.n	8007d1c <USB_HC_StartXfer+0x4c8>
 8007cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc0 <USB_HC_StartXfer+0x46c>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007cf5 	.word	0x08007cf5
 8007cc8:	08007cd1 	.word	0x08007cd1
 8007ccc:	08007cf5 	.word	0x08007cf5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	3303      	adds	r3, #3
 8007cd6:	089b      	lsrs	r3, r3, #2
 8007cd8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cda:	8afa      	ldrh	r2, [r7, #22]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d91c      	bls.n	8007d20 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cf2:	e015      	b.n	8007d20 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	3303      	adds	r3, #3
 8007cfa:	089b      	lsrs	r3, r3, #2
 8007cfc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cfe:	8afa      	ldrh	r2, [r7, #22]
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d90a      	bls.n	8007d24 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d1a:	e003      	b.n	8007d24 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007d1c:	bf00      	nop
 8007d1e:	e002      	b.n	8007d26 <USB_HC_StartXfer+0x4d2>
        break;
 8007d20:	bf00      	nop
 8007d22:	e000      	b.n	8007d26 <USB_HC_StartXfer+0x4d2>
        break;
 8007d24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6999      	ldr	r1, [r3, #24]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	785a      	ldrb	r2, [r3, #1]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2000      	movs	r0, #0
 8007d36:	9000      	str	r0, [sp, #0]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff f9ca 	bl	80070d2 <USB_WritePacket>
  }

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3728      	adds	r7, #40	@ 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	b29b      	uxth	r3, r3
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b089      	sub	sp, #36	@ 0x24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	0c9b      	lsrs	r3, r3, #18
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	0fdb      	lsrs	r3, r3, #31
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	0fdb      	lsrs	r3, r3, #31
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d10d      	bne.n	8007dec <USB_HC_Halt+0x82>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <USB_HC_Halt+0x82>
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d002      	beq.n	8007de8 <USB_HC_Halt+0x7e>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d101      	bne.n	8007dec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	e0d8      	b.n	8007f9e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <USB_HC_Halt+0x8e>
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d173      	bne.n	8007ee0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d14a      	bne.n	8007eba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d133      	bne.n	8007e98 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e4e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e6e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e7c:	d82e      	bhi.n	8007edc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e94:	d0ec      	beq.n	8007e70 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e96:	e081      	b.n	8007f9c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007eb6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eb8:	e070      	b.n	8007f9c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ed4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ed8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eda:	e05f      	b.n	8007f9c <USB_HC_Halt+0x232>
            break;
 8007edc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ede:	e05d      	b.n	8007f9c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007efa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007efe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d133      	bne.n	8007f78 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f4e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f5c:	d81d      	bhi.n	8007f9a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f74:	d0ec      	beq.n	8007f50 <USB_HC_Halt+0x1e6>
 8007f76:	e011      	b.n	8007f9c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	e000      	b.n	8007f9c <USB_HC_Halt+0x232>
          break;
 8007f9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3724      	adds	r7, #36	@ 0x24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	04da      	lsls	r2, r3, #19
 8007fc8:	4b15      	ldr	r3, [pc, #84]	@ (8008020 <USB_DoPing+0x74>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fdc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ff4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ffc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800a:	461a      	mov	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	1ff80000 	.word	0x1ff80000

08008024 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7fe ff8d 	bl	8006f58 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800803e:	2110      	movs	r1, #16
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7fe ffe6 	bl	8007012 <USB_FlushTxFifo>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff f810 	bl	8007076 <USB_FlushRxFifo>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008060:	2300      	movs	r3, #0
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e01f      	b.n	80080a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800807c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008084:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800808c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809a:	461a      	mov	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b0f      	cmp	r3, #15
 80080aa:	d9dc      	bls.n	8008066 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e034      	b.n	800811c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80080d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3301      	adds	r3, #1
 80080f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080f8:	d80c      	bhi.n	8008114 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	4413      	add	r3, r2
 8008102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800810c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008110:	d0ec      	beq.n	80080ec <USB_StopHost+0xc8>
 8008112:	e000      	b.n	8008116 <USB_StopHost+0xf2>
        break;
 8008114:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	3301      	adds	r3, #1
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	2b0f      	cmp	r3, #15
 8008120:	d9c7      	bls.n	80080b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008128:	461a      	mov	r2, r3
 800812a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800812e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008136:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7fe fefc 	bl	8006f36 <USB_EnableGlobalInt>

  return ret;
 800813e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b089      	sub	sp, #36	@ 0x24
 800814c:	af04      	add	r7, sp, #16
 800814e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008150:	2301      	movs	r3, #1
 8008152:	2202      	movs	r2, #2
 8008154:	2102      	movs	r1, #2
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fc85 	bl	8008a66 <USBH_FindInterface>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	2bff      	cmp	r3, #255	@ 0xff
 8008164:	d002      	beq.n	800816c <USBH_CDC_InterfaceInit+0x24>
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d901      	bls.n	8008170 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800816c:	2302      	movs	r3, #2
 800816e:	e13d      	b.n	80083ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fc5a 	bl	8008a2e <USBH_SelectInterface>
 800817a:	4603      	mov	r3, r0
 800817c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	e131      	b.n	80083ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800818e:	2050      	movs	r0, #80	@ 0x50
 8008190:	f002 fe2e 	bl	800adf0 <malloc>
 8008194:	4603      	mov	r3, r0
 8008196:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80081a8:	2302      	movs	r3, #2
 80081aa:	e11f      	b.n	80083ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80081ac:	2250      	movs	r2, #80	@ 0x50
 80081ae:	2100      	movs	r1, #0
 80081b0:	68b8      	ldr	r0, [r7, #8]
 80081b2:	f004 fa67 	bl	800c684 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	211a      	movs	r1, #26
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b25b      	sxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da15      	bge.n	80081fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	211a      	movs	r1, #26
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	211a      	movs	r1, #26
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081f4:	881a      	ldrh	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 ffbe 	bl	800a182 <USBH_AllocPipe>
 8008206:	4603      	mov	r3, r0
 8008208:	461a      	mov	r2, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	7819      	ldrb	r1, [r3, #0]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	7858      	ldrb	r0, [r3, #1]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	8952      	ldrh	r2, [r2, #10]
 8008226:	9202      	str	r2, [sp, #8]
 8008228:	2203      	movs	r2, #3
 800822a:	9201      	str	r2, [sp, #4]
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	4623      	mov	r3, r4
 8008230:	4602      	mov	r2, r0
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 ff76 	bl	800a124 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2200      	movs	r2, #0
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f002 fa85 	bl	800a750 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008246:	2300      	movs	r3, #0
 8008248:	2200      	movs	r2, #0
 800824a:	210a      	movs	r1, #10
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc0a 	bl	8008a66 <USBH_FindInterface>
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2bff      	cmp	r3, #255	@ 0xff
 800825a:	d002      	beq.n	8008262 <USBH_CDC_InterfaceInit+0x11a>
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d901      	bls.n	8008266 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008262:	2302      	movs	r3, #2
 8008264:	e0c2      	b.n	80083ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	211a      	movs	r1, #26
 800826c:	fb01 f303 	mul.w	r3, r1, r3
 8008270:	4413      	add	r3, r2
 8008272:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	b25b      	sxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	da16      	bge.n	80082ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	211a      	movs	r1, #26
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	4413      	add	r3, r2
 800828a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	211a      	movs	r1, #26
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	4413      	add	r3, r2
 80082a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082a4:	881a      	ldrh	r2, [r3, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	835a      	strh	r2, [r3, #26]
 80082aa:	e015      	b.n	80082d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	211a      	movs	r1, #26
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80082bc:	781a      	ldrb	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	211a      	movs	r1, #26
 80082c8:	fb01 f303 	mul.w	r3, r1, r3
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082d2:	881a      	ldrh	r2, [r3, #0]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	211a      	movs	r1, #26
 80082de:	fb01 f303 	mul.w	r3, r1, r3
 80082e2:	4413      	add	r3, r2
 80082e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b25b      	sxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	da16      	bge.n	800831e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	211a      	movs	r1, #26
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	4413      	add	r3, r2
 80082fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	211a      	movs	r1, #26
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	4413      	add	r3, r2
 8008312:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008316:	881a      	ldrh	r2, [r3, #0]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	835a      	strh	r2, [r3, #26]
 800831c:	e015      	b.n	800834a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	211a      	movs	r1, #26
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	4413      	add	r3, r2
 800832a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	211a      	movs	r1, #26
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008344:	881a      	ldrh	r2, [r3, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	7b9b      	ldrb	r3, [r3, #14]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 ff16 	bl	800a182 <USBH_AllocPipe>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	7bdb      	ldrb	r3, [r3, #15]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 ff0c 	bl	800a182 <USBH_AllocPipe>
 800836a:	4603      	mov	r3, r0
 800836c:	461a      	mov	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	7b59      	ldrb	r1, [r3, #13]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	7b98      	ldrb	r0, [r3, #14]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	8b12      	ldrh	r2, [r2, #24]
 800838a:	9202      	str	r2, [sp, #8]
 800838c:	2202      	movs	r2, #2
 800838e:	9201      	str	r2, [sp, #4]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	4623      	mov	r3, r4
 8008394:	4602      	mov	r2, r0
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fec4 	bl	800a124 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	7b19      	ldrb	r1, [r3, #12]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	7bd8      	ldrb	r0, [r3, #15]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	8b52      	ldrh	r2, [r2, #26]
 80083b4:	9202      	str	r2, [sp, #8]
 80083b6:	2202      	movs	r2, #2
 80083b8:	9201      	str	r2, [sp, #4]
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4623      	mov	r3, r4
 80083be:	4602      	mov	r2, r0
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 feaf 	bl	800a124 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	7b5b      	ldrb	r3, [r3, #13]
 80083d2:	2200      	movs	r2, #0
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f002 f9ba 	bl	800a750 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	7b1b      	ldrb	r3, [r3, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f002 f9b3 	bl	800a750 <USBH_LL_SetToggle>

  return USBH_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd90      	pop	{r4, r7, pc}

080083f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00e      	beq.n	800842c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fea4 	bl	800a162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 fecf 	bl	800a1c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	7b1b      	ldrb	r3, [r3, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00e      	beq.n	8008452 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	7b1b      	ldrb	r3, [r3, #12]
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f001 fe91 	bl	800a162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	7b1b      	ldrb	r3, [r3, #12]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 febc 	bl	800a1c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	7b5b      	ldrb	r3, [r3, #13]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	7b5b      	ldrb	r3, [r3, #13]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 fe7e 	bl	800a162 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	7b5b      	ldrb	r3, [r3, #13]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fea9 	bl	800a1c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00b      	beq.n	800849c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	4618      	mov	r0, r3
 800848e:	f002 fcb7 	bl	800ae00 <free>
    phost->pActiveClass->pData = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008498:	2200      	movs	r2, #0
 800849a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3340      	adds	r3, #64	@ 0x40
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f8b1 	bl	8008626 <GetLineCoding>
 80084c4:	4603      	mov	r3, r0
 80084c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d105      	bne.n	80084da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084d4:	2102      	movs	r1, #2
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80084da:	7afb      	ldrb	r3, [r7, #11]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80084ec:	2301      	movs	r3, #1
 80084ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008504:	2b04      	cmp	r3, #4
 8008506:	d877      	bhi.n	80085f8 <USBH_CDC_Process+0x114>
 8008508:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <USBH_CDC_Process+0x2c>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008525 	.word	0x08008525
 8008514:	0800852b 	.word	0x0800852b
 8008518:	0800855b 	.word	0x0800855b
 800851c:	080085cf 	.word	0x080085cf
 8008520:	080085dd 	.word	0x080085dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
      break;
 8008528:	e06d      	b.n	8008606 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f897 	bl	8008664 <SetLineCoding>
 8008536:	4603      	mov	r3, r0
 8008538:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008548:	e058      	b.n	80085fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d055      	beq.n	80085fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2204      	movs	r2, #4
 8008554:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008558:	e050      	b.n	80085fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	3340      	adds	r3, #64	@ 0x40
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f860 	bl	8008626 <GetLineCoding>
 8008566:	4603      	mov	r3, r0
 8008568:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d126      	bne.n	80085be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d13b      	bne.n	8008600 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008592:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008594:	429a      	cmp	r2, r3
 8008596:	d133      	bne.n	8008600 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d12b      	bne.n	8008600 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d124      	bne.n	8008600 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f958 	bl	800886c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80085bc:	e020      	b.n	8008600 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d01d      	beq.n	8008600 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2204      	movs	r2, #4
 80085c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80085cc:	e018      	b.n	8008600 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f867 	bl	80086a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f8da 	bl	800878e <CDC_ProcessReception>
      break;
 80085da:	e014      	b.n	8008606 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80085dc:	2100      	movs	r1, #0
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 f81a 	bl	8009618 <USBH_ClrFeature>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80085f6:	e005      	b.n	8008604 <USBH_CDC_Process+0x120>

    default:
      break;
 80085f8:	bf00      	nop
 80085fa:	e004      	b.n	8008606 <USBH_CDC_Process+0x122>
      break;
 80085fc:	bf00      	nop
 80085fe:	e002      	b.n	8008606 <USBH_CDC_Process+0x122>
      break;
 8008600:	bf00      	nop
 8008602:	e000      	b.n	8008606 <USBH_CDC_Process+0x122>
      break;
 8008604:	bf00      	nop

  }

  return status;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	22a1      	movs	r2, #161	@ 0xa1
 8008634:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2221      	movs	r2, #33	@ 0x21
 800863a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2207      	movs	r2, #7
 800864c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2207      	movs	r2, #7
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fb14 	bl	8009c82 <USBH_CtlReq>
 800865a:	4603      	mov	r3, r0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2221      	movs	r2, #33	@ 0x21
 8008672:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2207      	movs	r2, #7
 800868a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2207      	movs	r2, #7
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 faf5 	bl	8009c82 <USBH_CtlReq>
 8008698:	4603      	mov	r3, r0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af02      	add	r7, sp, #8
 80086a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d002      	beq.n	80086c8 <CDC_ProcessTransmission+0x26>
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d023      	beq.n	800870e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80086c6:	e05e      	b.n	8008786 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	8b12      	ldrh	r2, [r2, #24]
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d90b      	bls.n	80086ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	69d9      	ldr	r1, [r3, #28]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8b1a      	ldrh	r2, [r3, #24]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	7b5b      	ldrb	r3, [r3, #13]
 80086e0:	2001      	movs	r0, #1
 80086e2:	9000      	str	r0, [sp, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fcda 	bl	800a09e <USBH_BulkSendData>
 80086ea:	e00b      	b.n	8008704 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	7b5b      	ldrb	r3, [r3, #13]
 80086fa:	2001      	movs	r0, #1
 80086fc:	9000      	str	r0, [sp, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fccd 	bl	800a09e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800870c:	e03b      	b.n	8008786 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	7b5b      	ldrb	r3, [r3, #13]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fff1 	bl	800a6fc <USBH_LL_GetURBState>
 800871a:	4603      	mov	r3, r0
 800871c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800871e:	7afb      	ldrb	r3, [r7, #11]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d128      	bne.n	8008776 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	8b12      	ldrh	r2, [r2, #24]
 800872c:	4293      	cmp	r3, r2
 800872e:	d90e      	bls.n	800874e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	8b12      	ldrh	r2, [r2, #24]
 8008738:	1a9a      	subs	r2, r3, r2
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	8b12      	ldrh	r2, [r2, #24]
 8008746:	441a      	add	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	61da      	str	r2, [r3, #28]
 800874c:	e002      	b.n	8008754 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008764:	e00e      	b.n	8008784 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f868 	bl	8008844 <USBH_CDC_TransmitCallback>
      break;
 8008774:	e006      	b.n	8008784 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d103      	bne.n	8008784 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008784:	bf00      	nop
  }
}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b086      	sub	sp, #24
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d002      	beq.n	80087b4 <CDC_ProcessReception+0x26>
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d00e      	beq.n	80087d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80087b2:	e043      	b.n	800883c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6a19      	ldr	r1, [r3, #32]
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	8b5a      	ldrh	r2, [r3, #26]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	7b1b      	ldrb	r3, [r3, #12]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fc91 	bl	800a0e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2204      	movs	r2, #4
 80087ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80087ce:	e035      	b.n	800883c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	7b1b      	ldrb	r3, [r3, #12]
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 ff90 	bl	800a6fc <USBH_LL_GetURBState>
 80087dc:	4603      	mov	r3, r0
 80087de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80087e0:	7cfb      	ldrb	r3, [r7, #19]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d129      	bne.n	800883a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	7b1b      	ldrb	r3, [r3, #12]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fef3 	bl	800a5d8 <USBH_LL_GetLastXferSize>
 80087f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d016      	beq.n	800882c <CDC_ProcessReception+0x9e>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	8b5b      	ldrh	r3, [r3, #26]
 8008802:	461a      	mov	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4293      	cmp	r3, r2
 8008808:	d110      	bne.n	800882c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad2      	subs	r2, r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	6a1a      	ldr	r2, [r3, #32]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	441a      	add	r2, r3
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2203      	movs	r2, #3
 8008826:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800882a:	e006      	b.n	800883a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f80f 	bl	8008858 <USBH_CDC_ReceiveCallback>
      break;
 800883a:	bf00      	nop
  }
}
 800883c:	bf00      	nop
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4613      	mov	r3, r2
 800888c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008894:	2302      	movs	r3, #2
 8008896:	e029      	b.n	80088ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	79fa      	ldrb	r2, [r7, #7]
 800889c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f81f 	bl	80088f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f001 fdc3 	bl	800a470 <USBH_LL_Init>

  return USBH_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	e009      	b.n	800891a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	33e0      	adds	r3, #224	@ 0xe0
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	2200      	movs	r2, #0
 8008912:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b0f      	cmp	r3, #15
 800891e:	d9f2      	bls.n	8008906 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e009      	b.n	800893a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008940:	d3f1      	bcc.n	8008926 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2240      	movs	r2, #64	@ 0x40
 8008966:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	331c      	adds	r3, #28
 8008992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f003 fe73 	bl	800c684 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089a8:	2100      	movs	r1, #0
 80089aa:	4618      	mov	r0, r3
 80089ac:	f003 fe6a 	bl	800c684 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80089b6:	2212      	movs	r2, #18
 80089b8:	2100      	movs	r1, #0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f003 fe62 	bl	800c684 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089c6:	223e      	movs	r2, #62	@ 0x3e
 80089c8:	2100      	movs	r1, #0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f003 fe5a 	bl	800c684 <memset>

  return USBH_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d016      	beq.n	8008a1c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10e      	bne.n	8008a16 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80089fe:	1c59      	adds	r1, r3, #1
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	33de      	adds	r3, #222	@ 0xde
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
 8008a14:	e004      	b.n	8008a20 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a16:	2302      	movs	r3, #2
 8008a18:	73fb      	strb	r3, [r7, #15]
 8008a1a:	e001      	b.n	8008a20 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d204      	bcs.n	8008a54 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008a52:	e001      	b.n	8008a58 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a54:	2302      	movs	r3, #2
 8008a56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b087      	sub	sp, #28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	4608      	mov	r0, r1
 8008a70:	4611      	mov	r1, r2
 8008a72:	461a      	mov	r2, r3
 8008a74:	4603      	mov	r3, r0
 8008a76:	70fb      	strb	r3, [r7, #3]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70bb      	strb	r3, [r7, #2]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a8e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a90:	e025      	b.n	8008ade <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
 8008a94:	221a      	movs	r2, #26
 8008a96:	fb02 f303 	mul.w	r3, r2, r3
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	795b      	ldrb	r3, [r3, #5]
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d002      	beq.n	8008ab4 <USBH_FindInterface+0x4e>
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	2bff      	cmp	r3, #255	@ 0xff
 8008ab2:	d111      	bne.n	8008ad8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ab8:	78ba      	ldrb	r2, [r7, #2]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d002      	beq.n	8008ac4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008abe:	78bb      	ldrb	r3, [r7, #2]
 8008ac0:	2bff      	cmp	r3, #255	@ 0xff
 8008ac2:	d109      	bne.n	8008ad8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ac8:	787a      	ldrb	r2, [r7, #1]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d002      	beq.n	8008ad4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ace:	787b      	ldrb	r3, [r7, #1]
 8008ad0:	2bff      	cmp	r3, #255	@ 0xff
 8008ad2:	d101      	bne.n	8008ad8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	e006      	b.n	8008ae6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	3301      	adds	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d9d6      	bls.n	8008a92 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ae4:	23ff      	movs	r3, #255	@ 0xff
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fcf4 	bl	800a4e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b00:	2101      	movs	r1, #1
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fe0d 	bl	800a722 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af04      	add	r7, sp, #16
 8008b1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d102      	bne.n	8008b36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2203      	movs	r2, #3
 8008b34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b0b      	cmp	r3, #11
 8008b3e:	f200 81bb 	bhi.w	8008eb8 <USBH_Process+0x3a4>
 8008b42:	a201      	add	r2, pc, #4	@ (adr r2, 8008b48 <USBH_Process+0x34>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b79 	.word	0x08008b79
 8008b4c:	08008bab 	.word	0x08008bab
 8008b50:	08008c13 	.word	0x08008c13
 8008b54:	08008e53 	.word	0x08008e53
 8008b58:	08008eb9 	.word	0x08008eb9
 8008b5c:	08008cb3 	.word	0x08008cb3
 8008b60:	08008df9 	.word	0x08008df9
 8008b64:	08008ce9 	.word	0x08008ce9
 8008b68:	08008d09 	.word	0x08008d09
 8008b6c:	08008d27 	.word	0x08008d27
 8008b70:	08008d6b 	.word	0x08008d6b
 8008b74:	08008e3b 	.word	0x08008e3b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 819b 	beq.w	8008ebc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b8c:	20c8      	movs	r0, #200	@ 0xc8
 8008b8e:	f001 fe12 	bl	800a7b6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fd05 	bl	800a5a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ba8:	e188      	b.n	8008ebc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d107      	bne.n	8008bc4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008bc2:	e18a      	b.n	8008eda <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bce:	d914      	bls.n	8008bfa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d903      	bls.n	8008bf2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	220d      	movs	r2, #13
 8008bee:	701a      	strb	r2, [r3, #0]
      break;
 8008bf0:	e173      	b.n	8008eda <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	701a      	strb	r2, [r3, #0]
      break;
 8008bf8:	e16f      	b.n	8008eda <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c00:	f103 020a 	add.w	r2, r3, #10
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008c0a:	200a      	movs	r0, #10
 8008c0c:	f001 fdd3 	bl	800a7b6 <USBH_Delay>
      break;
 8008c10:	e163      	b.n	8008eda <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c22:	2104      	movs	r1, #4
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c28:	2064      	movs	r0, #100	@ 0x64
 8008c2a:	f001 fdc4 	bl	800a7b6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 fc90 	bl	800a554 <USBH_LL_GetSpeed>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2205      	movs	r2, #5
 8008c42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c44:	2100      	movs	r1, #0
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 fa9b 	bl	800a182 <USBH_AllocPipe>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008c54:	2180      	movs	r1, #128	@ 0x80
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 fa93 	bl	800a182 <USBH_AllocPipe>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7919      	ldrb	r1, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c78:	9202      	str	r2, [sp, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	9201      	str	r2, [sp, #4]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4603      	mov	r3, r0
 8008c82:	2280      	movs	r2, #128	@ 0x80
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 fa4d 	bl	800a124 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7959      	ldrb	r1, [r3, #5]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c9e:	9202      	str	r2, [sp, #8]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	9201      	str	r2, [sp, #4]
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2200      	movs	r2, #0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fa3a 	bl	800a124 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cb0:	e113      	b.n	8008eda <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f916 	bl	8008ee4 <USBH_HandleEnum>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f040 80fd 	bne.w	8008ec0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d103      	bne.n	8008ce0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2208      	movs	r2, #8
 8008cdc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cde:	e0ef      	b.n	8008ec0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2207      	movs	r2, #7
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	e0eb      	b.n	8008ec0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 80e8 	beq.w	8008ec4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2208      	movs	r2, #8
 8008d04:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008d06:	e0dd      	b.n	8008ec4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fc3a 	bl	800958a <USBH_SetCfg>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 80d5 	bne.w	8008ec8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2209      	movs	r2, #9
 8008d22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d24:	e0d0      	b.n	8008ec8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d016      	beq.n	8008d62 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008d34:	2101      	movs	r1, #1
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fc4a 	bl	80095d0 <USBH_SetFeature>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d103      	bne.n	8008d50 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d4e:	e0bd      	b.n	8008ecc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	f040 80b9 	bne.w	8008ecc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	701a      	strb	r2, [r3, #0]
      break;
 8008d60:	e0b4      	b.n	8008ecc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	220a      	movs	r2, #10
 8008d66:	701a      	strb	r2, [r3, #0]
      break;
 8008d68:	e0b0      	b.n	8008ecc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 80ad 	beq.w	8008ed0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]
 8008d82:	e016      	b.n	8008db2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008d84:	7bfa      	ldrb	r2, [r7, #15]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	32de      	adds	r2, #222	@ 0xde
 8008d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8e:	791a      	ldrb	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d108      	bne.n	8008dac <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d9a:	7bfa      	ldrb	r2, [r7, #15]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	32de      	adds	r2, #222	@ 0xde
 8008da0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008daa:	e005      	b.n	8008db8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	3301      	adds	r3, #1
 8008db0:	73fb      	strb	r3, [r7, #15]
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0e5      	beq.n	8008d84 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d016      	beq.n	8008df0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2206      	movs	r2, #6
 8008dd8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008de0:	2103      	movs	r1, #3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008de6:	e073      	b.n	8008ed0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	220d      	movs	r2, #13
 8008dec:	701a      	strb	r2, [r3, #0]
      break;
 8008dee:	e06f      	b.n	8008ed0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	220d      	movs	r2, #13
 8008df4:	701a      	strb	r2, [r3, #0]
      break;
 8008df6:	e06b      	b.n	8008ed0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d017      	beq.n	8008e32 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	220b      	movs	r2, #11
 8008e1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e20:	e058      	b.n	8008ed4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d154      	bne.n	8008ed4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	220d      	movs	r2, #13
 8008e2e:	701a      	strb	r2, [r3, #0]
      break;
 8008e30:	e050      	b.n	8008ed4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	220d      	movs	r2, #13
 8008e36:	701a      	strb	r2, [r3, #0]
      break;
 8008e38:	e04c      	b.n	8008ed4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d049      	beq.n	8008ed8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
      }
      break;
 8008e50:	e042      	b.n	8008ed8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fd4a 	bl	80088f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e8e:	2105      	movs	r1, #5
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d107      	bne.n	8008eb0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff fe22 	bl	8008af2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eae:	e014      	b.n	8008eda <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 fb19 	bl	800a4e8 <USBH_LL_Start>
      break;
 8008eb6:	e010      	b.n	8008eda <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008eb8:	bf00      	nop
 8008eba:	e00e      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ebc:	bf00      	nop
 8008ebe:	e00c      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ec0:	bf00      	nop
 8008ec2:	e00a      	b.n	8008eda <USBH_Process+0x3c6>
    break;
 8008ec4:	bf00      	nop
 8008ec6:	e008      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ec8:	bf00      	nop
 8008eca:	e006      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ecc:	bf00      	nop
 8008ece:	e004      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ed0:	bf00      	nop
 8008ed2:	e002      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <USBH_Process+0x3c6>
      break;
 8008ed8:	bf00      	nop
  }
  return USBH_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af04      	add	r7, sp, #16
 8008eea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b07      	cmp	r3, #7
 8008efa:	f200 81bd 	bhi.w	8009278 <USBH_HandleEnum+0x394>
 8008efe:	a201      	add	r2, pc, #4	@ (adr r2, 8008f04 <USBH_HandleEnum+0x20>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f25 	.word	0x08008f25
 8008f08:	08008fdf 	.word	0x08008fdf
 8008f0c:	08009049 	.word	0x08009049
 8008f10:	080090d3 	.word	0x080090d3
 8008f14:	0800913d 	.word	0x0800913d
 8008f18:	080091ad 	.word	0x080091ad
 8008f1c:	080091f3 	.word	0x080091f3
 8008f20:	08009239 	.word	0x08009239
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f24:	2108      	movs	r1, #8
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa4c 	bl	80093c4 <USBH_Get_DevDesc>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d12e      	bne.n	8008f94 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7919      	ldrb	r1, [r3, #4]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008f5a:	9202      	str	r2, [sp, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4603      	mov	r3, r0
 8008f64:	2280      	movs	r2, #128	@ 0x80
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 f8dc 	bl	800a124 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7959      	ldrb	r1, [r3, #5]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f80:	9202      	str	r2, [sp, #8]
 8008f82:	2200      	movs	r2, #0
 8008f84:	9201      	str	r2, [sp, #4]
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 f8c9 	bl	800a124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f92:	e173      	b.n	800927c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	f040 8170 	bne.w	800927c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d903      	bls.n	8008fbe <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	220d      	movs	r2, #13
 8008fba:	701a      	strb	r2, [r3, #0]
      break;
 8008fbc:	e15e      	b.n	800927c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	795b      	ldrb	r3, [r3, #5]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 f8fd 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	791b      	ldrb	r3, [r3, #4]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 f8f7 	bl	800a1c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	701a      	strb	r2, [r3, #0]
      break;
 8008fdc:	e14e      	b.n	800927c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008fde:	2112      	movs	r1, #18
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f9ef 	bl	80093c4 <USBH_Get_DevDesc>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ff6:	e143      	b.n	8009280 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	f040 8140 	bne.w	8009280 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009006:	3301      	adds	r3, #1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009016:	2b03      	cmp	r3, #3
 8009018:	d903      	bls.n	8009022 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	220d      	movs	r2, #13
 800901e:	701a      	strb	r2, [r3, #0]
      break;
 8009020:	e12e      	b.n	8009280 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	795b      	ldrb	r3, [r3, #5]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 f8cb 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	791b      	ldrb	r3, [r3, #4]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 f8c5 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	701a      	strb	r2, [r3, #0]
      break;
 8009046:	e11b      	b.n	8009280 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009048:	2101      	movs	r1, #1
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa79 	bl	8009542 <USBH_SetAddress>
 8009050:	4603      	mov	r3, r0
 8009052:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d130      	bne.n	80090bc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800905a:	2002      	movs	r0, #2
 800905c:	f001 fbab 	bl	800a7b6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2203      	movs	r2, #3
 800906c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7919      	ldrb	r1, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009082:	9202      	str	r2, [sp, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	9201      	str	r2, [sp, #4]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	4603      	mov	r3, r0
 800908c:	2280      	movs	r2, #128	@ 0x80
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 f848 	bl	800a124 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7959      	ldrb	r1, [r3, #5]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090a8:	9202      	str	r2, [sp, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	9201      	str	r2, [sp, #4]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	4603      	mov	r3, r0
 80090b2:	2200      	movs	r2, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f835 	bl	800a124 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090ba:	e0e3      	b.n	8009284 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b03      	cmp	r3, #3
 80090c0:	f040 80e0 	bne.w	8009284 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	220d      	movs	r2, #13
 80090c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	705a      	strb	r2, [r3, #1]
      break;
 80090d0:	e0d8      	b.n	8009284 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80090d2:	2109      	movs	r1, #9
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9a1 	bl	800941c <USBH_Get_CfgDesc>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d103      	bne.n	80090ec <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2204      	movs	r2, #4
 80090e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090ea:	e0cd      	b.n	8009288 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	f040 80ca 	bne.w	8009288 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090fa:	3301      	adds	r3, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800910a:	2b03      	cmp	r3, #3
 800910c:	d903      	bls.n	8009116 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	220d      	movs	r2, #13
 8009112:	701a      	strb	r2, [r3, #0]
      break;
 8009114:	e0b8      	b.n	8009288 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	795b      	ldrb	r3, [r3, #5]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 f851 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	791b      	ldrb	r3, [r3, #4]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f84b 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
      break;
 800913a:	e0a5      	b.n	8009288 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f969 	bl	800941c <USBH_Get_CfgDesc>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2205      	movs	r2, #5
 8009158:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800915a:	e097      	b.n	800928c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	2b03      	cmp	r3, #3
 8009160:	f040 8094 	bne.w	800928c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800916a:	3301      	adds	r3, #1
 800916c:	b2da      	uxtb	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800917a:	2b03      	cmp	r3, #3
 800917c:	d903      	bls.n	8009186 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	220d      	movs	r2, #13
 8009182:	701a      	strb	r2, [r3, #0]
      break;
 8009184:	e082      	b.n	800928c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	795b      	ldrb	r3, [r3, #5]
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 f819 	bl	800a1c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	791b      	ldrb	r3, [r3, #4]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 f813 	bl	800a1c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
      break;
 80091aa:	e06f      	b.n	800928c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d019      	beq.n	80091ea <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80091c2:	23ff      	movs	r3, #255	@ 0xff
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f953 	bl	8009470 <USBH_Get_StringDesc>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2206      	movs	r2, #6
 80091d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091da:	e059      	b.n	8009290 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d156      	bne.n	8009290 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2206      	movs	r2, #6
 80091e6:	705a      	strb	r2, [r3, #1]
      break;
 80091e8:	e052      	b.n	8009290 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2206      	movs	r2, #6
 80091ee:	705a      	strb	r2, [r3, #1]
      break;
 80091f0:	e04e      	b.n	8009290 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d019      	beq.n	8009230 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009208:	23ff      	movs	r3, #255	@ 0xff
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f930 	bl	8009470 <USBH_Get_StringDesc>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2207      	movs	r2, #7
 800921e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009220:	e038      	b.n	8009294 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	2b03      	cmp	r3, #3
 8009226:	d135      	bne.n	8009294 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2207      	movs	r2, #7
 800922c:	705a      	strb	r2, [r3, #1]
      break;
 800922e:	e031      	b.n	8009294 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2207      	movs	r2, #7
 8009234:	705a      	strb	r2, [r3, #1]
      break;
 8009236:	e02d      	b.n	8009294 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800923e:	2b00      	cmp	r3, #0
 8009240:	d017      	beq.n	8009272 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800924e:	23ff      	movs	r3, #255	@ 0xff
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f90d 	bl	8009470 <USBH_Get_StringDesc>
 8009256:	4603      	mov	r3, r0
 8009258:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009264:	e018      	b.n	8009298 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d115      	bne.n	8009298 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
      break;
 8009270:	e012      	b.n	8009298 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
      break;
 8009276:	e00f      	b.n	8009298 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009278:	bf00      	nop
 800927a:	e00e      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 800927c:	bf00      	nop
 800927e:	e00c      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 8009280:	bf00      	nop
 8009282:	e00a      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 8009284:	bf00      	nop
 8009286:	e008      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 8009288:	bf00      	nop
 800928a:	e006      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 800928c:	bf00      	nop
 800928e:	e004      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 8009290:	bf00      	nop
 8009292:	e002      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 8009294:	bf00      	nop
 8009296:	e000      	b.n	800929a <USBH_HandleEnum+0x3b6>
      break;
 8009298:	bf00      	nop
  }
  return Status;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f804 	bl	80092e6 <USBH_HandleSof>
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b0b      	cmp	r3, #11
 80092f6:	d10a      	bne.n	800930e <USBH_HandleSof+0x28>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
  }
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009326:	bf00      	nop
}
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009342:	bf00      	nop
}
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 f8be 	bl	800a51e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	791b      	ldrb	r3, [r3, #4]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 ff0b 	bl	800a1c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	795b      	ldrb	r3, [r3, #5]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 ff05 	bl	800a1c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	460b      	mov	r3, r1
 80093ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80093d0:	887b      	ldrh	r3, [r7, #2]
 80093d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d6:	d901      	bls.n	80093dc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093d8:	2303      	movs	r3, #3
 80093da:	e01b      	b.n	8009414 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80093e2:	887b      	ldrh	r3, [r7, #2]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4613      	mov	r3, r2
 80093e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093ec:	2100      	movs	r1, #0
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f872 	bl	80094d8 <USBH_GetDescriptor>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009404:	887a      	ldrh	r2, [r7, #2]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f929 	bl	8009660 <USBH_ParseDevDesc>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af02      	add	r7, sp, #8
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	331c      	adds	r3, #28
 800942c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800942e:	887b      	ldrh	r3, [r7, #2]
 8009430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009434:	d901      	bls.n	800943a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009436:	2303      	movs	r3, #3
 8009438:	e016      	b.n	8009468 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800943a:	887b      	ldrh	r3, [r7, #2]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009444:	2100      	movs	r1, #0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f846 	bl	80094d8 <USBH_GetDescriptor>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009456:	887b      	ldrh	r3, [r7, #2]
 8009458:	461a      	mov	r2, r3
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9af 	bl	80097c0 <USBH_ParseCfgDesc>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	461a      	mov	r2, r3
 800947c:	460b      	mov	r3, r1
 800947e:	72fb      	strb	r3, [r7, #11]
 8009480:	4613      	mov	r3, r2
 8009482:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009484:	893b      	ldrh	r3, [r7, #8]
 8009486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800948a:	d802      	bhi.n	8009492 <USBH_Get_StringDesc+0x22>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009492:	2303      	movs	r3, #3
 8009494:	e01c      	b.n	80094d0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009496:	7afb      	ldrb	r3, [r7, #11]
 8009498:	b29b      	uxth	r3, r3
 800949a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800949e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80094a6:	893b      	ldrh	r3, [r7, #8]
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	460b      	mov	r3, r1
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f812 	bl	80094d8 <USBH_GetDescriptor>
 80094b4:	4603      	mov	r3, r0
 80094b6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d107      	bne.n	80094ce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094c4:	893a      	ldrh	r2, [r7, #8]
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fb8d 	bl	8009be8 <USBH_ParseStringDesc>
  }

  return status;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607b      	str	r3, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	72fb      	strb	r3, [r7, #11]
 80094e6:	4613      	mov	r3, r2
 80094e8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	789b      	ldrb	r3, [r3, #2]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d11c      	bne.n	800952c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80094f2:	7afb      	ldrb	r3, [r7, #11]
 80094f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2206      	movs	r2, #6
 8009502:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	893a      	ldrh	r2, [r7, #8]
 8009508:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009514:	d104      	bne.n	8009520 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f240 4209 	movw	r2, #1033	@ 0x409
 800951c:	829a      	strh	r2, [r3, #20]
 800951e:	e002      	b.n	8009526 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8b3a      	ldrh	r2, [r7, #24]
 800952a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800952c:	8b3b      	ldrh	r3, [r7, #24]
 800952e:	461a      	mov	r2, r3
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fba5 	bl	8009c82 <USBH_CtlReq>
 8009538:	4603      	mov	r3, r0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	789b      	ldrb	r3, [r3, #2]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d10f      	bne.n	8009576 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2205      	movs	r2, #5
 8009560:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	b29a      	uxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009576:	2200      	movs	r2, #0
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb81 	bl	8009c82 <USBH_CtlReq>
 8009580:	4603      	mov	r3, r0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	789b      	ldrb	r3, [r3, #2]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d10e      	bne.n	80095bc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2209      	movs	r2, #9
 80095a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	887a      	ldrh	r2, [r7, #2]
 80095ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095bc:	2200      	movs	r2, #0
 80095be:	2100      	movs	r1, #0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fb5e 	bl	8009c82 <USBH_CtlReq>
 80095c6:	4603      	mov	r3, r0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	789b      	ldrb	r3, [r3, #2]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d10f      	bne.n	8009604 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2203      	movs	r2, #3
 80095ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fb3a 	bl	8009c82 <USBH_CtlReq>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	789b      	ldrb	r3, [r3, #2]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d10f      	bne.n	800964c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800964c:	2200      	movs	r2, #0
 800964e:	2100      	movs	r1, #0
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fb16 	bl	8009c82 <USBH_CtlReq>
 8009656:	4603      	mov	r3, r0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009674:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009680:	2302      	movs	r3, #2
 8009682:	e094      	b.n	80097ae <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	785a      	ldrb	r2, [r3, #1]
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	3302      	adds	r3, #2
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	3303      	adds	r3, #3
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	021b      	lsls	r3, r3, #8
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	4313      	orrs	r3, r2
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	791a      	ldrb	r2, [r3, #4]
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	795a      	ldrb	r2, [r3, #5]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	799a      	ldrb	r2, [r3, #6]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	79da      	ldrb	r2, [r3, #7]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d11b      	bne.n	800971a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	79db      	ldrb	r3, [r3, #7]
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	dc0f      	bgt.n	800970a <USBH_ParseDevDesc+0xaa>
 80096ea:	2b08      	cmp	r3, #8
 80096ec:	db0f      	blt.n	800970e <USBH_ParseDevDesc+0xae>
 80096ee:	3b08      	subs	r3, #8
 80096f0:	4a32      	ldr	r2, [pc, #200]	@ (80097bc <USBH_ParseDevDesc+0x15c>)
 80096f2:	fa22 f303 	lsr.w	r3, r2, r3
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	bf14      	ite	ne
 80096fe:	2301      	movne	r3, #1
 8009700:	2300      	moveq	r3, #0
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d106      	bne.n	8009716 <USBH_ParseDevDesc+0xb6>
 8009708:	e001      	b.n	800970e <USBH_ParseDevDesc+0xae>
 800970a:	2b40      	cmp	r3, #64	@ 0x40
 800970c:	d003      	beq.n	8009716 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	2208      	movs	r2, #8
 8009712:	71da      	strb	r2, [r3, #7]
        break;
 8009714:	e000      	b.n	8009718 <USBH_ParseDevDesc+0xb8>
        break;
 8009716:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009718:	e00e      	b.n	8009738 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009720:	2b02      	cmp	r3, #2
 8009722:	d107      	bne.n	8009734 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	79db      	ldrb	r3, [r3, #7]
 8009728:	2b08      	cmp	r3, #8
 800972a:	d005      	beq.n	8009738 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2208      	movs	r2, #8
 8009730:	71da      	strb	r2, [r3, #7]
 8009732:	e001      	b.n	8009738 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009734:	2303      	movs	r3, #3
 8009736:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009738:	88fb      	ldrh	r3, [r7, #6]
 800973a:	2b08      	cmp	r3, #8
 800973c:	d936      	bls.n	80097ac <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	3308      	adds	r3, #8
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	3309      	adds	r3, #9
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	b29b      	uxth	r3, r3
 8009750:	4313      	orrs	r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	330a      	adds	r3, #10
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	330b      	adds	r3, #11
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	021b      	lsls	r3, r3, #8
 8009768:	b29b      	uxth	r3, r3
 800976a:	4313      	orrs	r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	330c      	adds	r3, #12
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	330d      	adds	r3, #13
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	b29b      	uxth	r3, r3
 8009784:	4313      	orrs	r3, r2
 8009786:	b29a      	uxth	r2, r3
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	7b9a      	ldrb	r2, [r3, #14]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	7bda      	ldrb	r2, [r3, #15]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	7c1a      	ldrb	r2, [r3, #16]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	7c5a      	ldrb	r2, [r3, #17]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	01000101 	.word	0x01000101

080097c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08c      	sub	sp, #48	@ 0x30
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80097d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80097ee:	2302      	movs	r3, #2
 80097f0:	e0da      	b.n	80099a8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80097f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b09      	cmp	r3, #9
 80097fc:	d002      	beq.n	8009804 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	2209      	movs	r2, #9
 8009802:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	781a      	ldrb	r2, [r3, #0]
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	785a      	ldrb	r2, [r3, #1]
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	3302      	adds	r3, #2
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	3303      	adds	r3, #3
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	b29b      	uxth	r3, r3
 8009826:	4313      	orrs	r3, r2
 8009828:	b29b      	uxth	r3, r3
 800982a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800982e:	bf28      	it	cs
 8009830:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009834:	b29a      	uxth	r2, r3
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	791a      	ldrb	r2, [r3, #4]
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	795a      	ldrb	r2, [r3, #5]
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	799a      	ldrb	r2, [r3, #6]
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	79da      	ldrb	r2, [r3, #7]
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	7a1a      	ldrb	r2, [r3, #8]
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009862:	88fb      	ldrh	r3, [r7, #6]
 8009864:	2b09      	cmp	r3, #9
 8009866:	f240 809d 	bls.w	80099a4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800986a:	2309      	movs	r3, #9
 800986c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009872:	e081      	b.n	8009978 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009874:	f107 0316 	add.w	r3, r7, #22
 8009878:	4619      	mov	r1, r3
 800987a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800987c:	f000 f9e7 	bl	8009c4e <USBH_GetNextDesc>
 8009880:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b04      	cmp	r3, #4
 8009888:	d176      	bne.n	8009978 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b09      	cmp	r3, #9
 8009890:	d002      	beq.n	8009898 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	2209      	movs	r2, #9
 8009896:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800989c:	221a      	movs	r2, #26
 800989e:	fb02 f303 	mul.w	r3, r2, r3
 80098a2:	3308      	adds	r3, #8
 80098a4:	6a3a      	ldr	r2, [r7, #32]
 80098a6:	4413      	add	r3, r2
 80098a8:	3302      	adds	r3, #2
 80098aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ae:	69f8      	ldr	r0, [r7, #28]
 80098b0:	f000 f87e 	bl	80099b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098be:	e043      	b.n	8009948 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098c0:	f107 0316 	add.w	r3, r7, #22
 80098c4:	4619      	mov	r1, r3
 80098c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098c8:	f000 f9c1 	bl	8009c4e <USBH_GetNextDesc>
 80098cc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d138      	bne.n	8009948 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d113      	bne.n	8009906 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d003      	beq.n	80098ee <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	799b      	ldrb	r3, [r3, #6]
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d10b      	bne.n	8009906 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	79db      	ldrb	r3, [r3, #7]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <USBH_ParseCfgDesc+0x14e>
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b09      	cmp	r3, #9
 80098fc:	d007      	beq.n	800990e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	2209      	movs	r2, #9
 8009902:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009904:	e003      	b.n	800990e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	2207      	movs	r2, #7
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e000      	b.n	8009910 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800990e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009914:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009918:	3201      	adds	r2, #1
 800991a:	00d2      	lsls	r2, r2, #3
 800991c:	211a      	movs	r1, #26
 800991e:	fb01 f303 	mul.w	r3, r1, r3
 8009922:	4413      	add	r3, r2
 8009924:	3308      	adds	r3, #8
 8009926:	6a3a      	ldr	r2, [r7, #32]
 8009928:	4413      	add	r3, r2
 800992a:	3304      	adds	r3, #4
 800992c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800992e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009930:	69b9      	ldr	r1, [r7, #24]
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 f870 	bl	8009a18 <USBH_ParseEPDesc>
 8009938:	4603      	mov	r3, r0
 800993a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800993e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009942:	3301      	adds	r3, #1
 8009944:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	791b      	ldrb	r3, [r3, #4]
 800994c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009950:	429a      	cmp	r2, r3
 8009952:	d204      	bcs.n	800995e <USBH_ParseCfgDesc+0x19e>
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	885a      	ldrh	r2, [r3, #2]
 8009958:	8afb      	ldrh	r3, [r7, #22]
 800995a:	429a      	cmp	r2, r3
 800995c:	d8b0      	bhi.n	80098c0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	791b      	ldrb	r3, [r3, #4]
 8009962:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009966:	429a      	cmp	r2, r3
 8009968:	d201      	bcs.n	800996e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800996a:	2303      	movs	r3, #3
 800996c:	e01c      	b.n	80099a8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800996e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009972:	3301      	adds	r3, #1
 8009974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800997c:	2b01      	cmp	r3, #1
 800997e:	d805      	bhi.n	800998c <USBH_ParseCfgDesc+0x1cc>
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	885a      	ldrh	r2, [r3, #2]
 8009984:	8afb      	ldrh	r3, [r7, #22]
 8009986:	429a      	cmp	r2, r3
 8009988:	f63f af74 	bhi.w	8009874 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	791b      	ldrb	r3, [r3, #4]
 8009990:	2b02      	cmp	r3, #2
 8009992:	bf28      	it	cs
 8009994:	2302      	movcs	r3, #2
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800999c:	429a      	cmp	r2, r3
 800999e:	d201      	bcs.n	80099a4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e001      	b.n	80099a8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80099a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3730      	adds	r7, #48	@ 0x30
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781a      	ldrb	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	785a      	ldrb	r2, [r3, #1]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	789a      	ldrb	r2, [r3, #2]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	78da      	ldrb	r2, [r3, #3]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	3304      	adds	r3, #4
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	bf28      	it	cs
 80099e4:	2302      	movcs	r3, #2
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	795a      	ldrb	r2, [r3, #5]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	799a      	ldrb	r2, [r3, #6]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	79da      	ldrb	r2, [r3, #7]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	7a1a      	ldrb	r2, [r3, #8]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	721a      	strb	r2, [r3, #8]
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	785a      	ldrb	r2, [r3, #1]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	789a      	ldrb	r2, [r3, #2]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	78da      	ldrb	r2, [r3, #3]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3305      	adds	r3, #5
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	799a      	ldrb	r2, [r3, #6]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d009      	beq.n	8009a86 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a7a:	d804      	bhi.n	8009a86 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a84:	d901      	bls.n	8009a8a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009a86:	2303      	movs	r3, #3
 8009a88:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d136      	bne.n	8009b02 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	78db      	ldrb	r3, [r3, #3]
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d108      	bne.n	8009ab2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	889b      	ldrh	r3, [r3, #4]
 8009aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aa8:	f240 8097 	bls.w	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009aac:	2303      	movs	r3, #3
 8009aae:	75fb      	strb	r3, [r7, #23]
 8009ab0:	e093      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	f003 0303 	and.w	r3, r3, #3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d107      	bne.n	8009ace <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	889b      	ldrh	r3, [r3, #4]
 8009ac2:	2b40      	cmp	r3, #64	@ 0x40
 8009ac4:	f240 8089 	bls.w	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	75fb      	strb	r3, [r7, #23]
 8009acc:	e085      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	78db      	ldrb	r3, [r3, #3]
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d005      	beq.n	8009ae6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d10a      	bne.n	8009afc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	799b      	ldrb	r3, [r3, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <USBH_ParseEPDesc+0xde>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	799b      	ldrb	r3, [r3, #6]
 8009af2:	2b10      	cmp	r3, #16
 8009af4:	d970      	bls.n	8009bd8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009af6:	2303      	movs	r3, #3
 8009af8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009afa:	e06d      	b.n	8009bd8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009afc:	2303      	movs	r3, #3
 8009afe:	75fb      	strb	r3, [r7, #23]
 8009b00:	e06b      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d13c      	bne.n	8009b86 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	78db      	ldrb	r3, [r3, #3]
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d005      	beq.n	8009b24 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	78db      	ldrb	r3, [r3, #3]
 8009b1c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	889b      	ldrh	r3, [r3, #4]
 8009b28:	2b40      	cmp	r3, #64	@ 0x40
 8009b2a:	d956      	bls.n	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b30:	e053      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	78db      	ldrb	r3, [r3, #3]
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d10e      	bne.n	8009b5c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	799b      	ldrb	r3, [r3, #6]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d007      	beq.n	8009b56 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009b4a:	2b10      	cmp	r3, #16
 8009b4c:	d803      	bhi.n	8009b56 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009b52:	2b40      	cmp	r3, #64	@ 0x40
 8009b54:	d941      	bls.n	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b56:	2303      	movs	r3, #3
 8009b58:	75fb      	strb	r3, [r7, #23]
 8009b5a:	e03e      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	78db      	ldrb	r3, [r3, #3]
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d10b      	bne.n	8009b80 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	799b      	ldrb	r3, [r3, #6]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <USBH_ParseEPDesc+0x162>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	889b      	ldrh	r3, [r3, #4]
 8009b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b78:	d32f      	bcc.n	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	75fb      	strb	r3, [r7, #23]
 8009b7e:	e02c      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b80:	2303      	movs	r3, #3
 8009b82:	75fb      	strb	r3, [r7, #23]
 8009b84:	e029      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d120      	bne.n	8009bd2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	78db      	ldrb	r3, [r3, #3]
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	889b      	ldrh	r3, [r3, #4]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d01a      	beq.n	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
 8009ba8:	e017      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	78db      	ldrb	r3, [r3, #3]
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d10a      	bne.n	8009bcc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	799b      	ldrb	r3, [r3, #6]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <USBH_ParseEPDesc+0x1ae>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	889b      	ldrh	r3, [r3, #4]
 8009bc2:	2b08      	cmp	r3, #8
 8009bc4:	d909      	bls.n	8009bda <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	75fb      	strb	r3, [r7, #23]
 8009bca:	e006      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	75fb      	strb	r3, [r7, #23]
 8009bd0:	e003      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	75fb      	strb	r3, [r7, #23]
 8009bd6:	e000      	b.n	8009bda <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bd8:	bf00      	nop
  }

  return status;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	371c      	adds	r7, #28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d120      	bne.n	8009c42 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	1e9a      	subs	r2, r3, #2
 8009c06:	88fb      	ldrh	r3, [r7, #6]
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	bf28      	it	cs
 8009c0c:	4613      	movcs	r3, r2
 8009c0e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3302      	adds	r3, #2
 8009c14:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c16:	2300      	movs	r3, #0
 8009c18:	82fb      	strh	r3, [r7, #22]
 8009c1a:	e00b      	b.n	8009c34 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c1c:	8afb      	ldrh	r3, [r7, #22]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4413      	add	r3, r2
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c2e:	8afb      	ldrh	r3, [r7, #22]
 8009c30:	3302      	adds	r3, #2
 8009c32:	82fb      	strh	r3, [r7, #22]
 8009c34:	8afa      	ldrh	r2, [r7, #22]
 8009c36:	8abb      	ldrh	r3, [r7, #20]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d3ef      	bcc.n	8009c1c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
  }
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	7812      	ldrb	r2, [r2, #0]
 8009c60:	4413      	add	r3, r2
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c90:	2301      	movs	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	789b      	ldrb	r3, [r3, #2]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d002      	beq.n	8009ca2 <USBH_CtlReq+0x20>
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d00f      	beq.n	8009cc0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009ca0:	e027      	b.n	8009cf2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	88fa      	ldrh	r2, [r7, #6]
 8009cac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbe:	e018      	b.n	8009cf2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f81b 	bl	8009cfc <USBH_HandleControl>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <USBH_CtlReq+0x54>
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d106      	bne.n	8009ce4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	761a      	strb	r2, [r3, #24]
      break;
 8009ce2:	e005      	b.n	8009cf0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d102      	bne.n	8009cf0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	709a      	strb	r2, [r3, #2]
      break;
 8009cf0:	bf00      	nop
  }
  return status;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d04:	2301      	movs	r3, #1
 8009d06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7e1b      	ldrb	r3, [r3, #24]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	2b0a      	cmp	r3, #10
 8009d14:	f200 8156 	bhi.w	8009fc4 <USBH_HandleControl+0x2c8>
 8009d18:	a201      	add	r2, pc, #4	@ (adr r2, 8009d20 <USBH_HandleControl+0x24>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009d4d 	.word	0x08009d4d
 8009d24:	08009d67 	.word	0x08009d67
 8009d28:	08009dd1 	.word	0x08009dd1
 8009d2c:	08009df7 	.word	0x08009df7
 8009d30:	08009e2f 	.word	0x08009e2f
 8009d34:	08009e59 	.word	0x08009e59
 8009d38:	08009eab 	.word	0x08009eab
 8009d3c:	08009ecd 	.word	0x08009ecd
 8009d40:	08009f09 	.word	0x08009f09
 8009d44:	08009f2f 	.word	0x08009f2f
 8009d48:	08009f6d 	.word	0x08009f6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f103 0110 	add.w	r1, r3, #16
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	795b      	ldrb	r3, [r3, #5]
 8009d56:	461a      	mov	r2, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f943 	bl	8009fe4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2202      	movs	r2, #2
 8009d62:	761a      	strb	r2, [r3, #24]
      break;
 8009d64:	e139      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	795b      	ldrb	r3, [r3, #5]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fcc5 	bl	800a6fc <USBH_LL_GetURBState>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d11e      	bne.n	8009dba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7c1b      	ldrb	r3, [r3, #16]
 8009d80:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8adb      	ldrh	r3, [r3, #22]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d8e:	7b7b      	ldrb	r3, [r7, #13]
 8009d90:	2b80      	cmp	r3, #128	@ 0x80
 8009d92:	d103      	bne.n	8009d9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2203      	movs	r2, #3
 8009d98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d9a:	e115      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2205      	movs	r2, #5
 8009da0:	761a      	strb	r2, [r3, #24]
      break;
 8009da2:	e111      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009da4:	7b7b      	ldrb	r3, [r7, #13]
 8009da6:	2b80      	cmp	r3, #128	@ 0x80
 8009da8:	d103      	bne.n	8009db2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2209      	movs	r2, #9
 8009dae:	761a      	strb	r2, [r3, #24]
      break;
 8009db0:	e10a      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2207      	movs	r2, #7
 8009db6:	761a      	strb	r2, [r3, #24]
      break;
 8009db8:	e106      	b.n	8009fc8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d003      	beq.n	8009dc8 <USBH_HandleControl+0xcc>
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	f040 8100 	bne.w	8009fc8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	220b      	movs	r2, #11
 8009dcc:	761a      	strb	r2, [r3, #24]
      break;
 8009dce:	e0fb      	b.n	8009fc8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6899      	ldr	r1, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	899a      	ldrh	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	791b      	ldrb	r3, [r3, #4]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f93a 	bl	800a062 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2204      	movs	r2, #4
 8009df2:	761a      	strb	r2, [r3, #24]
      break;
 8009df4:	e0f1      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	791b      	ldrb	r3, [r3, #4]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc7d 	bl	800a6fc <USBH_LL_GetURBState>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d102      	bne.n	8009e12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2209      	movs	r2, #9
 8009e10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	2b05      	cmp	r3, #5
 8009e16:	d102      	bne.n	8009e1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e1c:	e0d6      	b.n	8009fcc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	f040 80d3 	bne.w	8009fcc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	220b      	movs	r2, #11
 8009e2a:	761a      	strb	r2, [r3, #24]
      break;
 8009e2c:	e0ce      	b.n	8009fcc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6899      	ldr	r1, [r3, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	899a      	ldrh	r2, [r3, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	795b      	ldrb	r3, [r3, #5]
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	9000      	str	r0, [sp, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8ea 	bl	800a018 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2206      	movs	r2, #6
 8009e54:	761a      	strb	r2, [r3, #24]
      break;
 8009e56:	e0c0      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	795b      	ldrb	r3, [r3, #5]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fc4c 	bl	800a6fc <USBH_LL_GetURBState>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d103      	bne.n	8009e76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2207      	movs	r2, #7
 8009e72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e74:	e0ac      	b.n	8009fd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b05      	cmp	r3, #5
 8009e7a:	d105      	bne.n	8009e88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	220c      	movs	r2, #12
 8009e80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e82:	2303      	movs	r3, #3
 8009e84:	73fb      	strb	r3, [r7, #15]
      break;
 8009e86:	e0a3      	b.n	8009fd0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d103      	bne.n	8009e96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2205      	movs	r2, #5
 8009e92:	761a      	strb	r2, [r3, #24]
      break;
 8009e94:	e09c      	b.n	8009fd0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	f040 8099 	bne.w	8009fd0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	220b      	movs	r2, #11
 8009ea2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea8:	e092      	b.n	8009fd0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	791b      	ldrb	r3, [r3, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f8d5 	bl	800a062 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2208      	movs	r2, #8
 8009ec8:	761a      	strb	r2, [r3, #24]

      break;
 8009eca:	e086      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	791b      	ldrb	r3, [r3, #4]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fc12 	bl	800a6fc <USBH_LL_GetURBState>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d105      	bne.n	8009eee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	220d      	movs	r2, #13
 8009ee6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eec:	e072      	b.n	8009fd4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d103      	bne.n	8009efc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	220b      	movs	r2, #11
 8009ef8:	761a      	strb	r2, [r3, #24]
      break;
 8009efa:	e06b      	b.n	8009fd4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d168      	bne.n	8009fd4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f02:	2303      	movs	r3, #3
 8009f04:	73fb      	strb	r3, [r7, #15]
      break;
 8009f06:	e065      	b.n	8009fd4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	795b      	ldrb	r3, [r3, #5]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	9200      	str	r2, [sp, #0]
 8009f10:	2200      	movs	r2, #0
 8009f12:	2100      	movs	r1, #0
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f87f 	bl	800a018 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	220a      	movs	r2, #10
 8009f2a:	761a      	strb	r2, [r3, #24]
      break;
 8009f2c:	e055      	b.n	8009fda <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	795b      	ldrb	r3, [r3, #5]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbe1 	bl	800a6fc <USBH_LL_GetURBState>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d105      	bne.n	8009f50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	220d      	movs	r2, #13
 8009f4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f4e:	e043      	b.n	8009fd8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d103      	bne.n	8009f5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2209      	movs	r2, #9
 8009f5a:	761a      	strb	r2, [r3, #24]
      break;
 8009f5c:	e03c      	b.n	8009fd8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d139      	bne.n	8009fd8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	220b      	movs	r2, #11
 8009f68:	761a      	strb	r2, [r3, #24]
      break;
 8009f6a:	e035      	b.n	8009fd8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7e5b      	ldrb	r3, [r3, #25]
 8009f70:	3301      	adds	r3, #1
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	765a      	strb	r2, [r3, #25]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7e5b      	ldrb	r3, [r3, #25]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d806      	bhi.n	8009f8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f8c:	e025      	b.n	8009fda <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f94:	2106      	movs	r1, #6
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	795b      	ldrb	r3, [r3, #5]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f90c 	bl	800a1c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	791b      	ldrb	r3, [r3, #4]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f906 	bl	800a1c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc2:	e00a      	b.n	8009fda <USBH_HandleControl+0x2de>

    default:
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e008      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fc8:	bf00      	nop
 8009fca:	e006      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fcc:	bf00      	nop
 8009fce:	e004      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e002      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <USBH_HandleControl+0x2de>
      break;
 8009fd8:	bf00      	nop
  }

  return status;
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af04      	add	r7, sp, #16
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ff2:	79f9      	ldrb	r1, [r7, #7]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	2200      	movs	r2, #0
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fb46 	bl	800a69a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4611      	mov	r1, r2
 800a024:	461a      	mov	r2, r3
 800a026:	460b      	mov	r3, r1
 800a028:	80fb      	strh	r3, [r7, #6]
 800a02a:	4613      	mov	r3, r2
 800a02c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a03c:	7979      	ldrb	r1, [r7, #5]
 800a03e:	7e3b      	ldrb	r3, [r7, #24]
 800a040:	9303      	str	r3, [sp, #12]
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	2301      	movs	r3, #1
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	2300      	movs	r3, #0
 800a050:	2200      	movs	r2, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fb21 	bl	800a69a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b088      	sub	sp, #32
 800a066:	af04      	add	r7, sp, #16
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	4611      	mov	r1, r2
 800a06e:	461a      	mov	r2, r3
 800a070:	460b      	mov	r3, r1
 800a072:	80fb      	strh	r3, [r7, #6]
 800a074:	4613      	mov	r3, r2
 800a076:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a078:	7979      	ldrb	r1, [r7, #5]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9303      	str	r3, [sp, #12]
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	9302      	str	r3, [sp, #8]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	2301      	movs	r3, #1
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	2300      	movs	r3, #0
 800a08c:	2201      	movs	r2, #1
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fb03 	bl	800a69a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a094:	2300      	movs	r3, #0

}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b088      	sub	sp, #32
 800a0a2:	af04      	add	r7, sp, #16
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	80fb      	strh	r3, [r7, #6]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0c2:	7979      	ldrb	r1, [r7, #5]
 800a0c4:	7e3b      	ldrb	r3, [r7, #24]
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	88fb      	ldrh	r3, [r7, #6]
 800a0ca:	9302      	str	r3, [sp, #8]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 fade 	bl	800a69a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	80fb      	strh	r3, [r7, #6]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0fe:	7979      	ldrb	r1, [r7, #5]
 800a100:	2300      	movs	r3, #0
 800a102:	9303      	str	r3, [sp, #12]
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	9302      	str	r3, [sp, #8]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	2301      	movs	r3, #1
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	2302      	movs	r3, #2
 800a112:	2201      	movs	r2, #1
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 fac0 	bl	800a69a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af04      	add	r7, sp, #16
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	4608      	mov	r0, r1
 800a12e:	4611      	mov	r1, r2
 800a130:	461a      	mov	r2, r3
 800a132:	4603      	mov	r3, r0
 800a134:	70fb      	strb	r3, [r7, #3]
 800a136:	460b      	mov	r3, r1
 800a138:	70bb      	strb	r3, [r7, #2]
 800a13a:	4613      	mov	r3, r2
 800a13c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a13e:	7878      	ldrb	r0, [r7, #1]
 800a140:	78ba      	ldrb	r2, [r7, #2]
 800a142:	78f9      	ldrb	r1, [r7, #3]
 800a144:	8b3b      	ldrh	r3, [r7, #24]
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	7d3b      	ldrb	r3, [r7, #20]
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	7c3b      	ldrb	r3, [r7, #16]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa53 	bl	800a5fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa72 	bl	800a65c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f836 	bl	800a200 <USBH_GetFreePipe>
 800a194:	4603      	mov	r3, r0
 800a196:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a198:	89fb      	ldrh	r3, [r7, #14]
 800a19a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00a      	beq.n	800a1b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	89fb      	ldrh	r3, [r7, #14]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	33e0      	adds	r3, #224	@ 0xe0
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a1b8:	89fb      	ldrh	r3, [r7, #14]
 800a1ba:	b2db      	uxtb	r3, r3
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d80d      	bhi.n	800a1f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	33e0      	adds	r3, #224	@ 0xe0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	33e0      	adds	r3, #224	@ 0xe0
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
 800a210:	e00f      	b.n	800a232 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	33e0      	adds	r3, #224	@ 0xe0
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	e007      	b.n	800a23c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	3301      	adds	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
 800a232:	7bfb      	ldrb	r3, [r7, #15]
 800a234:	2b0f      	cmp	r3, #15
 800a236:	d9ec      	bls.n	800a212 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a238:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a24c:	2201      	movs	r2, #1
 800a24e:	490e      	ldr	r1, [pc, #56]	@ (800a288 <MX_USB_HOST_Init+0x40>)
 800a250:	480e      	ldr	r0, [pc, #56]	@ (800a28c <MX_USB_HOST_Init+0x44>)
 800a252:	f7fe fb15 	bl	8008880 <USBH_Init>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a25c:	f7f7 f93c 	bl	80014d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a260:	490b      	ldr	r1, [pc, #44]	@ (800a290 <MX_USB_HOST_Init+0x48>)
 800a262:	480a      	ldr	r0, [pc, #40]	@ (800a28c <MX_USB_HOST_Init+0x44>)
 800a264:	f7fe fbb9 	bl	80089da <USBH_RegisterClass>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a26e:	f7f7 f933 	bl	80014d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a272:	4806      	ldr	r0, [pc, #24]	@ (800a28c <MX_USB_HOST_Init+0x44>)
 800a274:	f7fe fc3d 	bl	8008af2 <USBH_Start>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a27e:	f7f7 f92b 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	0800a2a9 	.word	0x0800a2a9
 800a28c:	20000360 	.word	0x20000360
 800a290:	2000000c 	.word	0x2000000c

0800a294 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a298:	4802      	ldr	r0, [pc, #8]	@ (800a2a4 <MX_USB_HOST_Process+0x10>)
 800a29a:	f7fe fc3b 	bl	8008b14 <USBH_Process>
}
 800a29e:	bf00      	nop
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000360 	.word	0x20000360

0800a2a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d819      	bhi.n	800a2f0 <USBH_UserProcess+0x48>
 800a2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c4 <USBH_UserProcess+0x1c>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a2f1 	.word	0x0800a2f1
 800a2c8:	0800a2e1 	.word	0x0800a2e1
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a2e9 	.word	0x0800a2e9
 800a2d4:	0800a2d9 	.word	0x0800a2d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2d8:	4b09      	ldr	r3, [pc, #36]	@ (800a300 <USBH_UserProcess+0x58>)
 800a2da:	2203      	movs	r2, #3
 800a2dc:	701a      	strb	r2, [r3, #0]
  break;
 800a2de:	e008      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2e0:	4b07      	ldr	r3, [pc, #28]	@ (800a300 <USBH_UserProcess+0x58>)
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	701a      	strb	r2, [r3, #0]
  break;
 800a2e6:	e004      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a2e8:	4b05      	ldr	r3, [pc, #20]	@ (800a300 <USBH_UserProcess+0x58>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	701a      	strb	r2, [r3, #0]
  break;
 800a2ee:	e000      	b.n	800a2f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a2f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20000738 	.word	0x20000738

0800a304 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	@ 0x28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a30c:	f107 0314 	add.w	r3, r7, #20
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	609a      	str	r2, [r3, #8]
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a324:	d147      	bne.n	800a3b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	4b25      	ldr	r3, [pc, #148]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a32e:	4a24      	ldr	r2, [pc, #144]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a330:	f043 0301 	orr.w	r3, r3, #1
 800a334:	6313      	str	r3, [r2, #48]	@ 0x30
 800a336:	4b22      	ldr	r3, [pc, #136]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a348:	2300      	movs	r3, #0
 800a34a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a350:	f107 0314 	add.w	r3, r7, #20
 800a354:	4619      	mov	r1, r3
 800a356:	481b      	ldr	r0, [pc, #108]	@ (800a3c4 <HAL_HCD_MspInit+0xc0>)
 800a358:	f7f7 fe5e 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a35c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a362:	2302      	movs	r3, #2
 800a364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a36a:	2300      	movs	r3, #0
 800a36c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36e:	230a      	movs	r3, #10
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a372:	f107 0314 	add.w	r3, r7, #20
 800a376:	4619      	mov	r1, r3
 800a378:	4812      	ldr	r0, [pc, #72]	@ (800a3c4 <HAL_HCD_MspInit+0xc0>)
 800a37a:	f7f7 fe4d 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37e:	4b10      	ldr	r3, [pc, #64]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a382:	4a0f      	ldr	r2, [pc, #60]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a388:	6353      	str	r3, [r2, #52]	@ 0x34
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a392:	4a0b      	ldr	r2, [pc, #44]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a398:	6453      	str	r3, [r2, #68]	@ 0x44
 800a39a:	4b09      	ldr	r3, [pc, #36]	@ (800a3c0 <HAL_HCD_MspInit+0xbc>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a39e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	2043      	movs	r0, #67	@ 0x43
 800a3ac:	f7f7 fdfd 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3b0:	2043      	movs	r0, #67	@ 0x43
 800a3b2:	f7f7 fe16 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3b6:	bf00      	nop
 800a3b8:	3728      	adds	r7, #40	@ 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	40023800 	.word	0x40023800
 800a3c4:	40020000 	.word	0x40020000

0800a3c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe ff73 	bl	80092c2 <USBH_LL_IncTimer>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe ffab 	bl	800934e <USBH_LL_Connect>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe ffb4 	bl	800937c <USBH_LL_Disconnect>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
 800a428:	4613      	mov	r3, r2
 800a42a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe ff65 	bl	8009316 <USBH_LL_PortEnabled>
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe ff65 	bl	8009332 <USBH_LL_PortDisabled>
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d12a      	bne.n	800a4d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a482:	4a18      	ldr	r2, [pc, #96]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a15      	ldr	r2, [pc, #84]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a48e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a492:	4b14      	ldr	r3, [pc, #80]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a494:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a498:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a49a:	4b12      	ldr	r3, [pc, #72]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a49c:	2208      	movs	r2, #8
 800a49e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4a0:	4b10      	ldr	r3, [pc, #64]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a4b8:	480a      	ldr	r0, [pc, #40]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a4ba:	f7f7 ff62 	bl	8002382 <HAL_HCD_Init>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4c4:	f7f7 f808 	bl	80014d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4c8:	4806      	ldr	r0, [pc, #24]	@ (800a4e4 <USBH_LL_Init+0x74>)
 800a4ca:	f7f8 fbc3 	bl	8002c54 <HAL_HCD_GetCurrentFrame>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7fe fee6 	bl	80092a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2000073c 	.word	0x2000073c

0800a4e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f8 fb30 	bl	8002b64 <HAL_HCD_Start>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f95e 	bl	800a7cc <USBH_Get_USB_Status>
 800a510:	4603      	mov	r3, r0
 800a512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a514:	7bbb      	ldrb	r3, [r7, #14]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a534:	4618      	mov	r0, r3
 800a536:	f7f8 fb38 	bl	8002baa <HAL_HCD_Stop>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f943 	bl	800a7cc <USBH_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a55c:	2301      	movs	r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a566:	4618      	mov	r0, r3
 800a568:	f7f8 fb82 	bl	8002c70 <HAL_HCD_GetCurrentSpeed>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d00c      	beq.n	800a58c <USBH_LL_GetSpeed+0x38>
 800a572:	2b02      	cmp	r3, #2
 800a574:	d80d      	bhi.n	800a592 <USBH_LL_GetSpeed+0x3e>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <USBH_LL_GetSpeed+0x2c>
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d003      	beq.n	800a586 <USBH_LL_GetSpeed+0x32>
 800a57e:	e008      	b.n	800a592 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
    break;
 800a584:	e008      	b.n	800a598 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
    break;
 800a58a:	e005      	b.n	800a598 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a58c:	2302      	movs	r3, #2
 800a58e:	73fb      	strb	r3, [r7, #15]
    break;
 800a590:	e002      	b.n	800a598 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a592:	2301      	movs	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]
    break;
 800a596:	bf00      	nop
  }
  return  speed;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7f8 fb13 	bl	8002be4 <HAL_HCD_ResetPort>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f901 	bl	800a7cc <USBH_Get_USB_Status>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f8 fb1b 	bl	8002c2a <HAL_HCD_HC_GetXferCount>
 800a5f4:	4603      	mov	r3, r0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5fe:	b590      	push	{r4, r7, lr}
 800a600:	b089      	sub	sp, #36	@ 0x24
 800a602:	af04      	add	r7, sp, #16
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	461a      	mov	r2, r3
 800a60c:	4603      	mov	r3, r0
 800a60e:	70fb      	strb	r3, [r7, #3]
 800a610:	460b      	mov	r3, r1
 800a612:	70bb      	strb	r3, [r7, #2]
 800a614:	4613      	mov	r3, r2
 800a616:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a626:	787c      	ldrb	r4, [r7, #1]
 800a628:	78ba      	ldrb	r2, [r7, #2]
 800a62a:	78f9      	ldrb	r1, [r7, #3]
 800a62c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	4623      	mov	r3, r4
 800a63e:	f7f7 ff07 	bl	8002450 <HAL_HCD_HC_Init>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f8bf 	bl	800a7cc <USBH_Get_USB_Status>
 800a64e:	4603      	mov	r3, r0
 800a650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a652:	7bbb      	ldrb	r3, [r7, #14]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}

0800a65c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a676:	78fa      	ldrb	r2, [r7, #3]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7f7 ffa0 	bl	80025c0 <HAL_HCD_HC_Halt>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f8a0 	bl	800a7cc <USBH_Get_USB_Status>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a690:	7bbb      	ldrb	r3, [r7, #14]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a69a:	b590      	push	{r4, r7, lr}
 800a69c:	b089      	sub	sp, #36	@ 0x24
 800a69e:	af04      	add	r7, sp, #16
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	70fb      	strb	r3, [r7, #3]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70bb      	strb	r3, [r7, #2]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a6c2:	787c      	ldrb	r4, [r7, #1]
 800a6c4:	78ba      	ldrb	r2, [r7, #2]
 800a6c6:	78f9      	ldrb	r1, [r7, #3]
 800a6c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a6cc:	9303      	str	r3, [sp, #12]
 800a6ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6d0:	9302      	str	r3, [sp, #8]
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4623      	mov	r3, r4
 800a6de:	f7f7 ff93 	bl	8002608 <HAL_HCD_HC_SubmitRequest>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 f86f 	bl	800a7cc <USBH_Get_USB_Status>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd90      	pop	{r4, r7, pc}

0800a6fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7f8 fa74 	bl	8002c00 <HAL_HCD_HC_GetURBState>
 800a718:	4603      	mov	r3, r0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a734:	2b01      	cmp	r3, #1
 800a736:	d103      	bne.n	800a740 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f872 	bl	800a824 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a740:	20c8      	movs	r0, #200	@ 0xc8
 800a742:	f7f7 fb33 	bl	8001dac <HAL_Delay>
  return USBH_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
 800a75c:	4613      	mov	r3, r2
 800a75e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a766:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a768:	78fa      	ldrb	r2, [r7, #3]
 800a76a:	68f9      	ldr	r1, [r7, #12]
 800a76c:	4613      	mov	r3, r2
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	440b      	add	r3, r1
 800a776:	3317      	adds	r3, #23
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00a      	beq.n	800a794 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a77e:	78fa      	ldrb	r2, [r7, #3]
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	4613      	mov	r3, r2
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	1a9b      	subs	r3, r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	440b      	add	r3, r1
 800a78c:	333c      	adds	r3, #60	@ 0x3c
 800a78e:	78ba      	ldrb	r2, [r7, #2]
 800a790:	701a      	strb	r2, [r3, #0]
 800a792:	e009      	b.n	800a7a8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	68f9      	ldr	r1, [r7, #12]
 800a798:	4613      	mov	r3, r2
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	1a9b      	subs	r3, r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	333d      	adds	r3, #61	@ 0x3d
 800a7a4:	78ba      	ldrb	r2, [r7, #2]
 800a7a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7f7 faf4 	bl	8001dac <HAL_Delay>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d817      	bhi.n	800a810 <USBH_Get_USB_Status+0x44>
 800a7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e8 <USBH_Get_USB_Status+0x1c>)
 800a7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e6:	bf00      	nop
 800a7e8:	0800a7f9 	.word	0x0800a7f9
 800a7ec:	0800a7ff 	.word	0x0800a7ff
 800a7f0:	0800a805 	.word	0x0800a805
 800a7f4:	0800a80b 	.word	0x0800a80b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fc:	e00b      	b.n	800a816 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7fe:	2302      	movs	r3, #2
 800a800:	73fb      	strb	r3, [r7, #15]
    break;
 800a802:	e008      	b.n	800a816 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
    break;
 800a808:	e005      	b.n	800a816 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a80a:	2302      	movs	r3, #2
 800a80c:	73fb      	strb	r3, [r7, #15]
    break;
 800a80e:	e002      	b.n	800a816 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a810:	2302      	movs	r3, #2
 800a812:	73fb      	strb	r3, [r7, #15]
    break;
 800a814:	bf00      	nop
  }
  return usb_status;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d102      	bne.n	800a83e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e001      	b.n	800a842 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a83e:	2301      	movs	r3, #1
 800a840:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	461a      	mov	r2, r3
 800a846:	2101      	movs	r1, #1
 800a848:	4803      	ldr	r0, [pc, #12]	@ (800a858 <MX_DriverVbusFS+0x34>)
 800a84a:	f7f7 fd81 	bl	8002350 <HAL_GPIO_WritePin>
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	40020800 	.word	0x40020800

0800a85c <__cvt>:
 800a85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	ec57 6b10 	vmov	r6, r7, d0
 800a864:	2f00      	cmp	r7, #0
 800a866:	460c      	mov	r4, r1
 800a868:	4619      	mov	r1, r3
 800a86a:	463b      	mov	r3, r7
 800a86c:	bfbb      	ittet	lt
 800a86e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a872:	461f      	movlt	r7, r3
 800a874:	2300      	movge	r3, #0
 800a876:	232d      	movlt	r3, #45	@ 0x2d
 800a878:	700b      	strb	r3, [r1, #0]
 800a87a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a87c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a880:	4691      	mov	r9, r2
 800a882:	f023 0820 	bic.w	r8, r3, #32
 800a886:	bfbc      	itt	lt
 800a888:	4632      	movlt	r2, r6
 800a88a:	4616      	movlt	r6, r2
 800a88c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a890:	d005      	beq.n	800a89e <__cvt+0x42>
 800a892:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a896:	d100      	bne.n	800a89a <__cvt+0x3e>
 800a898:	3401      	adds	r4, #1
 800a89a:	2102      	movs	r1, #2
 800a89c:	e000      	b.n	800a8a0 <__cvt+0x44>
 800a89e:	2103      	movs	r1, #3
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	ab02      	add	r3, sp, #8
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	ec47 6b10 	vmov	d0, r6, r7
 800a8ac:	4653      	mov	r3, sl
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	f001 ffda 	bl	800c868 <_dtoa_r>
 800a8b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	d119      	bne.n	800a8f0 <__cvt+0x94>
 800a8bc:	f019 0f01 	tst.w	r9, #1
 800a8c0:	d00e      	beq.n	800a8e0 <__cvt+0x84>
 800a8c2:	eb00 0904 	add.w	r9, r0, r4
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	f7f6 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8d2:	b108      	cbz	r0, 800a8d8 <__cvt+0x7c>
 800a8d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8d8:	2230      	movs	r2, #48	@ 0x30
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	454b      	cmp	r3, r9
 800a8de:	d31e      	bcc.n	800a91e <__cvt+0xc2>
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8e4:	1b5b      	subs	r3, r3, r5
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	b004      	add	sp, #16
 800a8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8f4:	eb00 0904 	add.w	r9, r0, r4
 800a8f8:	d1e5      	bne.n	800a8c6 <__cvt+0x6a>
 800a8fa:	7803      	ldrb	r3, [r0, #0]
 800a8fc:	2b30      	cmp	r3, #48	@ 0x30
 800a8fe:	d10a      	bne.n	800a916 <__cvt+0xba>
 800a900:	2200      	movs	r2, #0
 800a902:	2300      	movs	r3, #0
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f7f6 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800a90c:	b918      	cbnz	r0, 800a916 <__cvt+0xba>
 800a90e:	f1c4 0401 	rsb	r4, r4, #1
 800a912:	f8ca 4000 	str.w	r4, [sl]
 800a916:	f8da 3000 	ldr.w	r3, [sl]
 800a91a:	4499      	add	r9, r3
 800a91c:	e7d3      	b.n	800a8c6 <__cvt+0x6a>
 800a91e:	1c59      	adds	r1, r3, #1
 800a920:	9103      	str	r1, [sp, #12]
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e7d9      	b.n	800a8da <__cvt+0x7e>

0800a926 <__exponent>:
 800a926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a928:	2900      	cmp	r1, #0
 800a92a:	bfba      	itte	lt
 800a92c:	4249      	neglt	r1, r1
 800a92e:	232d      	movlt	r3, #45	@ 0x2d
 800a930:	232b      	movge	r3, #43	@ 0x2b
 800a932:	2909      	cmp	r1, #9
 800a934:	7002      	strb	r2, [r0, #0]
 800a936:	7043      	strb	r3, [r0, #1]
 800a938:	dd29      	ble.n	800a98e <__exponent+0x68>
 800a93a:	f10d 0307 	add.w	r3, sp, #7
 800a93e:	461d      	mov	r5, r3
 800a940:	270a      	movs	r7, #10
 800a942:	461a      	mov	r2, r3
 800a944:	fbb1 f6f7 	udiv	r6, r1, r7
 800a948:	fb07 1416 	mls	r4, r7, r6, r1
 800a94c:	3430      	adds	r4, #48	@ 0x30
 800a94e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a952:	460c      	mov	r4, r1
 800a954:	2c63      	cmp	r4, #99	@ 0x63
 800a956:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a95a:	4631      	mov	r1, r6
 800a95c:	dcf1      	bgt.n	800a942 <__exponent+0x1c>
 800a95e:	3130      	adds	r1, #48	@ 0x30
 800a960:	1e94      	subs	r4, r2, #2
 800a962:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a966:	1c41      	adds	r1, r0, #1
 800a968:	4623      	mov	r3, r4
 800a96a:	42ab      	cmp	r3, r5
 800a96c:	d30a      	bcc.n	800a984 <__exponent+0x5e>
 800a96e:	f10d 0309 	add.w	r3, sp, #9
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	42ac      	cmp	r4, r5
 800a976:	bf88      	it	hi
 800a978:	2300      	movhi	r3, #0
 800a97a:	3302      	adds	r3, #2
 800a97c:	4403      	add	r3, r0
 800a97e:	1a18      	subs	r0, r3, r0
 800a980:	b003      	add	sp, #12
 800a982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a984:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a988:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a98c:	e7ed      	b.n	800a96a <__exponent+0x44>
 800a98e:	2330      	movs	r3, #48	@ 0x30
 800a990:	3130      	adds	r1, #48	@ 0x30
 800a992:	7083      	strb	r3, [r0, #2]
 800a994:	70c1      	strb	r1, [r0, #3]
 800a996:	1d03      	adds	r3, r0, #4
 800a998:	e7f1      	b.n	800a97e <__exponent+0x58>
	...

0800a99c <_printf_float>:
 800a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	b08d      	sub	sp, #52	@ 0x34
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a9a8:	4616      	mov	r6, r2
 800a9aa:	461f      	mov	r7, r3
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	f001 fe71 	bl	800c694 <_localeconv_r>
 800a9b2:	6803      	ldr	r3, [r0, #0]
 800a9b4:	9304      	str	r3, [sp, #16]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7f5 fc5a 	bl	8000270 <strlen>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c4:	9005      	str	r0, [sp, #20]
 800a9c6:	3307      	adds	r3, #7
 800a9c8:	f023 0307 	bic.w	r3, r3, #7
 800a9cc:	f103 0208 	add.w	r2, r3, #8
 800a9d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9d4:	f8d4 b000 	ldr.w	fp, [r4]
 800a9d8:	f8c8 2000 	str.w	r2, [r8]
 800a9dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9e4:	9307      	str	r3, [sp, #28]
 800a9e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9f2:	4b9c      	ldr	r3, [pc, #624]	@ (800ac64 <_printf_float+0x2c8>)
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9f8:	f7f6 f898 	bl	8000b2c <__aeabi_dcmpun>
 800a9fc:	bb70      	cbnz	r0, 800aa5c <_printf_float+0xc0>
 800a9fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa02:	4b98      	ldr	r3, [pc, #608]	@ (800ac64 <_printf_float+0x2c8>)
 800aa04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa08:	f7f6 f872 	bl	8000af0 <__aeabi_dcmple>
 800aa0c:	bb30      	cbnz	r0, 800aa5c <_printf_float+0xc0>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2300      	movs	r3, #0
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	f7f6 f861 	bl	8000adc <__aeabi_dcmplt>
 800aa1a:	b110      	cbz	r0, 800aa22 <_printf_float+0x86>
 800aa1c:	232d      	movs	r3, #45	@ 0x2d
 800aa1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa22:	4a91      	ldr	r2, [pc, #580]	@ (800ac68 <_printf_float+0x2cc>)
 800aa24:	4b91      	ldr	r3, [pc, #580]	@ (800ac6c <_printf_float+0x2d0>)
 800aa26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa2a:	bf94      	ite	ls
 800aa2c:	4690      	movls	r8, r2
 800aa2e:	4698      	movhi	r8, r3
 800aa30:	2303      	movs	r3, #3
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	f02b 0304 	bic.w	r3, fp, #4
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	f04f 0900 	mov.w	r9, #0
 800aa3e:	9700      	str	r7, [sp, #0]
 800aa40:	4633      	mov	r3, r6
 800aa42:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 fa84 	bl	800af54 <_printf_common>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	f040 808d 	bne.w	800ab6c <_printf_float+0x1d0>
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa56:	b00d      	add	sp, #52	@ 0x34
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	4642      	mov	r2, r8
 800aa5e:	464b      	mov	r3, r9
 800aa60:	4640      	mov	r0, r8
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f6 f862 	bl	8000b2c <__aeabi_dcmpun>
 800aa68:	b140      	cbz	r0, 800aa7c <_printf_float+0xe0>
 800aa6a:	464b      	mov	r3, r9
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bfbc      	itt	lt
 800aa70:	232d      	movlt	r3, #45	@ 0x2d
 800aa72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa76:	4a7e      	ldr	r2, [pc, #504]	@ (800ac70 <_printf_float+0x2d4>)
 800aa78:	4b7e      	ldr	r3, [pc, #504]	@ (800ac74 <_printf_float+0x2d8>)
 800aa7a:	e7d4      	b.n	800aa26 <_printf_float+0x8a>
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aa82:	9206      	str	r2, [sp, #24]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	d13b      	bne.n	800ab00 <_printf_float+0x164>
 800aa88:	2306      	movs	r3, #6
 800aa8a:	6063      	str	r3, [r4, #4]
 800aa8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aa90:	2300      	movs	r3, #0
 800aa92:	6022      	str	r2, [r4, #0]
 800aa94:	9303      	str	r3, [sp, #12]
 800aa96:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa98:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aa9c:	ab09      	add	r3, sp, #36	@ 0x24
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	6861      	ldr	r1, [r4, #4]
 800aaa2:	ec49 8b10 	vmov	d0, r8, r9
 800aaa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f7ff fed6 	bl	800a85c <__cvt>
 800aab0:	9b06      	ldr	r3, [sp, #24]
 800aab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aab4:	2b47      	cmp	r3, #71	@ 0x47
 800aab6:	4680      	mov	r8, r0
 800aab8:	d129      	bne.n	800ab0e <_printf_float+0x172>
 800aaba:	1cc8      	adds	r0, r1, #3
 800aabc:	db02      	blt.n	800aac4 <_printf_float+0x128>
 800aabe:	6863      	ldr	r3, [r4, #4]
 800aac0:	4299      	cmp	r1, r3
 800aac2:	dd41      	ble.n	800ab48 <_printf_float+0x1ac>
 800aac4:	f1aa 0a02 	sub.w	sl, sl, #2
 800aac8:	fa5f fa8a 	uxtb.w	sl, sl
 800aacc:	3901      	subs	r1, #1
 800aace:	4652      	mov	r2, sl
 800aad0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aad4:	9109      	str	r1, [sp, #36]	@ 0x24
 800aad6:	f7ff ff26 	bl	800a926 <__exponent>
 800aada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aadc:	1813      	adds	r3, r2, r0
 800aade:	2a01      	cmp	r2, #1
 800aae0:	4681      	mov	r9, r0
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	dc02      	bgt.n	800aaec <_printf_float+0x150>
 800aae6:	6822      	ldr	r2, [r4, #0]
 800aae8:	07d2      	lsls	r2, r2, #31
 800aaea:	d501      	bpl.n	800aaf0 <_printf_float+0x154>
 800aaec:	3301      	adds	r3, #1
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0a2      	beq.n	800aa3e <_printf_float+0xa2>
 800aaf8:	232d      	movs	r3, #45	@ 0x2d
 800aafa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aafe:	e79e      	b.n	800aa3e <_printf_float+0xa2>
 800ab00:	9a06      	ldr	r2, [sp, #24]
 800ab02:	2a47      	cmp	r2, #71	@ 0x47
 800ab04:	d1c2      	bne.n	800aa8c <_printf_float+0xf0>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1c0      	bne.n	800aa8c <_printf_float+0xf0>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e7bd      	b.n	800aa8a <_printf_float+0xee>
 800ab0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab12:	d9db      	bls.n	800aacc <_printf_float+0x130>
 800ab14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab18:	d118      	bne.n	800ab4c <_printf_float+0x1b0>
 800ab1a:	2900      	cmp	r1, #0
 800ab1c:	6863      	ldr	r3, [r4, #4]
 800ab1e:	dd0b      	ble.n	800ab38 <_printf_float+0x19c>
 800ab20:	6121      	str	r1, [r4, #16]
 800ab22:	b913      	cbnz	r3, 800ab2a <_printf_float+0x18e>
 800ab24:	6822      	ldr	r2, [r4, #0]
 800ab26:	07d0      	lsls	r0, r2, #31
 800ab28:	d502      	bpl.n	800ab30 <_printf_float+0x194>
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	440b      	add	r3, r1
 800ab2e:	6123      	str	r3, [r4, #16]
 800ab30:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab32:	f04f 0900 	mov.w	r9, #0
 800ab36:	e7db      	b.n	800aaf0 <_printf_float+0x154>
 800ab38:	b913      	cbnz	r3, 800ab40 <_printf_float+0x1a4>
 800ab3a:	6822      	ldr	r2, [r4, #0]
 800ab3c:	07d2      	lsls	r2, r2, #31
 800ab3e:	d501      	bpl.n	800ab44 <_printf_float+0x1a8>
 800ab40:	3302      	adds	r3, #2
 800ab42:	e7f4      	b.n	800ab2e <_printf_float+0x192>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e7f2      	b.n	800ab2e <_printf_float+0x192>
 800ab48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	db05      	blt.n	800ab5e <_printf_float+0x1c2>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	6121      	str	r1, [r4, #16]
 800ab56:	07d8      	lsls	r0, r3, #31
 800ab58:	d5ea      	bpl.n	800ab30 <_printf_float+0x194>
 800ab5a:	1c4b      	adds	r3, r1, #1
 800ab5c:	e7e7      	b.n	800ab2e <_printf_float+0x192>
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	bfd4      	ite	le
 800ab62:	f1c1 0202 	rsble	r2, r1, #2
 800ab66:	2201      	movgt	r2, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	e7e0      	b.n	800ab2e <_printf_float+0x192>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	055a      	lsls	r2, r3, #21
 800ab70:	d407      	bmi.n	800ab82 <_printf_float+0x1e6>
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	4642      	mov	r2, r8
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d12b      	bne.n	800abd8 <_printf_float+0x23c>
 800ab80:	e767      	b.n	800aa52 <_printf_float+0xb6>
 800ab82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab86:	f240 80dd 	bls.w	800ad44 <_printf_float+0x3a8>
 800ab8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2300      	movs	r3, #0
 800ab92:	f7f5 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d033      	beq.n	800ac02 <_printf_float+0x266>
 800ab9a:	4a37      	ldr	r2, [pc, #220]	@ (800ac78 <_printf_float+0x2dc>)
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b8      	blx	r7
 800aba4:	3001      	adds	r0, #1
 800aba6:	f43f af54 	beq.w	800aa52 <_printf_float+0xb6>
 800abaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800abae:	4543      	cmp	r3, r8
 800abb0:	db02      	blt.n	800abb8 <_printf_float+0x21c>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	07d8      	lsls	r0, r3, #31
 800abb6:	d50f      	bpl.n	800abd8 <_printf_float+0x23c>
 800abb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abbc:	4631      	mov	r1, r6
 800abbe:	4628      	mov	r0, r5
 800abc0:	47b8      	blx	r7
 800abc2:	3001      	adds	r0, #1
 800abc4:	f43f af45 	beq.w	800aa52 <_printf_float+0xb6>
 800abc8:	f04f 0900 	mov.w	r9, #0
 800abcc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800abd0:	f104 0a1a 	add.w	sl, r4, #26
 800abd4:	45c8      	cmp	r8, r9
 800abd6:	dc09      	bgt.n	800abec <_printf_float+0x250>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	079b      	lsls	r3, r3, #30
 800abdc:	f100 8103 	bmi.w	800ade6 <_printf_float+0x44a>
 800abe0:	68e0      	ldr	r0, [r4, #12]
 800abe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe4:	4298      	cmp	r0, r3
 800abe6:	bfb8      	it	lt
 800abe8:	4618      	movlt	r0, r3
 800abea:	e734      	b.n	800aa56 <_printf_float+0xba>
 800abec:	2301      	movs	r3, #1
 800abee:	4652      	mov	r2, sl
 800abf0:	4631      	mov	r1, r6
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b8      	blx	r7
 800abf6:	3001      	adds	r0, #1
 800abf8:	f43f af2b 	beq.w	800aa52 <_printf_float+0xb6>
 800abfc:	f109 0901 	add.w	r9, r9, #1
 800ac00:	e7e8      	b.n	800abd4 <_printf_float+0x238>
 800ac02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc39      	bgt.n	800ac7c <_printf_float+0x2e0>
 800ac08:	4a1b      	ldr	r2, [pc, #108]	@ (800ac78 <_printf_float+0x2dc>)
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b8      	blx	r7
 800ac12:	3001      	adds	r0, #1
 800ac14:	f43f af1d 	beq.w	800aa52 <_printf_float+0xb6>
 800ac18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac1c:	ea59 0303 	orrs.w	r3, r9, r3
 800ac20:	d102      	bne.n	800ac28 <_printf_float+0x28c>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	07d9      	lsls	r1, r3, #31
 800ac26:	d5d7      	bpl.n	800abd8 <_printf_float+0x23c>
 800ac28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b8      	blx	r7
 800ac32:	3001      	adds	r0, #1
 800ac34:	f43f af0d 	beq.w	800aa52 <_printf_float+0xb6>
 800ac38:	f04f 0a00 	mov.w	sl, #0
 800ac3c:	f104 0b1a 	add.w	fp, r4, #26
 800ac40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac42:	425b      	negs	r3, r3
 800ac44:	4553      	cmp	r3, sl
 800ac46:	dc01      	bgt.n	800ac4c <_printf_float+0x2b0>
 800ac48:	464b      	mov	r3, r9
 800ac4a:	e793      	b.n	800ab74 <_printf_float+0x1d8>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	465a      	mov	r2, fp
 800ac50:	4631      	mov	r1, r6
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b8      	blx	r7
 800ac56:	3001      	adds	r0, #1
 800ac58:	f43f aefb 	beq.w	800aa52 <_printf_float+0xb6>
 800ac5c:	f10a 0a01 	add.w	sl, sl, #1
 800ac60:	e7ee      	b.n	800ac40 <_printf_float+0x2a4>
 800ac62:	bf00      	nop
 800ac64:	7fefffff 	.word	0x7fefffff
 800ac68:	0800f22c 	.word	0x0800f22c
 800ac6c:	0800f230 	.word	0x0800f230
 800ac70:	0800f234 	.word	0x0800f234
 800ac74:	0800f238 	.word	0x0800f238
 800ac78:	0800f23c 	.word	0x0800f23c
 800ac7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac82:	4553      	cmp	r3, sl
 800ac84:	bfa8      	it	ge
 800ac86:	4653      	movge	r3, sl
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	4699      	mov	r9, r3
 800ac8c:	dc36      	bgt.n	800acfc <_printf_float+0x360>
 800ac8e:	f04f 0b00 	mov.w	fp, #0
 800ac92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac96:	f104 021a 	add.w	r2, r4, #26
 800ac9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac9c:	9306      	str	r3, [sp, #24]
 800ac9e:	eba3 0309 	sub.w	r3, r3, r9
 800aca2:	455b      	cmp	r3, fp
 800aca4:	dc31      	bgt.n	800ad0a <_printf_float+0x36e>
 800aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca8:	459a      	cmp	sl, r3
 800acaa:	dc3a      	bgt.n	800ad22 <_printf_float+0x386>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	07da      	lsls	r2, r3, #31
 800acb0:	d437      	bmi.n	800ad22 <_printf_float+0x386>
 800acb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb4:	ebaa 0903 	sub.w	r9, sl, r3
 800acb8:	9b06      	ldr	r3, [sp, #24]
 800acba:	ebaa 0303 	sub.w	r3, sl, r3
 800acbe:	4599      	cmp	r9, r3
 800acc0:	bfa8      	it	ge
 800acc2:	4699      	movge	r9, r3
 800acc4:	f1b9 0f00 	cmp.w	r9, #0
 800acc8:	dc33      	bgt.n	800ad32 <_printf_float+0x396>
 800acca:	f04f 0800 	mov.w	r8, #0
 800acce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acd2:	f104 0b1a 	add.w	fp, r4, #26
 800acd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd8:	ebaa 0303 	sub.w	r3, sl, r3
 800acdc:	eba3 0309 	sub.w	r3, r3, r9
 800ace0:	4543      	cmp	r3, r8
 800ace2:	f77f af79 	ble.w	800abd8 <_printf_float+0x23c>
 800ace6:	2301      	movs	r3, #1
 800ace8:	465a      	mov	r2, fp
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	f43f aeae 	beq.w	800aa52 <_printf_float+0xb6>
 800acf6:	f108 0801 	add.w	r8, r8, #1
 800acfa:	e7ec      	b.n	800acd6 <_printf_float+0x33a>
 800acfc:	4642      	mov	r2, r8
 800acfe:	4631      	mov	r1, r6
 800ad00:	4628      	mov	r0, r5
 800ad02:	47b8      	blx	r7
 800ad04:	3001      	adds	r0, #1
 800ad06:	d1c2      	bne.n	800ac8e <_printf_float+0x2f2>
 800ad08:	e6a3      	b.n	800aa52 <_printf_float+0xb6>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4628      	mov	r0, r5
 800ad10:	9206      	str	r2, [sp, #24]
 800ad12:	47b8      	blx	r7
 800ad14:	3001      	adds	r0, #1
 800ad16:	f43f ae9c 	beq.w	800aa52 <_printf_float+0xb6>
 800ad1a:	9a06      	ldr	r2, [sp, #24]
 800ad1c:	f10b 0b01 	add.w	fp, fp, #1
 800ad20:	e7bb      	b.n	800ac9a <_printf_float+0x2fe>
 800ad22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b8      	blx	r7
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d1c0      	bne.n	800acb2 <_printf_float+0x316>
 800ad30:	e68f      	b.n	800aa52 <_printf_float+0xb6>
 800ad32:	9a06      	ldr	r2, [sp, #24]
 800ad34:	464b      	mov	r3, r9
 800ad36:	4442      	add	r2, r8
 800ad38:	4631      	mov	r1, r6
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	47b8      	blx	r7
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d1c3      	bne.n	800acca <_printf_float+0x32e>
 800ad42:	e686      	b.n	800aa52 <_printf_float+0xb6>
 800ad44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad48:	f1ba 0f01 	cmp.w	sl, #1
 800ad4c:	dc01      	bgt.n	800ad52 <_printf_float+0x3b6>
 800ad4e:	07db      	lsls	r3, r3, #31
 800ad50:	d536      	bpl.n	800adc0 <_printf_float+0x424>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4642      	mov	r2, r8
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f ae78 	beq.w	800aa52 <_printf_float+0xb6>
 800ad62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f ae70 	beq.w	800aa52 <_printf_float+0xb6>
 800ad72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad76:	2200      	movs	r2, #0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ad7e:	f7f5 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad82:	b9c0      	cbnz	r0, 800adb6 <_printf_float+0x41a>
 800ad84:	4653      	mov	r3, sl
 800ad86:	f108 0201 	add.w	r2, r8, #1
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	d10c      	bne.n	800adae <_printf_float+0x412>
 800ad94:	e65d      	b.n	800aa52 <_printf_float+0xb6>
 800ad96:	2301      	movs	r3, #1
 800ad98:	465a      	mov	r2, fp
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f ae56 	beq.w	800aa52 <_printf_float+0xb6>
 800ada6:	f108 0801 	add.w	r8, r8, #1
 800adaa:	45d0      	cmp	r8, sl
 800adac:	dbf3      	blt.n	800ad96 <_printf_float+0x3fa>
 800adae:	464b      	mov	r3, r9
 800adb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800adb4:	e6df      	b.n	800ab76 <_printf_float+0x1da>
 800adb6:	f04f 0800 	mov.w	r8, #0
 800adba:	f104 0b1a 	add.w	fp, r4, #26
 800adbe:	e7f4      	b.n	800adaa <_printf_float+0x40e>
 800adc0:	2301      	movs	r3, #1
 800adc2:	4642      	mov	r2, r8
 800adc4:	e7e1      	b.n	800ad8a <_printf_float+0x3ee>
 800adc6:	2301      	movs	r3, #1
 800adc8:	464a      	mov	r2, r9
 800adca:	4631      	mov	r1, r6
 800adcc:	4628      	mov	r0, r5
 800adce:	47b8      	blx	r7
 800add0:	3001      	adds	r0, #1
 800add2:	f43f ae3e 	beq.w	800aa52 <_printf_float+0xb6>
 800add6:	f108 0801 	add.w	r8, r8, #1
 800adda:	68e3      	ldr	r3, [r4, #12]
 800addc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adde:	1a5b      	subs	r3, r3, r1
 800ade0:	4543      	cmp	r3, r8
 800ade2:	dcf0      	bgt.n	800adc6 <_printf_float+0x42a>
 800ade4:	e6fc      	b.n	800abe0 <_printf_float+0x244>
 800ade6:	f04f 0800 	mov.w	r8, #0
 800adea:	f104 0919 	add.w	r9, r4, #25
 800adee:	e7f4      	b.n	800adda <_printf_float+0x43e>

0800adf0 <malloc>:
 800adf0:	4b02      	ldr	r3, [pc, #8]	@ (800adfc <malloc+0xc>)
 800adf2:	4601      	mov	r1, r0
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	f000 b82d 	b.w	800ae54 <_malloc_r>
 800adfa:	bf00      	nop
 800adfc:	200001a4 	.word	0x200001a4

0800ae00 <free>:
 800ae00:	4b02      	ldr	r3, [pc, #8]	@ (800ae0c <free+0xc>)
 800ae02:	4601      	mov	r1, r0
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	f002 baf3 	b.w	800d3f0 <_free_r>
 800ae0a:	bf00      	nop
 800ae0c:	200001a4 	.word	0x200001a4

0800ae10 <sbrk_aligned>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	4e0f      	ldr	r6, [pc, #60]	@ (800ae50 <sbrk_aligned+0x40>)
 800ae14:	460c      	mov	r4, r1
 800ae16:	6831      	ldr	r1, [r6, #0]
 800ae18:	4605      	mov	r5, r0
 800ae1a:	b911      	cbnz	r1, 800ae22 <sbrk_aligned+0x12>
 800ae1c:	f001 fc3e 	bl	800c69c <_sbrk_r>
 800ae20:	6030      	str	r0, [r6, #0]
 800ae22:	4621      	mov	r1, r4
 800ae24:	4628      	mov	r0, r5
 800ae26:	f001 fc39 	bl	800c69c <_sbrk_r>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	d103      	bne.n	800ae36 <sbrk_aligned+0x26>
 800ae2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ae32:	4620      	mov	r0, r4
 800ae34:	bd70      	pop	{r4, r5, r6, pc}
 800ae36:	1cc4      	adds	r4, r0, #3
 800ae38:	f024 0403 	bic.w	r4, r4, #3
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	d0f8      	beq.n	800ae32 <sbrk_aligned+0x22>
 800ae40:	1a21      	subs	r1, r4, r0
 800ae42:	4628      	mov	r0, r5
 800ae44:	f001 fc2a 	bl	800c69c <_sbrk_r>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d1f2      	bne.n	800ae32 <sbrk_aligned+0x22>
 800ae4c:	e7ef      	b.n	800ae2e <sbrk_aligned+0x1e>
 800ae4e:	bf00      	nop
 800ae50:	20000b1c 	.word	0x20000b1c

0800ae54 <_malloc_r>:
 800ae54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae58:	1ccd      	adds	r5, r1, #3
 800ae5a:	f025 0503 	bic.w	r5, r5, #3
 800ae5e:	3508      	adds	r5, #8
 800ae60:	2d0c      	cmp	r5, #12
 800ae62:	bf38      	it	cc
 800ae64:	250c      	movcc	r5, #12
 800ae66:	2d00      	cmp	r5, #0
 800ae68:	4606      	mov	r6, r0
 800ae6a:	db01      	blt.n	800ae70 <_malloc_r+0x1c>
 800ae6c:	42a9      	cmp	r1, r5
 800ae6e:	d904      	bls.n	800ae7a <_malloc_r+0x26>
 800ae70:	230c      	movs	r3, #12
 800ae72:	6033      	str	r3, [r6, #0]
 800ae74:	2000      	movs	r0, #0
 800ae76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af50 <_malloc_r+0xfc>
 800ae7e:	f000 fc0b 	bl	800b698 <__malloc_lock>
 800ae82:	f8d8 3000 	ldr.w	r3, [r8]
 800ae86:	461c      	mov	r4, r3
 800ae88:	bb44      	cbnz	r4, 800aedc <_malloc_r+0x88>
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f7ff ffbf 	bl	800ae10 <sbrk_aligned>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	4604      	mov	r4, r0
 800ae96:	d158      	bne.n	800af4a <_malloc_r+0xf6>
 800ae98:	f8d8 4000 	ldr.w	r4, [r8]
 800ae9c:	4627      	mov	r7, r4
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d143      	bne.n	800af2a <_malloc_r+0xd6>
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	d04b      	beq.n	800af3e <_malloc_r+0xea>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	4639      	mov	r1, r7
 800aeaa:	4630      	mov	r0, r6
 800aeac:	eb04 0903 	add.w	r9, r4, r3
 800aeb0:	f001 fbf4 	bl	800c69c <_sbrk_r>
 800aeb4:	4581      	cmp	r9, r0
 800aeb6:	d142      	bne.n	800af3e <_malloc_r+0xea>
 800aeb8:	6821      	ldr	r1, [r4, #0]
 800aeba:	1a6d      	subs	r5, r5, r1
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f7ff ffa6 	bl	800ae10 <sbrk_aligned>
 800aec4:	3001      	adds	r0, #1
 800aec6:	d03a      	beq.n	800af3e <_malloc_r+0xea>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	442b      	add	r3, r5
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	f8d8 3000 	ldr.w	r3, [r8]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	bb62      	cbnz	r2, 800af30 <_malloc_r+0xdc>
 800aed6:	f8c8 7000 	str.w	r7, [r8]
 800aeda:	e00f      	b.n	800aefc <_malloc_r+0xa8>
 800aedc:	6822      	ldr	r2, [r4, #0]
 800aede:	1b52      	subs	r2, r2, r5
 800aee0:	d420      	bmi.n	800af24 <_malloc_r+0xd0>
 800aee2:	2a0b      	cmp	r2, #11
 800aee4:	d917      	bls.n	800af16 <_malloc_r+0xc2>
 800aee6:	1961      	adds	r1, r4, r5
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	6025      	str	r5, [r4, #0]
 800aeec:	bf18      	it	ne
 800aeee:	6059      	strne	r1, [r3, #4]
 800aef0:	6863      	ldr	r3, [r4, #4]
 800aef2:	bf08      	it	eq
 800aef4:	f8c8 1000 	streq.w	r1, [r8]
 800aef8:	5162      	str	r2, [r4, r5]
 800aefa:	604b      	str	r3, [r1, #4]
 800aefc:	4630      	mov	r0, r6
 800aefe:	f000 fbd1 	bl	800b6a4 <__malloc_unlock>
 800af02:	f104 000b 	add.w	r0, r4, #11
 800af06:	1d23      	adds	r3, r4, #4
 800af08:	f020 0007 	bic.w	r0, r0, #7
 800af0c:	1ac2      	subs	r2, r0, r3
 800af0e:	bf1c      	itt	ne
 800af10:	1a1b      	subne	r3, r3, r0
 800af12:	50a3      	strne	r3, [r4, r2]
 800af14:	e7af      	b.n	800ae76 <_malloc_r+0x22>
 800af16:	6862      	ldr	r2, [r4, #4]
 800af18:	42a3      	cmp	r3, r4
 800af1a:	bf0c      	ite	eq
 800af1c:	f8c8 2000 	streq.w	r2, [r8]
 800af20:	605a      	strne	r2, [r3, #4]
 800af22:	e7eb      	b.n	800aefc <_malloc_r+0xa8>
 800af24:	4623      	mov	r3, r4
 800af26:	6864      	ldr	r4, [r4, #4]
 800af28:	e7ae      	b.n	800ae88 <_malloc_r+0x34>
 800af2a:	463c      	mov	r4, r7
 800af2c:	687f      	ldr	r7, [r7, #4]
 800af2e:	e7b6      	b.n	800ae9e <_malloc_r+0x4a>
 800af30:	461a      	mov	r2, r3
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	42a3      	cmp	r3, r4
 800af36:	d1fb      	bne.n	800af30 <_malloc_r+0xdc>
 800af38:	2300      	movs	r3, #0
 800af3a:	6053      	str	r3, [r2, #4]
 800af3c:	e7de      	b.n	800aefc <_malloc_r+0xa8>
 800af3e:	230c      	movs	r3, #12
 800af40:	6033      	str	r3, [r6, #0]
 800af42:	4630      	mov	r0, r6
 800af44:	f000 fbae 	bl	800b6a4 <__malloc_unlock>
 800af48:	e794      	b.n	800ae74 <_malloc_r+0x20>
 800af4a:	6005      	str	r5, [r0, #0]
 800af4c:	e7d6      	b.n	800aefc <_malloc_r+0xa8>
 800af4e:	bf00      	nop
 800af50:	20000b20 	.word	0x20000b20

0800af54 <_printf_common>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	4616      	mov	r6, r2
 800af5a:	4698      	mov	r8, r3
 800af5c:	688a      	ldr	r2, [r1, #8]
 800af5e:	690b      	ldr	r3, [r1, #16]
 800af60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af64:	4293      	cmp	r3, r2
 800af66:	bfb8      	it	lt
 800af68:	4613      	movlt	r3, r2
 800af6a:	6033      	str	r3, [r6, #0]
 800af6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af70:	4607      	mov	r7, r0
 800af72:	460c      	mov	r4, r1
 800af74:	b10a      	cbz	r2, 800af7a <_printf_common+0x26>
 800af76:	3301      	adds	r3, #1
 800af78:	6033      	str	r3, [r6, #0]
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	0699      	lsls	r1, r3, #26
 800af7e:	bf42      	ittt	mi
 800af80:	6833      	ldrmi	r3, [r6, #0]
 800af82:	3302      	addmi	r3, #2
 800af84:	6033      	strmi	r3, [r6, #0]
 800af86:	6825      	ldr	r5, [r4, #0]
 800af88:	f015 0506 	ands.w	r5, r5, #6
 800af8c:	d106      	bne.n	800af9c <_printf_common+0x48>
 800af8e:	f104 0a19 	add.w	sl, r4, #25
 800af92:	68e3      	ldr	r3, [r4, #12]
 800af94:	6832      	ldr	r2, [r6, #0]
 800af96:	1a9b      	subs	r3, r3, r2
 800af98:	42ab      	cmp	r3, r5
 800af9a:	dc26      	bgt.n	800afea <_printf_common+0x96>
 800af9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afa0:	6822      	ldr	r2, [r4, #0]
 800afa2:	3b00      	subs	r3, #0
 800afa4:	bf18      	it	ne
 800afa6:	2301      	movne	r3, #1
 800afa8:	0692      	lsls	r2, r2, #26
 800afaa:	d42b      	bmi.n	800b004 <_printf_common+0xb0>
 800afac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afb0:	4641      	mov	r1, r8
 800afb2:	4638      	mov	r0, r7
 800afb4:	47c8      	blx	r9
 800afb6:	3001      	adds	r0, #1
 800afb8:	d01e      	beq.n	800aff8 <_printf_common+0xa4>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	f003 0306 	and.w	r3, r3, #6
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	bf02      	ittt	eq
 800afc6:	68e5      	ldreq	r5, [r4, #12]
 800afc8:	6833      	ldreq	r3, [r6, #0]
 800afca:	1aed      	subeq	r5, r5, r3
 800afcc:	68a3      	ldr	r3, [r4, #8]
 800afce:	bf0c      	ite	eq
 800afd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afd4:	2500      	movne	r5, #0
 800afd6:	4293      	cmp	r3, r2
 800afd8:	bfc4      	itt	gt
 800afda:	1a9b      	subgt	r3, r3, r2
 800afdc:	18ed      	addgt	r5, r5, r3
 800afde:	2600      	movs	r6, #0
 800afe0:	341a      	adds	r4, #26
 800afe2:	42b5      	cmp	r5, r6
 800afe4:	d11a      	bne.n	800b01c <_printf_common+0xc8>
 800afe6:	2000      	movs	r0, #0
 800afe8:	e008      	b.n	800affc <_printf_common+0xa8>
 800afea:	2301      	movs	r3, #1
 800afec:	4652      	mov	r2, sl
 800afee:	4641      	mov	r1, r8
 800aff0:	4638      	mov	r0, r7
 800aff2:	47c8      	blx	r9
 800aff4:	3001      	adds	r0, #1
 800aff6:	d103      	bne.n	800b000 <_printf_common+0xac>
 800aff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800affc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b000:	3501      	adds	r5, #1
 800b002:	e7c6      	b.n	800af92 <_printf_common+0x3e>
 800b004:	18e1      	adds	r1, r4, r3
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	2030      	movs	r0, #48	@ 0x30
 800b00a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b00e:	4422      	add	r2, r4
 800b010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b018:	3302      	adds	r3, #2
 800b01a:	e7c7      	b.n	800afac <_printf_common+0x58>
 800b01c:	2301      	movs	r3, #1
 800b01e:	4622      	mov	r2, r4
 800b020:	4641      	mov	r1, r8
 800b022:	4638      	mov	r0, r7
 800b024:	47c8      	blx	r9
 800b026:	3001      	adds	r0, #1
 800b028:	d0e6      	beq.n	800aff8 <_printf_common+0xa4>
 800b02a:	3601      	adds	r6, #1
 800b02c:	e7d9      	b.n	800afe2 <_printf_common+0x8e>
	...

0800b030 <_printf_i>:
 800b030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b034:	7e0f      	ldrb	r7, [r1, #24]
 800b036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b038:	2f78      	cmp	r7, #120	@ 0x78
 800b03a:	4691      	mov	r9, r2
 800b03c:	4680      	mov	r8, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	469a      	mov	sl, r3
 800b042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b046:	d807      	bhi.n	800b058 <_printf_i+0x28>
 800b048:	2f62      	cmp	r7, #98	@ 0x62
 800b04a:	d80a      	bhi.n	800b062 <_printf_i+0x32>
 800b04c:	2f00      	cmp	r7, #0
 800b04e:	f000 80d2 	beq.w	800b1f6 <_printf_i+0x1c6>
 800b052:	2f58      	cmp	r7, #88	@ 0x58
 800b054:	f000 80b9 	beq.w	800b1ca <_printf_i+0x19a>
 800b058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b05c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b060:	e03a      	b.n	800b0d8 <_printf_i+0xa8>
 800b062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b066:	2b15      	cmp	r3, #21
 800b068:	d8f6      	bhi.n	800b058 <_printf_i+0x28>
 800b06a:	a101      	add	r1, pc, #4	@ (adr r1, 800b070 <_printf_i+0x40>)
 800b06c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b070:	0800b0c9 	.word	0x0800b0c9
 800b074:	0800b0dd 	.word	0x0800b0dd
 800b078:	0800b059 	.word	0x0800b059
 800b07c:	0800b059 	.word	0x0800b059
 800b080:	0800b059 	.word	0x0800b059
 800b084:	0800b059 	.word	0x0800b059
 800b088:	0800b0dd 	.word	0x0800b0dd
 800b08c:	0800b059 	.word	0x0800b059
 800b090:	0800b059 	.word	0x0800b059
 800b094:	0800b059 	.word	0x0800b059
 800b098:	0800b059 	.word	0x0800b059
 800b09c:	0800b1dd 	.word	0x0800b1dd
 800b0a0:	0800b107 	.word	0x0800b107
 800b0a4:	0800b197 	.word	0x0800b197
 800b0a8:	0800b059 	.word	0x0800b059
 800b0ac:	0800b059 	.word	0x0800b059
 800b0b0:	0800b1ff 	.word	0x0800b1ff
 800b0b4:	0800b059 	.word	0x0800b059
 800b0b8:	0800b107 	.word	0x0800b107
 800b0bc:	0800b059 	.word	0x0800b059
 800b0c0:	0800b059 	.word	0x0800b059
 800b0c4:	0800b19f 	.word	0x0800b19f
 800b0c8:	6833      	ldr	r3, [r6, #0]
 800b0ca:	1d1a      	adds	r2, r3, #4
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6032      	str	r2, [r6, #0]
 800b0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e09d      	b.n	800b218 <_printf_i+0x1e8>
 800b0dc:	6833      	ldr	r3, [r6, #0]
 800b0de:	6820      	ldr	r0, [r4, #0]
 800b0e0:	1d19      	adds	r1, r3, #4
 800b0e2:	6031      	str	r1, [r6, #0]
 800b0e4:	0606      	lsls	r6, r0, #24
 800b0e6:	d501      	bpl.n	800b0ec <_printf_i+0xbc>
 800b0e8:	681d      	ldr	r5, [r3, #0]
 800b0ea:	e003      	b.n	800b0f4 <_printf_i+0xc4>
 800b0ec:	0645      	lsls	r5, r0, #25
 800b0ee:	d5fb      	bpl.n	800b0e8 <_printf_i+0xb8>
 800b0f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0f4:	2d00      	cmp	r5, #0
 800b0f6:	da03      	bge.n	800b100 <_printf_i+0xd0>
 800b0f8:	232d      	movs	r3, #45	@ 0x2d
 800b0fa:	426d      	negs	r5, r5
 800b0fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b100:	4859      	ldr	r0, [pc, #356]	@ (800b268 <_printf_i+0x238>)
 800b102:	230a      	movs	r3, #10
 800b104:	e011      	b.n	800b12a <_printf_i+0xfa>
 800b106:	6821      	ldr	r1, [r4, #0]
 800b108:	6833      	ldr	r3, [r6, #0]
 800b10a:	0608      	lsls	r0, r1, #24
 800b10c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b110:	d402      	bmi.n	800b118 <_printf_i+0xe8>
 800b112:	0649      	lsls	r1, r1, #25
 800b114:	bf48      	it	mi
 800b116:	b2ad      	uxthmi	r5, r5
 800b118:	2f6f      	cmp	r7, #111	@ 0x6f
 800b11a:	4853      	ldr	r0, [pc, #332]	@ (800b268 <_printf_i+0x238>)
 800b11c:	6033      	str	r3, [r6, #0]
 800b11e:	bf14      	ite	ne
 800b120:	230a      	movne	r3, #10
 800b122:	2308      	moveq	r3, #8
 800b124:	2100      	movs	r1, #0
 800b126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b12a:	6866      	ldr	r6, [r4, #4]
 800b12c:	60a6      	str	r6, [r4, #8]
 800b12e:	2e00      	cmp	r6, #0
 800b130:	bfa2      	ittt	ge
 800b132:	6821      	ldrge	r1, [r4, #0]
 800b134:	f021 0104 	bicge.w	r1, r1, #4
 800b138:	6021      	strge	r1, [r4, #0]
 800b13a:	b90d      	cbnz	r5, 800b140 <_printf_i+0x110>
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	d04b      	beq.n	800b1d8 <_printf_i+0x1a8>
 800b140:	4616      	mov	r6, r2
 800b142:	fbb5 f1f3 	udiv	r1, r5, r3
 800b146:	fb03 5711 	mls	r7, r3, r1, r5
 800b14a:	5dc7      	ldrb	r7, [r0, r7]
 800b14c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b150:	462f      	mov	r7, r5
 800b152:	42bb      	cmp	r3, r7
 800b154:	460d      	mov	r5, r1
 800b156:	d9f4      	bls.n	800b142 <_printf_i+0x112>
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d10b      	bne.n	800b174 <_printf_i+0x144>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	07df      	lsls	r7, r3, #31
 800b160:	d508      	bpl.n	800b174 <_printf_i+0x144>
 800b162:	6923      	ldr	r3, [r4, #16]
 800b164:	6861      	ldr	r1, [r4, #4]
 800b166:	4299      	cmp	r1, r3
 800b168:	bfde      	ittt	le
 800b16a:	2330      	movle	r3, #48	@ 0x30
 800b16c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b170:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b174:	1b92      	subs	r2, r2, r6
 800b176:	6122      	str	r2, [r4, #16]
 800b178:	f8cd a000 	str.w	sl, [sp]
 800b17c:	464b      	mov	r3, r9
 800b17e:	aa03      	add	r2, sp, #12
 800b180:	4621      	mov	r1, r4
 800b182:	4640      	mov	r0, r8
 800b184:	f7ff fee6 	bl	800af54 <_printf_common>
 800b188:	3001      	adds	r0, #1
 800b18a:	d14a      	bne.n	800b222 <_printf_i+0x1f2>
 800b18c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b190:	b004      	add	sp, #16
 800b192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	f043 0320 	orr.w	r3, r3, #32
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	4833      	ldr	r0, [pc, #204]	@ (800b26c <_printf_i+0x23c>)
 800b1a0:	2778      	movs	r7, #120	@ 0x78
 800b1a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	6831      	ldr	r1, [r6, #0]
 800b1aa:	061f      	lsls	r7, r3, #24
 800b1ac:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1b0:	d402      	bmi.n	800b1b8 <_printf_i+0x188>
 800b1b2:	065f      	lsls	r7, r3, #25
 800b1b4:	bf48      	it	mi
 800b1b6:	b2ad      	uxthmi	r5, r5
 800b1b8:	6031      	str	r1, [r6, #0]
 800b1ba:	07d9      	lsls	r1, r3, #31
 800b1bc:	bf44      	itt	mi
 800b1be:	f043 0320 	orrmi.w	r3, r3, #32
 800b1c2:	6023      	strmi	r3, [r4, #0]
 800b1c4:	b11d      	cbz	r5, 800b1ce <_printf_i+0x19e>
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	e7ac      	b.n	800b124 <_printf_i+0xf4>
 800b1ca:	4827      	ldr	r0, [pc, #156]	@ (800b268 <_printf_i+0x238>)
 800b1cc:	e7e9      	b.n	800b1a2 <_printf_i+0x172>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	f023 0320 	bic.w	r3, r3, #32
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	e7f6      	b.n	800b1c6 <_printf_i+0x196>
 800b1d8:	4616      	mov	r6, r2
 800b1da:	e7bd      	b.n	800b158 <_printf_i+0x128>
 800b1dc:	6833      	ldr	r3, [r6, #0]
 800b1de:	6825      	ldr	r5, [r4, #0]
 800b1e0:	6961      	ldr	r1, [r4, #20]
 800b1e2:	1d18      	adds	r0, r3, #4
 800b1e4:	6030      	str	r0, [r6, #0]
 800b1e6:	062e      	lsls	r6, r5, #24
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	d501      	bpl.n	800b1f0 <_printf_i+0x1c0>
 800b1ec:	6019      	str	r1, [r3, #0]
 800b1ee:	e002      	b.n	800b1f6 <_printf_i+0x1c6>
 800b1f0:	0668      	lsls	r0, r5, #25
 800b1f2:	d5fb      	bpl.n	800b1ec <_printf_i+0x1bc>
 800b1f4:	8019      	strh	r1, [r3, #0]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	4616      	mov	r6, r2
 800b1fc:	e7bc      	b.n	800b178 <_printf_i+0x148>
 800b1fe:	6833      	ldr	r3, [r6, #0]
 800b200:	1d1a      	adds	r2, r3, #4
 800b202:	6032      	str	r2, [r6, #0]
 800b204:	681e      	ldr	r6, [r3, #0]
 800b206:	6862      	ldr	r2, [r4, #4]
 800b208:	2100      	movs	r1, #0
 800b20a:	4630      	mov	r0, r6
 800b20c:	f7f4 ffe0 	bl	80001d0 <memchr>
 800b210:	b108      	cbz	r0, 800b216 <_printf_i+0x1e6>
 800b212:	1b80      	subs	r0, r0, r6
 800b214:	6060      	str	r0, [r4, #4]
 800b216:	6863      	ldr	r3, [r4, #4]
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	2300      	movs	r3, #0
 800b21c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b220:	e7aa      	b.n	800b178 <_printf_i+0x148>
 800b222:	6923      	ldr	r3, [r4, #16]
 800b224:	4632      	mov	r2, r6
 800b226:	4649      	mov	r1, r9
 800b228:	4640      	mov	r0, r8
 800b22a:	47d0      	blx	sl
 800b22c:	3001      	adds	r0, #1
 800b22e:	d0ad      	beq.n	800b18c <_printf_i+0x15c>
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	079b      	lsls	r3, r3, #30
 800b234:	d413      	bmi.n	800b25e <_printf_i+0x22e>
 800b236:	68e0      	ldr	r0, [r4, #12]
 800b238:	9b03      	ldr	r3, [sp, #12]
 800b23a:	4298      	cmp	r0, r3
 800b23c:	bfb8      	it	lt
 800b23e:	4618      	movlt	r0, r3
 800b240:	e7a6      	b.n	800b190 <_printf_i+0x160>
 800b242:	2301      	movs	r3, #1
 800b244:	4632      	mov	r2, r6
 800b246:	4649      	mov	r1, r9
 800b248:	4640      	mov	r0, r8
 800b24a:	47d0      	blx	sl
 800b24c:	3001      	adds	r0, #1
 800b24e:	d09d      	beq.n	800b18c <_printf_i+0x15c>
 800b250:	3501      	adds	r5, #1
 800b252:	68e3      	ldr	r3, [r4, #12]
 800b254:	9903      	ldr	r1, [sp, #12]
 800b256:	1a5b      	subs	r3, r3, r1
 800b258:	42ab      	cmp	r3, r5
 800b25a:	dcf2      	bgt.n	800b242 <_printf_i+0x212>
 800b25c:	e7eb      	b.n	800b236 <_printf_i+0x206>
 800b25e:	2500      	movs	r5, #0
 800b260:	f104 0619 	add.w	r6, r4, #25
 800b264:	e7f5      	b.n	800b252 <_printf_i+0x222>
 800b266:	bf00      	nop
 800b268:	0800f23e 	.word	0x0800f23e
 800b26c:	0800f24f 	.word	0x0800f24f

0800b270 <_scanf_float>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b087      	sub	sp, #28
 800b276:	4617      	mov	r7, r2
 800b278:	9303      	str	r3, [sp, #12]
 800b27a:	688b      	ldr	r3, [r1, #8]
 800b27c:	1e5a      	subs	r2, r3, #1
 800b27e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b282:	bf81      	itttt	hi
 800b284:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b288:	eb03 0b05 	addhi.w	fp, r3, r5
 800b28c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b290:	608b      	strhi	r3, [r1, #8]
 800b292:	680b      	ldr	r3, [r1, #0]
 800b294:	460a      	mov	r2, r1
 800b296:	f04f 0500 	mov.w	r5, #0
 800b29a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b29e:	f842 3b1c 	str.w	r3, [r2], #28
 800b2a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	bf98      	it	ls
 800b2ac:	f04f 0b00 	movls.w	fp, #0
 800b2b0:	9201      	str	r2, [sp, #4]
 800b2b2:	4616      	mov	r6, r2
 800b2b4:	46aa      	mov	sl, r5
 800b2b6:	46a9      	mov	r9, r5
 800b2b8:	9502      	str	r5, [sp, #8]
 800b2ba:	68a2      	ldr	r2, [r4, #8]
 800b2bc:	b152      	cbz	r2, 800b2d4 <_scanf_float+0x64>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b4e      	cmp	r3, #78	@ 0x4e
 800b2c4:	d864      	bhi.n	800b390 <_scanf_float+0x120>
 800b2c6:	2b40      	cmp	r3, #64	@ 0x40
 800b2c8:	d83c      	bhi.n	800b344 <_scanf_float+0xd4>
 800b2ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b2ce:	b2c8      	uxtb	r0, r1
 800b2d0:	280e      	cmp	r0, #14
 800b2d2:	d93a      	bls.n	800b34a <_scanf_float+0xda>
 800b2d4:	f1b9 0f00 	cmp.w	r9, #0
 800b2d8:	d003      	beq.n	800b2e2 <_scanf_float+0x72>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b2e6:	f1ba 0f01 	cmp.w	sl, #1
 800b2ea:	f200 8117 	bhi.w	800b51c <_scanf_float+0x2ac>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	429e      	cmp	r6, r3
 800b2f2:	f200 8108 	bhi.w	800b506 <_scanf_float+0x296>
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	b007      	add	sp, #28
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b302:	2a0d      	cmp	r2, #13
 800b304:	d8e6      	bhi.n	800b2d4 <_scanf_float+0x64>
 800b306:	a101      	add	r1, pc, #4	@ (adr r1, 800b30c <_scanf_float+0x9c>)
 800b308:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b30c:	0800b453 	.word	0x0800b453
 800b310:	0800b2d5 	.word	0x0800b2d5
 800b314:	0800b2d5 	.word	0x0800b2d5
 800b318:	0800b2d5 	.word	0x0800b2d5
 800b31c:	0800b4b3 	.word	0x0800b4b3
 800b320:	0800b48b 	.word	0x0800b48b
 800b324:	0800b2d5 	.word	0x0800b2d5
 800b328:	0800b2d5 	.word	0x0800b2d5
 800b32c:	0800b461 	.word	0x0800b461
 800b330:	0800b2d5 	.word	0x0800b2d5
 800b334:	0800b2d5 	.word	0x0800b2d5
 800b338:	0800b2d5 	.word	0x0800b2d5
 800b33c:	0800b2d5 	.word	0x0800b2d5
 800b340:	0800b419 	.word	0x0800b419
 800b344:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b348:	e7db      	b.n	800b302 <_scanf_float+0x92>
 800b34a:	290e      	cmp	r1, #14
 800b34c:	d8c2      	bhi.n	800b2d4 <_scanf_float+0x64>
 800b34e:	a001      	add	r0, pc, #4	@ (adr r0, 800b354 <_scanf_float+0xe4>)
 800b350:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b354:	0800b409 	.word	0x0800b409
 800b358:	0800b2d5 	.word	0x0800b2d5
 800b35c:	0800b409 	.word	0x0800b409
 800b360:	0800b49f 	.word	0x0800b49f
 800b364:	0800b2d5 	.word	0x0800b2d5
 800b368:	0800b3b1 	.word	0x0800b3b1
 800b36c:	0800b3ef 	.word	0x0800b3ef
 800b370:	0800b3ef 	.word	0x0800b3ef
 800b374:	0800b3ef 	.word	0x0800b3ef
 800b378:	0800b3ef 	.word	0x0800b3ef
 800b37c:	0800b3ef 	.word	0x0800b3ef
 800b380:	0800b3ef 	.word	0x0800b3ef
 800b384:	0800b3ef 	.word	0x0800b3ef
 800b388:	0800b3ef 	.word	0x0800b3ef
 800b38c:	0800b3ef 	.word	0x0800b3ef
 800b390:	2b6e      	cmp	r3, #110	@ 0x6e
 800b392:	d809      	bhi.n	800b3a8 <_scanf_float+0x138>
 800b394:	2b60      	cmp	r3, #96	@ 0x60
 800b396:	d8b2      	bhi.n	800b2fe <_scanf_float+0x8e>
 800b398:	2b54      	cmp	r3, #84	@ 0x54
 800b39a:	d07b      	beq.n	800b494 <_scanf_float+0x224>
 800b39c:	2b59      	cmp	r3, #89	@ 0x59
 800b39e:	d199      	bne.n	800b2d4 <_scanf_float+0x64>
 800b3a0:	2d07      	cmp	r5, #7
 800b3a2:	d197      	bne.n	800b2d4 <_scanf_float+0x64>
 800b3a4:	2508      	movs	r5, #8
 800b3a6:	e02c      	b.n	800b402 <_scanf_float+0x192>
 800b3a8:	2b74      	cmp	r3, #116	@ 0x74
 800b3aa:	d073      	beq.n	800b494 <_scanf_float+0x224>
 800b3ac:	2b79      	cmp	r3, #121	@ 0x79
 800b3ae:	e7f6      	b.n	800b39e <_scanf_float+0x12e>
 800b3b0:	6821      	ldr	r1, [r4, #0]
 800b3b2:	05c8      	lsls	r0, r1, #23
 800b3b4:	d51b      	bpl.n	800b3ee <_scanf_float+0x17e>
 800b3b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b3ba:	6021      	str	r1, [r4, #0]
 800b3bc:	f109 0901 	add.w	r9, r9, #1
 800b3c0:	f1bb 0f00 	cmp.w	fp, #0
 800b3c4:	d003      	beq.n	800b3ce <_scanf_float+0x15e>
 800b3c6:	3201      	adds	r2, #1
 800b3c8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800b3cc:	60a2      	str	r2, [r4, #8]
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	60a3      	str	r3, [r4, #8]
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	607b      	str	r3, [r7, #4]
 800b3e2:	f340 8087 	ble.w	800b4f4 <_scanf_float+0x284>
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	603b      	str	r3, [r7, #0]
 800b3ec:	e765      	b.n	800b2ba <_scanf_float+0x4a>
 800b3ee:	eb1a 0105 	adds.w	r1, sl, r5
 800b3f2:	f47f af6f 	bne.w	800b2d4 <_scanf_float+0x64>
 800b3f6:	6822      	ldr	r2, [r4, #0]
 800b3f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b3fc:	6022      	str	r2, [r4, #0]
 800b3fe:	460d      	mov	r5, r1
 800b400:	468a      	mov	sl, r1
 800b402:	f806 3b01 	strb.w	r3, [r6], #1
 800b406:	e7e2      	b.n	800b3ce <_scanf_float+0x15e>
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	0610      	lsls	r0, r2, #24
 800b40c:	f57f af62 	bpl.w	800b2d4 <_scanf_float+0x64>
 800b410:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b414:	6022      	str	r2, [r4, #0]
 800b416:	e7f4      	b.n	800b402 <_scanf_float+0x192>
 800b418:	f1ba 0f00 	cmp.w	sl, #0
 800b41c:	d10e      	bne.n	800b43c <_scanf_float+0x1cc>
 800b41e:	f1b9 0f00 	cmp.w	r9, #0
 800b422:	d10e      	bne.n	800b442 <_scanf_float+0x1d2>
 800b424:	6822      	ldr	r2, [r4, #0]
 800b426:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b42a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b42e:	d108      	bne.n	800b442 <_scanf_float+0x1d2>
 800b430:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	f04f 0a01 	mov.w	sl, #1
 800b43a:	e7e2      	b.n	800b402 <_scanf_float+0x192>
 800b43c:	f1ba 0f02 	cmp.w	sl, #2
 800b440:	d055      	beq.n	800b4ee <_scanf_float+0x27e>
 800b442:	2d01      	cmp	r5, #1
 800b444:	d002      	beq.n	800b44c <_scanf_float+0x1dc>
 800b446:	2d04      	cmp	r5, #4
 800b448:	f47f af44 	bne.w	800b2d4 <_scanf_float+0x64>
 800b44c:	3501      	adds	r5, #1
 800b44e:	b2ed      	uxtb	r5, r5
 800b450:	e7d7      	b.n	800b402 <_scanf_float+0x192>
 800b452:	f1ba 0f01 	cmp.w	sl, #1
 800b456:	f47f af3d 	bne.w	800b2d4 <_scanf_float+0x64>
 800b45a:	f04f 0a02 	mov.w	sl, #2
 800b45e:	e7d0      	b.n	800b402 <_scanf_float+0x192>
 800b460:	b97d      	cbnz	r5, 800b482 <_scanf_float+0x212>
 800b462:	f1b9 0f00 	cmp.w	r9, #0
 800b466:	f47f af38 	bne.w	800b2da <_scanf_float+0x6a>
 800b46a:	6822      	ldr	r2, [r4, #0]
 800b46c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b470:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b474:	f040 8108 	bne.w	800b688 <_scanf_float+0x418>
 800b478:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b47c:	6022      	str	r2, [r4, #0]
 800b47e:	2501      	movs	r5, #1
 800b480:	e7bf      	b.n	800b402 <_scanf_float+0x192>
 800b482:	2d03      	cmp	r5, #3
 800b484:	d0e2      	beq.n	800b44c <_scanf_float+0x1dc>
 800b486:	2d05      	cmp	r5, #5
 800b488:	e7de      	b.n	800b448 <_scanf_float+0x1d8>
 800b48a:	2d02      	cmp	r5, #2
 800b48c:	f47f af22 	bne.w	800b2d4 <_scanf_float+0x64>
 800b490:	2503      	movs	r5, #3
 800b492:	e7b6      	b.n	800b402 <_scanf_float+0x192>
 800b494:	2d06      	cmp	r5, #6
 800b496:	f47f af1d 	bne.w	800b2d4 <_scanf_float+0x64>
 800b49a:	2507      	movs	r5, #7
 800b49c:	e7b1      	b.n	800b402 <_scanf_float+0x192>
 800b49e:	6822      	ldr	r2, [r4, #0]
 800b4a0:	0591      	lsls	r1, r2, #22
 800b4a2:	f57f af17 	bpl.w	800b2d4 <_scanf_float+0x64>
 800b4a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4b0:	e7a7      	b.n	800b402 <_scanf_float+0x192>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b4b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b4bc:	d006      	beq.n	800b4cc <_scanf_float+0x25c>
 800b4be:	0550      	lsls	r0, r2, #21
 800b4c0:	f57f af08 	bpl.w	800b2d4 <_scanf_float+0x64>
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	f000 80de 	beq.w	800b688 <_scanf_float+0x418>
 800b4cc:	0591      	lsls	r1, r2, #22
 800b4ce:	bf58      	it	pl
 800b4d0:	9902      	ldrpl	r1, [sp, #8]
 800b4d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4d6:	bf58      	it	pl
 800b4d8:	eba9 0101 	subpl.w	r1, r9, r1
 800b4dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b4e0:	bf58      	it	pl
 800b4e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b4e6:	6022      	str	r2, [r4, #0]
 800b4e8:	f04f 0900 	mov.w	r9, #0
 800b4ec:	e789      	b.n	800b402 <_scanf_float+0x192>
 800b4ee:	f04f 0a03 	mov.w	sl, #3
 800b4f2:	e786      	b.n	800b402 <_scanf_float+0x192>
 800b4f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4798      	blx	r3
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f aedb 	beq.w	800b2ba <_scanf_float+0x4a>
 800b504:	e6e6      	b.n	800b2d4 <_scanf_float+0x64>
 800b506:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b50a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b50e:	463a      	mov	r2, r7
 800b510:	4640      	mov	r0, r8
 800b512:	4798      	blx	r3
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	3b01      	subs	r3, #1
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	e6e8      	b.n	800b2ee <_scanf_float+0x7e>
 800b51c:	1e6b      	subs	r3, r5, #1
 800b51e:	2b06      	cmp	r3, #6
 800b520:	d824      	bhi.n	800b56c <_scanf_float+0x2fc>
 800b522:	2d02      	cmp	r5, #2
 800b524:	d836      	bhi.n	800b594 <_scanf_float+0x324>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	429e      	cmp	r6, r3
 800b52a:	f67f aee4 	bls.w	800b2f6 <_scanf_float+0x86>
 800b52e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b536:	463a      	mov	r2, r7
 800b538:	4640      	mov	r0, r8
 800b53a:	4798      	blx	r3
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	3b01      	subs	r3, #1
 800b540:	6123      	str	r3, [r4, #16]
 800b542:	e7f0      	b.n	800b526 <_scanf_float+0x2b6>
 800b544:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b548:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b54c:	463a      	mov	r2, r7
 800b54e:	4640      	mov	r0, r8
 800b550:	4798      	blx	r3
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	3b01      	subs	r3, #1
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b55c:	fa5f fa8a 	uxtb.w	sl, sl
 800b560:	f1ba 0f02 	cmp.w	sl, #2
 800b564:	d1ee      	bne.n	800b544 <_scanf_float+0x2d4>
 800b566:	3d03      	subs	r5, #3
 800b568:	b2ed      	uxtb	r5, r5
 800b56a:	1b76      	subs	r6, r6, r5
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	05da      	lsls	r2, r3, #23
 800b570:	d530      	bpl.n	800b5d4 <_scanf_float+0x364>
 800b572:	055b      	lsls	r3, r3, #21
 800b574:	d511      	bpl.n	800b59a <_scanf_float+0x32a>
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	429e      	cmp	r6, r3
 800b57a:	f67f aebc 	bls.w	800b2f6 <_scanf_float+0x86>
 800b57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b586:	463a      	mov	r2, r7
 800b588:	4640      	mov	r0, r8
 800b58a:	4798      	blx	r3
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	3b01      	subs	r3, #1
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	e7f0      	b.n	800b576 <_scanf_float+0x306>
 800b594:	46aa      	mov	sl, r5
 800b596:	46b3      	mov	fp, r6
 800b598:	e7de      	b.n	800b558 <_scanf_float+0x2e8>
 800b59a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	2965      	cmp	r1, #101	@ 0x65
 800b5a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b5a6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b5aa:	6123      	str	r3, [r4, #16]
 800b5ac:	d00c      	beq.n	800b5c8 <_scanf_float+0x358>
 800b5ae:	2945      	cmp	r1, #69	@ 0x45
 800b5b0:	d00a      	beq.n	800b5c8 <_scanf_float+0x358>
 800b5b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4798      	blx	r3
 800b5bc:	6923      	ldr	r3, [r4, #16]
 800b5be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	1eb5      	subs	r5, r6, #2
 800b5c6:	6123      	str	r3, [r4, #16]
 800b5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5cc:	463a      	mov	r2, r7
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	4798      	blx	r3
 800b5d2:	462e      	mov	r6, r5
 800b5d4:	6822      	ldr	r2, [r4, #0]
 800b5d6:	f012 0210 	ands.w	r2, r2, #16
 800b5da:	d001      	beq.n	800b5e0 <_scanf_float+0x370>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	e68b      	b.n	800b2f8 <_scanf_float+0x88>
 800b5e0:	7032      	strb	r2, [r6, #0]
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b5e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ec:	d11c      	bne.n	800b628 <_scanf_float+0x3b8>
 800b5ee:	9b02      	ldr	r3, [sp, #8]
 800b5f0:	454b      	cmp	r3, r9
 800b5f2:	eba3 0209 	sub.w	r2, r3, r9
 800b5f6:	d123      	bne.n	800b640 <_scanf_float+0x3d0>
 800b5f8:	9901      	ldr	r1, [sp, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	f000 ff1f 	bl	800c440 <_strtod_r>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	6821      	ldr	r1, [r4, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f011 0f02 	tst.w	r1, #2
 800b60c:	ec57 6b10 	vmov	r6, r7, d0
 800b610:	f103 0204 	add.w	r2, r3, #4
 800b614:	d01f      	beq.n	800b656 <_scanf_float+0x3e6>
 800b616:	9903      	ldr	r1, [sp, #12]
 800b618:	600a      	str	r2, [r1, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	e9c3 6700 	strd	r6, r7, [r3]
 800b620:	68e3      	ldr	r3, [r4, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	60e3      	str	r3, [r4, #12]
 800b626:	e7d9      	b.n	800b5dc <_scanf_float+0x36c>
 800b628:	9b04      	ldr	r3, [sp, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0e4      	beq.n	800b5f8 <_scanf_float+0x388>
 800b62e:	9905      	ldr	r1, [sp, #20]
 800b630:	230a      	movs	r3, #10
 800b632:	3101      	adds	r1, #1
 800b634:	4640      	mov	r0, r8
 800b636:	f000 ff83 	bl	800c540 <_strtol_r>
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	9e05      	ldr	r6, [sp, #20]
 800b63e:	1ac2      	subs	r2, r0, r3
 800b640:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b644:	429e      	cmp	r6, r3
 800b646:	bf28      	it	cs
 800b648:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b64c:	4910      	ldr	r1, [pc, #64]	@ (800b690 <_scanf_float+0x420>)
 800b64e:	4630      	mov	r0, r6
 800b650:	f000 f82e 	bl	800b6b0 <siprintf>
 800b654:	e7d0      	b.n	800b5f8 <_scanf_float+0x388>
 800b656:	f011 0f04 	tst.w	r1, #4
 800b65a:	9903      	ldr	r1, [sp, #12]
 800b65c:	600a      	str	r2, [r1, #0]
 800b65e:	d1dc      	bne.n	800b61a <_scanf_float+0x3aa>
 800b660:	681d      	ldr	r5, [r3, #0]
 800b662:	4632      	mov	r2, r6
 800b664:	463b      	mov	r3, r7
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f5 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 800b66e:	b128      	cbz	r0, 800b67c <_scanf_float+0x40c>
 800b670:	4808      	ldr	r0, [pc, #32]	@ (800b694 <_scanf_float+0x424>)
 800b672:	f001 f869 	bl	800c748 <nanf>
 800b676:	ed85 0a00 	vstr	s0, [r5]
 800b67a:	e7d1      	b.n	800b620 <_scanf_float+0x3b0>
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f5 fab2 	bl	8000be8 <__aeabi_d2f>
 800b684:	6028      	str	r0, [r5, #0]
 800b686:	e7cb      	b.n	800b620 <_scanf_float+0x3b0>
 800b688:	f04f 0900 	mov.w	r9, #0
 800b68c:	e629      	b.n	800b2e2 <_scanf_float+0x72>
 800b68e:	bf00      	nop
 800b690:	0800f260 	.word	0x0800f260
 800b694:	0800f653 	.word	0x0800f653

0800b698 <__malloc_lock>:
 800b698:	4801      	ldr	r0, [pc, #4]	@ (800b6a0 <__malloc_lock+0x8>)
 800b69a:	f001 b83a 	b.w	800c712 <__retarget_lock_acquire_recursive>
 800b69e:	bf00      	nop
 800b6a0:	20000c60 	.word	0x20000c60

0800b6a4 <__malloc_unlock>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	@ (800b6ac <__malloc_unlock+0x8>)
 800b6a6:	f001 b835 	b.w	800c714 <__retarget_lock_release_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	20000c60 	.word	0x20000c60

0800b6b0 <siprintf>:
 800b6b0:	b40e      	push	{r1, r2, r3}
 800b6b2:	b500      	push	{lr}
 800b6b4:	b09c      	sub	sp, #112	@ 0x70
 800b6b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b6b8:	9002      	str	r0, [sp, #8]
 800b6ba:	9006      	str	r0, [sp, #24]
 800b6bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b6c0:	4809      	ldr	r0, [pc, #36]	@ (800b6e8 <siprintf+0x38>)
 800b6c2:	9107      	str	r1, [sp, #28]
 800b6c4:	9104      	str	r1, [sp, #16]
 800b6c6:	4909      	ldr	r1, [pc, #36]	@ (800b6ec <siprintf+0x3c>)
 800b6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6cc:	9105      	str	r1, [sp, #20]
 800b6ce:	6800      	ldr	r0, [r0, #0]
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	a902      	add	r1, sp, #8
 800b6d4:	f002 fa6a 	bl	800dbac <_svfiprintf_r>
 800b6d8:	9b02      	ldr	r3, [sp, #8]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	701a      	strb	r2, [r3, #0]
 800b6de:	b01c      	add	sp, #112	@ 0x70
 800b6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e4:	b003      	add	sp, #12
 800b6e6:	4770      	bx	lr
 800b6e8:	200001a4 	.word	0x200001a4
 800b6ec:	ffff0208 	.word	0xffff0208

0800b6f0 <std>:
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6fe:	6083      	str	r3, [r0, #8]
 800b700:	8181      	strh	r1, [r0, #12]
 800b702:	6643      	str	r3, [r0, #100]	@ 0x64
 800b704:	81c2      	strh	r2, [r0, #14]
 800b706:	6183      	str	r3, [r0, #24]
 800b708:	4619      	mov	r1, r3
 800b70a:	2208      	movs	r2, #8
 800b70c:	305c      	adds	r0, #92	@ 0x5c
 800b70e:	f000 ffb9 	bl	800c684 <memset>
 800b712:	4b0d      	ldr	r3, [pc, #52]	@ (800b748 <std+0x58>)
 800b714:	6263      	str	r3, [r4, #36]	@ 0x24
 800b716:	4b0d      	ldr	r3, [pc, #52]	@ (800b74c <std+0x5c>)
 800b718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b71a:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <std+0x60>)
 800b71c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b71e:	4b0d      	ldr	r3, [pc, #52]	@ (800b754 <std+0x64>)
 800b720:	6323      	str	r3, [r4, #48]	@ 0x30
 800b722:	4b0d      	ldr	r3, [pc, #52]	@ (800b758 <std+0x68>)
 800b724:	6224      	str	r4, [r4, #32]
 800b726:	429c      	cmp	r4, r3
 800b728:	d006      	beq.n	800b738 <std+0x48>
 800b72a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b72e:	4294      	cmp	r4, r2
 800b730:	d002      	beq.n	800b738 <std+0x48>
 800b732:	33d0      	adds	r3, #208	@ 0xd0
 800b734:	429c      	cmp	r4, r3
 800b736:	d105      	bne.n	800b744 <std+0x54>
 800b738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b740:	f000 bfe6 	b.w	800c710 <__retarget_lock_init_recursive>
 800b744:	bd10      	pop	{r4, pc}
 800b746:	bf00      	nop
 800b748:	0800eb09 	.word	0x0800eb09
 800b74c:	0800eb2b 	.word	0x0800eb2b
 800b750:	0800eb63 	.word	0x0800eb63
 800b754:	0800eb87 	.word	0x0800eb87
 800b758:	20000b24 	.word	0x20000b24

0800b75c <stdio_exit_handler>:
 800b75c:	4a02      	ldr	r2, [pc, #8]	@ (800b768 <stdio_exit_handler+0xc>)
 800b75e:	4903      	ldr	r1, [pc, #12]	@ (800b76c <stdio_exit_handler+0x10>)
 800b760:	4803      	ldr	r0, [pc, #12]	@ (800b770 <stdio_exit_handler+0x14>)
 800b762:	f000 beef 	b.w	800c544 <_fwalk_sglue>
 800b766:	bf00      	nop
 800b768:	2000002c 	.word	0x2000002c
 800b76c:	0800e155 	.word	0x0800e155
 800b770:	200001a8 	.word	0x200001a8

0800b774 <cleanup_stdio>:
 800b774:	6841      	ldr	r1, [r0, #4]
 800b776:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a8 <cleanup_stdio+0x34>)
 800b778:	4299      	cmp	r1, r3
 800b77a:	b510      	push	{r4, lr}
 800b77c:	4604      	mov	r4, r0
 800b77e:	d001      	beq.n	800b784 <cleanup_stdio+0x10>
 800b780:	f002 fce8 	bl	800e154 <_fflush_r>
 800b784:	68a1      	ldr	r1, [r4, #8]
 800b786:	4b09      	ldr	r3, [pc, #36]	@ (800b7ac <cleanup_stdio+0x38>)
 800b788:	4299      	cmp	r1, r3
 800b78a:	d002      	beq.n	800b792 <cleanup_stdio+0x1e>
 800b78c:	4620      	mov	r0, r4
 800b78e:	f002 fce1 	bl	800e154 <_fflush_r>
 800b792:	68e1      	ldr	r1, [r4, #12]
 800b794:	4b06      	ldr	r3, [pc, #24]	@ (800b7b0 <cleanup_stdio+0x3c>)
 800b796:	4299      	cmp	r1, r3
 800b798:	d004      	beq.n	800b7a4 <cleanup_stdio+0x30>
 800b79a:	4620      	mov	r0, r4
 800b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a0:	f002 bcd8 	b.w	800e154 <_fflush_r>
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000b24 	.word	0x20000b24
 800b7ac:	20000b8c 	.word	0x20000b8c
 800b7b0:	20000bf4 	.word	0x20000bf4

0800b7b4 <global_stdio_init.part.0>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e4 <global_stdio_init.part.0+0x30>)
 800b7b8:	4c0b      	ldr	r4, [pc, #44]	@ (800b7e8 <global_stdio_init.part.0+0x34>)
 800b7ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b7ec <global_stdio_init.part.0+0x38>)
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2104      	movs	r1, #4
 800b7c4:	f7ff ff94 	bl	800b6f0 <std>
 800b7c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	2109      	movs	r1, #9
 800b7d0:	f7ff ff8e 	bl	800b6f0 <std>
 800b7d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7d8:	2202      	movs	r2, #2
 800b7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7de:	2112      	movs	r1, #18
 800b7e0:	f7ff bf86 	b.w	800b6f0 <std>
 800b7e4:	20000c5c 	.word	0x20000c5c
 800b7e8:	20000b24 	.word	0x20000b24
 800b7ec:	0800b75d 	.word	0x0800b75d

0800b7f0 <__sfp_lock_acquire>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	@ (800b7f8 <__sfp_lock_acquire+0x8>)
 800b7f2:	f000 bf8e 	b.w	800c712 <__retarget_lock_acquire_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	20000c61 	.word	0x20000c61

0800b7fc <__sfp_lock_release>:
 800b7fc:	4801      	ldr	r0, [pc, #4]	@ (800b804 <__sfp_lock_release+0x8>)
 800b7fe:	f000 bf89 	b.w	800c714 <__retarget_lock_release_recursive>
 800b802:	bf00      	nop
 800b804:	20000c61 	.word	0x20000c61

0800b808 <__sinit>:
 800b808:	b510      	push	{r4, lr}
 800b80a:	4604      	mov	r4, r0
 800b80c:	f7ff fff0 	bl	800b7f0 <__sfp_lock_acquire>
 800b810:	6a23      	ldr	r3, [r4, #32]
 800b812:	b11b      	cbz	r3, 800b81c <__sinit+0x14>
 800b814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b818:	f7ff bff0 	b.w	800b7fc <__sfp_lock_release>
 800b81c:	4b04      	ldr	r3, [pc, #16]	@ (800b830 <__sinit+0x28>)
 800b81e:	6223      	str	r3, [r4, #32]
 800b820:	4b04      	ldr	r3, [pc, #16]	@ (800b834 <__sinit+0x2c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1f5      	bne.n	800b814 <__sinit+0xc>
 800b828:	f7ff ffc4 	bl	800b7b4 <global_stdio_init.part.0>
 800b82c:	e7f2      	b.n	800b814 <__sinit+0xc>
 800b82e:	bf00      	nop
 800b830:	0800b775 	.word	0x0800b775
 800b834:	20000c5c 	.word	0x20000c5c

0800b838 <sulp>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	4604      	mov	r4, r0
 800b83c:	460d      	mov	r5, r1
 800b83e:	ec45 4b10 	vmov	d0, r4, r5
 800b842:	4616      	mov	r6, r2
 800b844:	f003 f822 	bl	800e88c <__ulp>
 800b848:	ec51 0b10 	vmov	r0, r1, d0
 800b84c:	b17e      	cbz	r6, 800b86e <sulp+0x36>
 800b84e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b852:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b856:	2b00      	cmp	r3, #0
 800b858:	dd09      	ble.n	800b86e <sulp+0x36>
 800b85a:	051b      	lsls	r3, r3, #20
 800b85c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b860:	2400      	movs	r4, #0
 800b862:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b866:	4622      	mov	r2, r4
 800b868:	462b      	mov	r3, r5
 800b86a:	f7f4 fec5 	bl	80005f8 <__aeabi_dmul>
 800b86e:	ec41 0b10 	vmov	d0, r0, r1
 800b872:	bd70      	pop	{r4, r5, r6, pc}
 800b874:	0000      	movs	r0, r0
	...

0800b878 <_strtod_l>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	b09f      	sub	sp, #124	@ 0x7c
 800b87e:	460c      	mov	r4, r1
 800b880:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b882:	2200      	movs	r2, #0
 800b884:	921a      	str	r2, [sp, #104]	@ 0x68
 800b886:	9005      	str	r0, [sp, #20]
 800b888:	f04f 0a00 	mov.w	sl, #0
 800b88c:	f04f 0b00 	mov.w	fp, #0
 800b890:	460a      	mov	r2, r1
 800b892:	9219      	str	r2, [sp, #100]	@ 0x64
 800b894:	7811      	ldrb	r1, [r2, #0]
 800b896:	292b      	cmp	r1, #43	@ 0x2b
 800b898:	d04a      	beq.n	800b930 <_strtod_l+0xb8>
 800b89a:	d838      	bhi.n	800b90e <_strtod_l+0x96>
 800b89c:	290d      	cmp	r1, #13
 800b89e:	d832      	bhi.n	800b906 <_strtod_l+0x8e>
 800b8a0:	2908      	cmp	r1, #8
 800b8a2:	d832      	bhi.n	800b90a <_strtod_l+0x92>
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	d03b      	beq.n	800b920 <_strtod_l+0xa8>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b8ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b8ae:	782a      	ldrb	r2, [r5, #0]
 800b8b0:	2a30      	cmp	r2, #48	@ 0x30
 800b8b2:	f040 80b3 	bne.w	800ba1c <_strtod_l+0x1a4>
 800b8b6:	786a      	ldrb	r2, [r5, #1]
 800b8b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8bc:	2a58      	cmp	r2, #88	@ 0x58
 800b8be:	d16e      	bne.n	800b99e <_strtod_l+0x126>
 800b8c0:	9302      	str	r3, [sp, #8]
 800b8c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	4a8e      	ldr	r2, [pc, #568]	@ (800bb04 <_strtod_l+0x28c>)
 800b8cc:	9805      	ldr	r0, [sp, #20]
 800b8ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b8d0:	a919      	add	r1, sp, #100	@ 0x64
 800b8d2:	f001 fe3f 	bl	800d554 <__gethex>
 800b8d6:	f010 060f 	ands.w	r6, r0, #15
 800b8da:	4604      	mov	r4, r0
 800b8dc:	d005      	beq.n	800b8ea <_strtod_l+0x72>
 800b8de:	2e06      	cmp	r6, #6
 800b8e0:	d128      	bne.n	800b934 <_strtod_l+0xbc>
 800b8e2:	3501      	adds	r5, #1
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b8e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 858e 	bne.w	800c40e <_strtod_l+0xb96>
 800b8f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8f4:	b1cb      	cbz	r3, 800b92a <_strtod_l+0xb2>
 800b8f6:	4652      	mov	r2, sl
 800b8f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b8fc:	ec43 2b10 	vmov	d0, r2, r3
 800b900:	b01f      	add	sp, #124	@ 0x7c
 800b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	2920      	cmp	r1, #32
 800b908:	d1ce      	bne.n	800b8a8 <_strtod_l+0x30>
 800b90a:	3201      	adds	r2, #1
 800b90c:	e7c1      	b.n	800b892 <_strtod_l+0x1a>
 800b90e:	292d      	cmp	r1, #45	@ 0x2d
 800b910:	d1ca      	bne.n	800b8a8 <_strtod_l+0x30>
 800b912:	2101      	movs	r1, #1
 800b914:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b916:	1c51      	adds	r1, r2, #1
 800b918:	9119      	str	r1, [sp, #100]	@ 0x64
 800b91a:	7852      	ldrb	r2, [r2, #1]
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	d1c5      	bne.n	800b8ac <_strtod_l+0x34>
 800b920:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b922:	9419      	str	r4, [sp, #100]	@ 0x64
 800b924:	2b00      	cmp	r3, #0
 800b926:	f040 8570 	bne.w	800c40a <_strtod_l+0xb92>
 800b92a:	4652      	mov	r2, sl
 800b92c:	465b      	mov	r3, fp
 800b92e:	e7e5      	b.n	800b8fc <_strtod_l+0x84>
 800b930:	2100      	movs	r1, #0
 800b932:	e7ef      	b.n	800b914 <_strtod_l+0x9c>
 800b934:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b936:	b13a      	cbz	r2, 800b948 <_strtod_l+0xd0>
 800b938:	2135      	movs	r1, #53	@ 0x35
 800b93a:	a81c      	add	r0, sp, #112	@ 0x70
 800b93c:	f003 f8a0 	bl	800ea80 <__copybits>
 800b940:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b942:	9805      	ldr	r0, [sp, #20]
 800b944:	f002 fc6e 	bl	800e224 <_Bfree>
 800b948:	3e01      	subs	r6, #1
 800b94a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b94c:	2e04      	cmp	r6, #4
 800b94e:	d806      	bhi.n	800b95e <_strtod_l+0xe6>
 800b950:	e8df f006 	tbb	[pc, r6]
 800b954:	201d0314 	.word	0x201d0314
 800b958:	14          	.byte	0x14
 800b959:	00          	.byte	0x00
 800b95a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b95e:	05e1      	lsls	r1, r4, #23
 800b960:	bf48      	it	mi
 800b962:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b966:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b96a:	0d1b      	lsrs	r3, r3, #20
 800b96c:	051b      	lsls	r3, r3, #20
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1bb      	bne.n	800b8ea <_strtod_l+0x72>
 800b972:	f000 fea3 	bl	800c6bc <__errno>
 800b976:	2322      	movs	r3, #34	@ 0x22
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	e7b6      	b.n	800b8ea <_strtod_l+0x72>
 800b97c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b980:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b984:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b988:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b98c:	e7e7      	b.n	800b95e <_strtod_l+0xe6>
 800b98e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bb0c <_strtod_l+0x294>
 800b992:	e7e4      	b.n	800b95e <_strtod_l+0xe6>
 800b994:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b998:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b99c:	e7df      	b.n	800b95e <_strtod_l+0xe6>
 800b99e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9a4:	785b      	ldrb	r3, [r3, #1]
 800b9a6:	2b30      	cmp	r3, #48	@ 0x30
 800b9a8:	d0f9      	beq.n	800b99e <_strtod_l+0x126>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d09d      	beq.n	800b8ea <_strtod_l+0x72>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	9308      	str	r3, [sp, #32]
 800b9ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9bc:	461f      	mov	r7, r3
 800b9be:	220a      	movs	r2, #10
 800b9c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b9c2:	7805      	ldrb	r5, [r0, #0]
 800b9c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b9c8:	b2d9      	uxtb	r1, r3
 800b9ca:	2909      	cmp	r1, #9
 800b9cc:	d928      	bls.n	800ba20 <_strtod_l+0x1a8>
 800b9ce:	494e      	ldr	r1, [pc, #312]	@ (800bb08 <_strtod_l+0x290>)
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f000 fe45 	bl	800c660 <strncmp>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d032      	beq.n	800ba40 <_strtod_l+0x1c8>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	462a      	mov	r2, r5
 800b9de:	4681      	mov	r9, r0
 800b9e0:	463d      	mov	r5, r7
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2a65      	cmp	r2, #101	@ 0x65
 800b9e6:	d001      	beq.n	800b9ec <_strtod_l+0x174>
 800b9e8:	2a45      	cmp	r2, #69	@ 0x45
 800b9ea:	d114      	bne.n	800ba16 <_strtod_l+0x19e>
 800b9ec:	b91d      	cbnz	r5, 800b9f6 <_strtod_l+0x17e>
 800b9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f0:	4302      	orrs	r2, r0
 800b9f2:	d095      	beq.n	800b920 <_strtod_l+0xa8>
 800b9f4:	2500      	movs	r5, #0
 800b9f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b9f8:	1c62      	adds	r2, r4, #1
 800b9fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9fc:	7862      	ldrb	r2, [r4, #1]
 800b9fe:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba00:	d077      	beq.n	800baf2 <_strtod_l+0x27a>
 800ba02:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba04:	d07b      	beq.n	800bafe <_strtod_l+0x286>
 800ba06:	f04f 0c00 	mov.w	ip, #0
 800ba0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ba0e:	2909      	cmp	r1, #9
 800ba10:	f240 8082 	bls.w	800bb18 <_strtod_l+0x2a0>
 800ba14:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba16:	f04f 0800 	mov.w	r8, #0
 800ba1a:	e0a2      	b.n	800bb62 <_strtod_l+0x2ea>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e7c7      	b.n	800b9b0 <_strtod_l+0x138>
 800ba20:	2f08      	cmp	r7, #8
 800ba22:	bfd5      	itete	le
 800ba24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ba26:	9908      	ldrgt	r1, [sp, #32]
 800ba28:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ba30:	f100 0001 	add.w	r0, r0, #1
 800ba34:	bfd4      	ite	le
 800ba36:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ba38:	9308      	strgt	r3, [sp, #32]
 800ba3a:	3701      	adds	r7, #1
 800ba3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba3e:	e7bf      	b.n	800b9c0 <_strtod_l+0x148>
 800ba40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba46:	785a      	ldrb	r2, [r3, #1]
 800ba48:	b37f      	cbz	r7, 800baaa <_strtod_l+0x232>
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	463d      	mov	r5, r7
 800ba4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba52:	2b09      	cmp	r3, #9
 800ba54:	d912      	bls.n	800ba7c <_strtod_l+0x204>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e7c4      	b.n	800b9e4 <_strtod_l+0x16c>
 800ba5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba5c:	1c5a      	adds	r2, r3, #1
 800ba5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba60:	785a      	ldrb	r2, [r3, #1]
 800ba62:	3001      	adds	r0, #1
 800ba64:	2a30      	cmp	r2, #48	@ 0x30
 800ba66:	d0f8      	beq.n	800ba5a <_strtod_l+0x1e2>
 800ba68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba6c:	2b08      	cmp	r3, #8
 800ba6e:	f200 84d3 	bhi.w	800c418 <_strtod_l+0xba0>
 800ba72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba76:	4681      	mov	r9, r0
 800ba78:	2000      	movs	r0, #0
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	3a30      	subs	r2, #48	@ 0x30
 800ba7e:	f100 0301 	add.w	r3, r0, #1
 800ba82:	d02a      	beq.n	800bada <_strtod_l+0x262>
 800ba84:	4499      	add	r9, r3
 800ba86:	eb00 0c05 	add.w	ip, r0, r5
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	210a      	movs	r1, #10
 800ba8e:	4563      	cmp	r3, ip
 800ba90:	d10d      	bne.n	800baae <_strtod_l+0x236>
 800ba92:	1c69      	adds	r1, r5, #1
 800ba94:	4401      	add	r1, r0
 800ba96:	4428      	add	r0, r5
 800ba98:	2808      	cmp	r0, #8
 800ba9a:	dc16      	bgt.n	800baca <_strtod_l+0x252>
 800ba9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba9e:	230a      	movs	r3, #10
 800baa0:	fb03 2300 	mla	r3, r3, r0, r2
 800baa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa6:	2300      	movs	r3, #0
 800baa8:	e018      	b.n	800badc <_strtod_l+0x264>
 800baaa:	4638      	mov	r0, r7
 800baac:	e7da      	b.n	800ba64 <_strtod_l+0x1ec>
 800baae:	2b08      	cmp	r3, #8
 800bab0:	f103 0301 	add.w	r3, r3, #1
 800bab4:	dc03      	bgt.n	800babe <_strtod_l+0x246>
 800bab6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bab8:	434e      	muls	r6, r1
 800baba:	960a      	str	r6, [sp, #40]	@ 0x28
 800babc:	e7e7      	b.n	800ba8e <_strtod_l+0x216>
 800babe:	2b10      	cmp	r3, #16
 800bac0:	bfde      	ittt	le
 800bac2:	9e08      	ldrle	r6, [sp, #32]
 800bac4:	434e      	mulle	r6, r1
 800bac6:	9608      	strle	r6, [sp, #32]
 800bac8:	e7e1      	b.n	800ba8e <_strtod_l+0x216>
 800baca:	280f      	cmp	r0, #15
 800bacc:	dceb      	bgt.n	800baa6 <_strtod_l+0x22e>
 800bace:	9808      	ldr	r0, [sp, #32]
 800bad0:	230a      	movs	r3, #10
 800bad2:	fb03 2300 	mla	r3, r3, r0, r2
 800bad6:	9308      	str	r3, [sp, #32]
 800bad8:	e7e5      	b.n	800baa6 <_strtod_l+0x22e>
 800bada:	4629      	mov	r1, r5
 800badc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bade:	1c50      	adds	r0, r2, #1
 800bae0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bae2:	7852      	ldrb	r2, [r2, #1]
 800bae4:	4618      	mov	r0, r3
 800bae6:	460d      	mov	r5, r1
 800bae8:	e7b1      	b.n	800ba4e <_strtod_l+0x1d6>
 800baea:	f04f 0900 	mov.w	r9, #0
 800baee:	2301      	movs	r3, #1
 800baf0:	e77d      	b.n	800b9ee <_strtod_l+0x176>
 800baf2:	f04f 0c00 	mov.w	ip, #0
 800baf6:	1ca2      	adds	r2, r4, #2
 800baf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800bafa:	78a2      	ldrb	r2, [r4, #2]
 800bafc:	e785      	b.n	800ba0a <_strtod_l+0x192>
 800bafe:	f04f 0c01 	mov.w	ip, #1
 800bb02:	e7f8      	b.n	800baf6 <_strtod_l+0x27e>
 800bb04:	0800f27c 	.word	0x0800f27c
 800bb08:	0800f265 	.word	0x0800f265
 800bb0c:	7ff00000 	.word	0x7ff00000
 800bb10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb12:	1c51      	adds	r1, r2, #1
 800bb14:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb16:	7852      	ldrb	r2, [r2, #1]
 800bb18:	2a30      	cmp	r2, #48	@ 0x30
 800bb1a:	d0f9      	beq.n	800bb10 <_strtod_l+0x298>
 800bb1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bb20:	2908      	cmp	r1, #8
 800bb22:	f63f af78 	bhi.w	800ba16 <_strtod_l+0x19e>
 800bb26:	3a30      	subs	r2, #48	@ 0x30
 800bb28:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bb2e:	f04f 080a 	mov.w	r8, #10
 800bb32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb34:	1c56      	adds	r6, r2, #1
 800bb36:	9619      	str	r6, [sp, #100]	@ 0x64
 800bb38:	7852      	ldrb	r2, [r2, #1]
 800bb3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bb3e:	f1be 0f09 	cmp.w	lr, #9
 800bb42:	d939      	bls.n	800bbb8 <_strtod_l+0x340>
 800bb44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb46:	1a76      	subs	r6, r6, r1
 800bb48:	2e08      	cmp	r6, #8
 800bb4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bb4e:	dc03      	bgt.n	800bb58 <_strtod_l+0x2e0>
 800bb50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb52:	4588      	cmp	r8, r1
 800bb54:	bfa8      	it	ge
 800bb56:	4688      	movge	r8, r1
 800bb58:	f1bc 0f00 	cmp.w	ip, #0
 800bb5c:	d001      	beq.n	800bb62 <_strtod_l+0x2ea>
 800bb5e:	f1c8 0800 	rsb	r8, r8, #0
 800bb62:	2d00      	cmp	r5, #0
 800bb64:	d14e      	bne.n	800bc04 <_strtod_l+0x38c>
 800bb66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb68:	4308      	orrs	r0, r1
 800bb6a:	f47f aebe 	bne.w	800b8ea <_strtod_l+0x72>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f47f aed6 	bne.w	800b920 <_strtod_l+0xa8>
 800bb74:	2a69      	cmp	r2, #105	@ 0x69
 800bb76:	d028      	beq.n	800bbca <_strtod_l+0x352>
 800bb78:	dc25      	bgt.n	800bbc6 <_strtod_l+0x34e>
 800bb7a:	2a49      	cmp	r2, #73	@ 0x49
 800bb7c:	d025      	beq.n	800bbca <_strtod_l+0x352>
 800bb7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb80:	f47f aece 	bne.w	800b920 <_strtod_l+0xa8>
 800bb84:	499b      	ldr	r1, [pc, #620]	@ (800bdf4 <_strtod_l+0x57c>)
 800bb86:	a819      	add	r0, sp, #100	@ 0x64
 800bb88:	f001 ff06 	bl	800d998 <__match>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f43f aec7 	beq.w	800b920 <_strtod_l+0xa8>
 800bb92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b28      	cmp	r3, #40	@ 0x28
 800bb98:	d12e      	bne.n	800bbf8 <_strtod_l+0x380>
 800bb9a:	4997      	ldr	r1, [pc, #604]	@ (800bdf8 <_strtod_l+0x580>)
 800bb9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb9e:	a819      	add	r0, sp, #100	@ 0x64
 800bba0:	f001 ff0e 	bl	800d9c0 <__hexnan>
 800bba4:	2805      	cmp	r0, #5
 800bba6:	d127      	bne.n	800bbf8 <_strtod_l+0x380>
 800bba8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bbae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bbb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bbb6:	e698      	b.n	800b8ea <_strtod_l+0x72>
 800bbb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bbba:	fb08 2101 	mla	r1, r8, r1, r2
 800bbbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bbc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbc4:	e7b5      	b.n	800bb32 <_strtod_l+0x2ba>
 800bbc6:	2a6e      	cmp	r2, #110	@ 0x6e
 800bbc8:	e7da      	b.n	800bb80 <_strtod_l+0x308>
 800bbca:	498c      	ldr	r1, [pc, #560]	@ (800bdfc <_strtod_l+0x584>)
 800bbcc:	a819      	add	r0, sp, #100	@ 0x64
 800bbce:	f001 fee3 	bl	800d998 <__match>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	f43f aea4 	beq.w	800b920 <_strtod_l+0xa8>
 800bbd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbda:	4989      	ldr	r1, [pc, #548]	@ (800be00 <_strtod_l+0x588>)
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	a819      	add	r0, sp, #100	@ 0x64
 800bbe0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbe2:	f001 fed9 	bl	800d998 <__match>
 800bbe6:	b910      	cbnz	r0, 800bbee <_strtod_l+0x376>
 800bbe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbea:	3301      	adds	r3, #1
 800bbec:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800be10 <_strtod_l+0x598>
 800bbf2:	f04f 0a00 	mov.w	sl, #0
 800bbf6:	e678      	b.n	800b8ea <_strtod_l+0x72>
 800bbf8:	4882      	ldr	r0, [pc, #520]	@ (800be04 <_strtod_l+0x58c>)
 800bbfa:	f000 fd9d 	bl	800c738 <nan>
 800bbfe:	ec5b ab10 	vmov	sl, fp, d0
 800bc02:	e672      	b.n	800b8ea <_strtod_l+0x72>
 800bc04:	eba8 0309 	sub.w	r3, r8, r9
 800bc08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	bf08      	it	eq
 800bc10:	462f      	moveq	r7, r5
 800bc12:	2d10      	cmp	r5, #16
 800bc14:	462c      	mov	r4, r5
 800bc16:	bfa8      	it	ge
 800bc18:	2410      	movge	r4, #16
 800bc1a:	f7f4 fc73 	bl	8000504 <__aeabi_ui2d>
 800bc1e:	2d09      	cmp	r5, #9
 800bc20:	4682      	mov	sl, r0
 800bc22:	468b      	mov	fp, r1
 800bc24:	dc13      	bgt.n	800bc4e <_strtod_l+0x3d6>
 800bc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f43f ae5e 	beq.w	800b8ea <_strtod_l+0x72>
 800bc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc30:	dd78      	ble.n	800bd24 <_strtod_l+0x4ac>
 800bc32:	2b16      	cmp	r3, #22
 800bc34:	dc5f      	bgt.n	800bcf6 <_strtod_l+0x47e>
 800bc36:	4974      	ldr	r1, [pc, #464]	@ (800be08 <_strtod_l+0x590>)
 800bc38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc40:	4652      	mov	r2, sl
 800bc42:	465b      	mov	r3, fp
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	4682      	mov	sl, r0
 800bc4a:	468b      	mov	fp, r1
 800bc4c:	e64d      	b.n	800b8ea <_strtod_l+0x72>
 800bc4e:	4b6e      	ldr	r3, [pc, #440]	@ (800be08 <_strtod_l+0x590>)
 800bc50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc58:	f7f4 fcce 	bl	80005f8 <__aeabi_dmul>
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	9808      	ldr	r0, [sp, #32]
 800bc60:	468b      	mov	fp, r1
 800bc62:	f7f4 fc4f 	bl	8000504 <__aeabi_ui2d>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4650      	mov	r0, sl
 800bc6c:	4659      	mov	r1, fp
 800bc6e:	f7f4 fb0d 	bl	800028c <__adddf3>
 800bc72:	2d0f      	cmp	r5, #15
 800bc74:	4682      	mov	sl, r0
 800bc76:	468b      	mov	fp, r1
 800bc78:	ddd5      	ble.n	800bc26 <_strtod_l+0x3ae>
 800bc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7c:	1b2c      	subs	r4, r5, r4
 800bc7e:	441c      	add	r4, r3
 800bc80:	2c00      	cmp	r4, #0
 800bc82:	f340 8096 	ble.w	800bdb2 <_strtod_l+0x53a>
 800bc86:	f014 030f 	ands.w	r3, r4, #15
 800bc8a:	d00a      	beq.n	800bca2 <_strtod_l+0x42a>
 800bc8c:	495e      	ldr	r1, [pc, #376]	@ (800be08 <_strtod_l+0x590>)
 800bc8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc92:	4652      	mov	r2, sl
 800bc94:	465b      	mov	r3, fp
 800bc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc9a:	f7f4 fcad 	bl	80005f8 <__aeabi_dmul>
 800bc9e:	4682      	mov	sl, r0
 800bca0:	468b      	mov	fp, r1
 800bca2:	f034 040f 	bics.w	r4, r4, #15
 800bca6:	d073      	beq.n	800bd90 <_strtod_l+0x518>
 800bca8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bcac:	dd48      	ble.n	800bd40 <_strtod_l+0x4c8>
 800bcae:	2400      	movs	r4, #0
 800bcb0:	46a0      	mov	r8, r4
 800bcb2:	940a      	str	r4, [sp, #40]	@ 0x28
 800bcb4:	46a1      	mov	r9, r4
 800bcb6:	9a05      	ldr	r2, [sp, #20]
 800bcb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800be10 <_strtod_l+0x598>
 800bcbc:	2322      	movs	r3, #34	@ 0x22
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	f04f 0a00 	mov.w	sl, #0
 800bcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f43f ae0f 	beq.w	800b8ea <_strtod_l+0x72>
 800bccc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcce:	9805      	ldr	r0, [sp, #20]
 800bcd0:	f002 faa8 	bl	800e224 <_Bfree>
 800bcd4:	9805      	ldr	r0, [sp, #20]
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	f002 faa4 	bl	800e224 <_Bfree>
 800bcdc:	9805      	ldr	r0, [sp, #20]
 800bcde:	4641      	mov	r1, r8
 800bce0:	f002 faa0 	bl	800e224 <_Bfree>
 800bce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bce6:	9805      	ldr	r0, [sp, #20]
 800bce8:	f002 fa9c 	bl	800e224 <_Bfree>
 800bcec:	9805      	ldr	r0, [sp, #20]
 800bcee:	4621      	mov	r1, r4
 800bcf0:	f002 fa98 	bl	800e224 <_Bfree>
 800bcf4:	e5f9      	b.n	800b8ea <_strtod_l+0x72>
 800bcf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	dbbc      	blt.n	800bc7a <_strtod_l+0x402>
 800bd00:	4c41      	ldr	r4, [pc, #260]	@ (800be08 <_strtod_l+0x590>)
 800bd02:	f1c5 050f 	rsb	r5, r5, #15
 800bd06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd12:	f7f4 fc71 	bl	80005f8 <__aeabi_dmul>
 800bd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd18:	1b5d      	subs	r5, r3, r5
 800bd1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd22:	e78f      	b.n	800bc44 <_strtod_l+0x3cc>
 800bd24:	3316      	adds	r3, #22
 800bd26:	dba8      	blt.n	800bc7a <_strtod_l+0x402>
 800bd28:	4b37      	ldr	r3, [pc, #220]	@ (800be08 <_strtod_l+0x590>)
 800bd2a:	eba9 0808 	sub.w	r8, r9, r8
 800bd2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bd32:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bd36:	4650      	mov	r0, sl
 800bd38:	4659      	mov	r1, fp
 800bd3a:	f7f4 fd87 	bl	800084c <__aeabi_ddiv>
 800bd3e:	e783      	b.n	800bc48 <_strtod_l+0x3d0>
 800bd40:	4b32      	ldr	r3, [pc, #200]	@ (800be0c <_strtod_l+0x594>)
 800bd42:	9308      	str	r3, [sp, #32]
 800bd44:	2300      	movs	r3, #0
 800bd46:	1124      	asrs	r4, r4, #4
 800bd48:	4650      	mov	r0, sl
 800bd4a:	4659      	mov	r1, fp
 800bd4c:	461e      	mov	r6, r3
 800bd4e:	2c01      	cmp	r4, #1
 800bd50:	dc21      	bgt.n	800bd96 <_strtod_l+0x51e>
 800bd52:	b10b      	cbz	r3, 800bd58 <_strtod_l+0x4e0>
 800bd54:	4682      	mov	sl, r0
 800bd56:	468b      	mov	fp, r1
 800bd58:	492c      	ldr	r1, [pc, #176]	@ (800be0c <_strtod_l+0x594>)
 800bd5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd62:	4652      	mov	r2, sl
 800bd64:	465b      	mov	r3, fp
 800bd66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd6a:	f7f4 fc45 	bl	80005f8 <__aeabi_dmul>
 800bd6e:	4b28      	ldr	r3, [pc, #160]	@ (800be10 <_strtod_l+0x598>)
 800bd70:	460a      	mov	r2, r1
 800bd72:	400b      	ands	r3, r1
 800bd74:	4927      	ldr	r1, [pc, #156]	@ (800be14 <_strtod_l+0x59c>)
 800bd76:	428b      	cmp	r3, r1
 800bd78:	4682      	mov	sl, r0
 800bd7a:	d898      	bhi.n	800bcae <_strtod_l+0x436>
 800bd7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd80:	428b      	cmp	r3, r1
 800bd82:	bf86      	itte	hi
 800bd84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800be18 <_strtod_l+0x5a0>
 800bd88:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800bd8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd90:	2300      	movs	r3, #0
 800bd92:	9308      	str	r3, [sp, #32]
 800bd94:	e07a      	b.n	800be8c <_strtod_l+0x614>
 800bd96:	07e2      	lsls	r2, r4, #31
 800bd98:	d505      	bpl.n	800bda6 <_strtod_l+0x52e>
 800bd9a:	9b08      	ldr	r3, [sp, #32]
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fc2a 	bl	80005f8 <__aeabi_dmul>
 800bda4:	2301      	movs	r3, #1
 800bda6:	9a08      	ldr	r2, [sp, #32]
 800bda8:	3208      	adds	r2, #8
 800bdaa:	3601      	adds	r6, #1
 800bdac:	1064      	asrs	r4, r4, #1
 800bdae:	9208      	str	r2, [sp, #32]
 800bdb0:	e7cd      	b.n	800bd4e <_strtod_l+0x4d6>
 800bdb2:	d0ed      	beq.n	800bd90 <_strtod_l+0x518>
 800bdb4:	4264      	negs	r4, r4
 800bdb6:	f014 020f 	ands.w	r2, r4, #15
 800bdba:	d00a      	beq.n	800bdd2 <_strtod_l+0x55a>
 800bdbc:	4b12      	ldr	r3, [pc, #72]	@ (800be08 <_strtod_l+0x590>)
 800bdbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdc2:	4650      	mov	r0, sl
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fd3f 	bl	800084c <__aeabi_ddiv>
 800bdce:	4682      	mov	sl, r0
 800bdd0:	468b      	mov	fp, r1
 800bdd2:	1124      	asrs	r4, r4, #4
 800bdd4:	d0dc      	beq.n	800bd90 <_strtod_l+0x518>
 800bdd6:	2c1f      	cmp	r4, #31
 800bdd8:	dd20      	ble.n	800be1c <_strtod_l+0x5a4>
 800bdda:	2400      	movs	r4, #0
 800bddc:	46a0      	mov	r8, r4
 800bdde:	940a      	str	r4, [sp, #40]	@ 0x28
 800bde0:	46a1      	mov	r9, r4
 800bde2:	9a05      	ldr	r2, [sp, #20]
 800bde4:	2322      	movs	r3, #34	@ 0x22
 800bde6:	f04f 0a00 	mov.w	sl, #0
 800bdea:	f04f 0b00 	mov.w	fp, #0
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	e768      	b.n	800bcc4 <_strtod_l+0x44c>
 800bdf2:	bf00      	nop
 800bdf4:	0800f239 	.word	0x0800f239
 800bdf8:	0800f268 	.word	0x0800f268
 800bdfc:	0800f231 	.word	0x0800f231
 800be00:	0800f3c4 	.word	0x0800f3c4
 800be04:	0800f653 	.word	0x0800f653
 800be08:	0800f550 	.word	0x0800f550
 800be0c:	0800f528 	.word	0x0800f528
 800be10:	7ff00000 	.word	0x7ff00000
 800be14:	7ca00000 	.word	0x7ca00000
 800be18:	7fefffff 	.word	0x7fefffff
 800be1c:	f014 0310 	ands.w	r3, r4, #16
 800be20:	bf18      	it	ne
 800be22:	236a      	movne	r3, #106	@ 0x6a
 800be24:	4ea9      	ldr	r6, [pc, #676]	@ (800c0cc <_strtod_l+0x854>)
 800be26:	9308      	str	r3, [sp, #32]
 800be28:	4650      	mov	r0, sl
 800be2a:	4659      	mov	r1, fp
 800be2c:	2300      	movs	r3, #0
 800be2e:	07e2      	lsls	r2, r4, #31
 800be30:	d504      	bpl.n	800be3c <_strtod_l+0x5c4>
 800be32:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be36:	f7f4 fbdf 	bl	80005f8 <__aeabi_dmul>
 800be3a:	2301      	movs	r3, #1
 800be3c:	1064      	asrs	r4, r4, #1
 800be3e:	f106 0608 	add.w	r6, r6, #8
 800be42:	d1f4      	bne.n	800be2e <_strtod_l+0x5b6>
 800be44:	b10b      	cbz	r3, 800be4a <_strtod_l+0x5d2>
 800be46:	4682      	mov	sl, r0
 800be48:	468b      	mov	fp, r1
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	b1b3      	cbz	r3, 800be7c <_strtod_l+0x604>
 800be4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be56:	2b00      	cmp	r3, #0
 800be58:	4659      	mov	r1, fp
 800be5a:	dd0f      	ble.n	800be7c <_strtod_l+0x604>
 800be5c:	2b1f      	cmp	r3, #31
 800be5e:	dd55      	ble.n	800bf0c <_strtod_l+0x694>
 800be60:	2b34      	cmp	r3, #52	@ 0x34
 800be62:	bfde      	ittt	le
 800be64:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800be68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be6c:	4093      	lslle	r3, r2
 800be6e:	f04f 0a00 	mov.w	sl, #0
 800be72:	bfcc      	ite	gt
 800be74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be78:	ea03 0b01 	andle.w	fp, r3, r1
 800be7c:	2200      	movs	r2, #0
 800be7e:	2300      	movs	r3, #0
 800be80:	4650      	mov	r0, sl
 800be82:	4659      	mov	r1, fp
 800be84:	f7f4 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d1a6      	bne.n	800bdda <_strtod_l+0x562>
 800be8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be92:	9805      	ldr	r0, [sp, #20]
 800be94:	462b      	mov	r3, r5
 800be96:	463a      	mov	r2, r7
 800be98:	f002 fa2c 	bl	800e2f4 <__s2b>
 800be9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f43f af05 	beq.w	800bcae <_strtod_l+0x436>
 800bea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	eba9 0308 	sub.w	r3, r9, r8
 800beac:	bfa8      	it	ge
 800beae:	2300      	movge	r3, #0
 800beb0:	9312      	str	r3, [sp, #72]	@ 0x48
 800beb2:	2400      	movs	r4, #0
 800beb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800beb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800beba:	46a0      	mov	r8, r4
 800bebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bebe:	9805      	ldr	r0, [sp, #20]
 800bec0:	6859      	ldr	r1, [r3, #4]
 800bec2:	f002 f96f 	bl	800e1a4 <_Balloc>
 800bec6:	4681      	mov	r9, r0
 800bec8:	2800      	cmp	r0, #0
 800beca:	f43f aef4 	beq.w	800bcb6 <_strtod_l+0x43e>
 800bece:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bed0:	691a      	ldr	r2, [r3, #16]
 800bed2:	3202      	adds	r2, #2
 800bed4:	f103 010c 	add.w	r1, r3, #12
 800bed8:	0092      	lsls	r2, r2, #2
 800beda:	300c      	adds	r0, #12
 800bedc:	f000 fc1b 	bl	800c716 <memcpy>
 800bee0:	ec4b ab10 	vmov	d0, sl, fp
 800bee4:	9805      	ldr	r0, [sp, #20]
 800bee6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bee8:	a91b      	add	r1, sp, #108	@ 0x6c
 800beea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800beee:	f002 fd3d 	bl	800e96c <__d2b>
 800bef2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bef4:	2800      	cmp	r0, #0
 800bef6:	f43f aede 	beq.w	800bcb6 <_strtod_l+0x43e>
 800befa:	9805      	ldr	r0, [sp, #20]
 800befc:	2101      	movs	r1, #1
 800befe:	f002 fa8f 	bl	800e420 <__i2b>
 800bf02:	4680      	mov	r8, r0
 800bf04:	b948      	cbnz	r0, 800bf1a <_strtod_l+0x6a2>
 800bf06:	f04f 0800 	mov.w	r8, #0
 800bf0a:	e6d4      	b.n	800bcb6 <_strtod_l+0x43e>
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf10:	fa02 f303 	lsl.w	r3, r2, r3
 800bf14:	ea03 0a0a 	and.w	sl, r3, sl
 800bf18:	e7b0      	b.n	800be7c <_strtod_l+0x604>
 800bf1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bf1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	bfab      	itete	ge
 800bf22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bf24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bf26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bf28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bf2a:	bfac      	ite	ge
 800bf2c:	18ef      	addge	r7, r5, r3
 800bf2e:	1b5e      	sublt	r6, r3, r5
 800bf30:	9b08      	ldr	r3, [sp, #32]
 800bf32:	1aed      	subs	r5, r5, r3
 800bf34:	4415      	add	r5, r2
 800bf36:	4b66      	ldr	r3, [pc, #408]	@ (800c0d0 <_strtod_l+0x858>)
 800bf38:	3d01      	subs	r5, #1
 800bf3a:	429d      	cmp	r5, r3
 800bf3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bf40:	da50      	bge.n	800bfe4 <_strtod_l+0x76c>
 800bf42:	1b5b      	subs	r3, r3, r5
 800bf44:	2b1f      	cmp	r3, #31
 800bf46:	eba2 0203 	sub.w	r2, r2, r3
 800bf4a:	f04f 0101 	mov.w	r1, #1
 800bf4e:	dc3d      	bgt.n	800bfcc <_strtod_l+0x754>
 800bf50:	fa01 f303 	lsl.w	r3, r1, r3
 800bf54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf56:	2300      	movs	r3, #0
 800bf58:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf5a:	18bd      	adds	r5, r7, r2
 800bf5c:	9b08      	ldr	r3, [sp, #32]
 800bf5e:	42af      	cmp	r7, r5
 800bf60:	4416      	add	r6, r2
 800bf62:	441e      	add	r6, r3
 800bf64:	463b      	mov	r3, r7
 800bf66:	bfa8      	it	ge
 800bf68:	462b      	movge	r3, r5
 800bf6a:	42b3      	cmp	r3, r6
 800bf6c:	bfa8      	it	ge
 800bf6e:	4633      	movge	r3, r6
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfc2      	ittt	gt
 800bf74:	1aed      	subgt	r5, r5, r3
 800bf76:	1af6      	subgt	r6, r6, r3
 800bf78:	1aff      	subgt	r7, r7, r3
 800bf7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd16      	ble.n	800bfae <_strtod_l+0x736>
 800bf80:	4641      	mov	r1, r8
 800bf82:	9805      	ldr	r0, [sp, #20]
 800bf84:	461a      	mov	r2, r3
 800bf86:	f002 fb0b 	bl	800e5a0 <__pow5mult>
 800bf8a:	4680      	mov	r8, r0
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d0ba      	beq.n	800bf06 <_strtod_l+0x68e>
 800bf90:	4601      	mov	r1, r0
 800bf92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf94:	9805      	ldr	r0, [sp, #20]
 800bf96:	f002 fa59 	bl	800e44c <__multiply>
 800bf9a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	f43f ae8a 	beq.w	800bcb6 <_strtod_l+0x43e>
 800bfa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfa4:	9805      	ldr	r0, [sp, #20]
 800bfa6:	f002 f93d 	bl	800e224 <_Bfree>
 800bfaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfac:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfae:	2d00      	cmp	r5, #0
 800bfb0:	dc1d      	bgt.n	800bfee <_strtod_l+0x776>
 800bfb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	dd23      	ble.n	800c000 <_strtod_l+0x788>
 800bfb8:	4649      	mov	r1, r9
 800bfba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bfbc:	9805      	ldr	r0, [sp, #20]
 800bfbe:	f002 faef 	bl	800e5a0 <__pow5mult>
 800bfc2:	4681      	mov	r9, r0
 800bfc4:	b9e0      	cbnz	r0, 800c000 <_strtod_l+0x788>
 800bfc6:	f04f 0900 	mov.w	r9, #0
 800bfca:	e674      	b.n	800bcb6 <_strtod_l+0x43e>
 800bfcc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bfd0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bfd4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bfd8:	35e2      	adds	r5, #226	@ 0xe2
 800bfda:	fa01 f305 	lsl.w	r3, r1, r5
 800bfde:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfe0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bfe2:	e7ba      	b.n	800bf5a <_strtod_l+0x6e2>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfe8:	2301      	movs	r3, #1
 800bfea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfec:	e7b5      	b.n	800bf5a <_strtod_l+0x6e2>
 800bfee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bff0:	9805      	ldr	r0, [sp, #20]
 800bff2:	462a      	mov	r2, r5
 800bff4:	f002 fb2e 	bl	800e654 <__lshift>
 800bff8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d1d9      	bne.n	800bfb2 <_strtod_l+0x73a>
 800bffe:	e65a      	b.n	800bcb6 <_strtod_l+0x43e>
 800c000:	2e00      	cmp	r6, #0
 800c002:	dd07      	ble.n	800c014 <_strtod_l+0x79c>
 800c004:	4649      	mov	r1, r9
 800c006:	9805      	ldr	r0, [sp, #20]
 800c008:	4632      	mov	r2, r6
 800c00a:	f002 fb23 	bl	800e654 <__lshift>
 800c00e:	4681      	mov	r9, r0
 800c010:	2800      	cmp	r0, #0
 800c012:	d0d8      	beq.n	800bfc6 <_strtod_l+0x74e>
 800c014:	2f00      	cmp	r7, #0
 800c016:	dd08      	ble.n	800c02a <_strtod_l+0x7b2>
 800c018:	4641      	mov	r1, r8
 800c01a:	9805      	ldr	r0, [sp, #20]
 800c01c:	463a      	mov	r2, r7
 800c01e:	f002 fb19 	bl	800e654 <__lshift>
 800c022:	4680      	mov	r8, r0
 800c024:	2800      	cmp	r0, #0
 800c026:	f43f ae46 	beq.w	800bcb6 <_strtod_l+0x43e>
 800c02a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c02c:	9805      	ldr	r0, [sp, #20]
 800c02e:	464a      	mov	r2, r9
 800c030:	f002 fb98 	bl	800e764 <__mdiff>
 800c034:	4604      	mov	r4, r0
 800c036:	2800      	cmp	r0, #0
 800c038:	f43f ae3d 	beq.w	800bcb6 <_strtod_l+0x43e>
 800c03c:	68c3      	ldr	r3, [r0, #12]
 800c03e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c040:	2300      	movs	r3, #0
 800c042:	60c3      	str	r3, [r0, #12]
 800c044:	4641      	mov	r1, r8
 800c046:	f002 fb71 	bl	800e72c <__mcmp>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	da46      	bge.n	800c0dc <_strtod_l+0x864>
 800c04e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c050:	ea53 030a 	orrs.w	r3, r3, sl
 800c054:	d16c      	bne.n	800c130 <_strtod_l+0x8b8>
 800c056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d168      	bne.n	800c130 <_strtod_l+0x8b8>
 800c05e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c062:	0d1b      	lsrs	r3, r3, #20
 800c064:	051b      	lsls	r3, r3, #20
 800c066:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c06a:	d961      	bls.n	800c130 <_strtod_l+0x8b8>
 800c06c:	6963      	ldr	r3, [r4, #20]
 800c06e:	b913      	cbnz	r3, 800c076 <_strtod_l+0x7fe>
 800c070:	6923      	ldr	r3, [r4, #16]
 800c072:	2b01      	cmp	r3, #1
 800c074:	dd5c      	ble.n	800c130 <_strtod_l+0x8b8>
 800c076:	4621      	mov	r1, r4
 800c078:	2201      	movs	r2, #1
 800c07a:	9805      	ldr	r0, [sp, #20]
 800c07c:	f002 faea 	bl	800e654 <__lshift>
 800c080:	4641      	mov	r1, r8
 800c082:	4604      	mov	r4, r0
 800c084:	f002 fb52 	bl	800e72c <__mcmp>
 800c088:	2800      	cmp	r0, #0
 800c08a:	dd51      	ble.n	800c130 <_strtod_l+0x8b8>
 800c08c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c090:	9a08      	ldr	r2, [sp, #32]
 800c092:	0d1b      	lsrs	r3, r3, #20
 800c094:	051b      	lsls	r3, r3, #20
 800c096:	2a00      	cmp	r2, #0
 800c098:	d06b      	beq.n	800c172 <_strtod_l+0x8fa>
 800c09a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c09e:	d868      	bhi.n	800c172 <_strtod_l+0x8fa>
 800c0a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c0a4:	f67f ae9d 	bls.w	800bde2 <_strtod_l+0x56a>
 800c0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d4 <_strtod_l+0x85c>)
 800c0aa:	4650      	mov	r0, sl
 800c0ac:	4659      	mov	r1, fp
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f7f4 faa2 	bl	80005f8 <__aeabi_dmul>
 800c0b4:	4b08      	ldr	r3, [pc, #32]	@ (800c0d8 <_strtod_l+0x860>)
 800c0b6:	400b      	ands	r3, r1
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	468b      	mov	fp, r1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f47f ae05 	bne.w	800bccc <_strtod_l+0x454>
 800c0c2:	9a05      	ldr	r2, [sp, #20]
 800c0c4:	2322      	movs	r3, #34	@ 0x22
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	e600      	b.n	800bccc <_strtod_l+0x454>
 800c0ca:	bf00      	nop
 800c0cc:	0800f290 	.word	0x0800f290
 800c0d0:	fffffc02 	.word	0xfffffc02
 800c0d4:	39500000 	.word	0x39500000
 800c0d8:	7ff00000 	.word	0x7ff00000
 800c0dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c0e0:	d165      	bne.n	800c1ae <_strtod_l+0x936>
 800c0e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0e8:	b35a      	cbz	r2, 800c142 <_strtod_l+0x8ca>
 800c0ea:	4a9f      	ldr	r2, [pc, #636]	@ (800c368 <_strtod_l+0xaf0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d12b      	bne.n	800c148 <_strtod_l+0x8d0>
 800c0f0:	9b08      	ldr	r3, [sp, #32]
 800c0f2:	4651      	mov	r1, sl
 800c0f4:	b303      	cbz	r3, 800c138 <_strtod_l+0x8c0>
 800c0f6:	4b9d      	ldr	r3, [pc, #628]	@ (800c36c <_strtod_l+0xaf4>)
 800c0f8:	465a      	mov	r2, fp
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c104:	d81b      	bhi.n	800c13e <_strtod_l+0x8c6>
 800c106:	0d1b      	lsrs	r3, r3, #20
 800c108:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c10c:	fa02 f303 	lsl.w	r3, r2, r3
 800c110:	4299      	cmp	r1, r3
 800c112:	d119      	bne.n	800c148 <_strtod_l+0x8d0>
 800c114:	4b96      	ldr	r3, [pc, #600]	@ (800c370 <_strtod_l+0xaf8>)
 800c116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c118:	429a      	cmp	r2, r3
 800c11a:	d102      	bne.n	800c122 <_strtod_l+0x8aa>
 800c11c:	3101      	adds	r1, #1
 800c11e:	f43f adca 	beq.w	800bcb6 <_strtod_l+0x43e>
 800c122:	4b92      	ldr	r3, [pc, #584]	@ (800c36c <_strtod_l+0xaf4>)
 800c124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c126:	401a      	ands	r2, r3
 800c128:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c12c:	f04f 0a00 	mov.w	sl, #0
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1b8      	bne.n	800c0a8 <_strtod_l+0x830>
 800c136:	e5c9      	b.n	800bccc <_strtod_l+0x454>
 800c138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c13c:	e7e8      	b.n	800c110 <_strtod_l+0x898>
 800c13e:	4613      	mov	r3, r2
 800c140:	e7e6      	b.n	800c110 <_strtod_l+0x898>
 800c142:	ea53 030a 	orrs.w	r3, r3, sl
 800c146:	d0a1      	beq.n	800c08c <_strtod_l+0x814>
 800c148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c14a:	b1db      	cbz	r3, 800c184 <_strtod_l+0x90c>
 800c14c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c14e:	4213      	tst	r3, r2
 800c150:	d0ee      	beq.n	800c130 <_strtod_l+0x8b8>
 800c152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c154:	9a08      	ldr	r2, [sp, #32]
 800c156:	4650      	mov	r0, sl
 800c158:	4659      	mov	r1, fp
 800c15a:	b1bb      	cbz	r3, 800c18c <_strtod_l+0x914>
 800c15c:	f7ff fb6c 	bl	800b838 <sulp>
 800c160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c164:	ec53 2b10 	vmov	r2, r3, d0
 800c168:	f7f4 f890 	bl	800028c <__adddf3>
 800c16c:	4682      	mov	sl, r0
 800c16e:	468b      	mov	fp, r1
 800c170:	e7de      	b.n	800c130 <_strtod_l+0x8b8>
 800c172:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c176:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c17a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c17e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c182:	e7d5      	b.n	800c130 <_strtod_l+0x8b8>
 800c184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c186:	ea13 0f0a 	tst.w	r3, sl
 800c18a:	e7e1      	b.n	800c150 <_strtod_l+0x8d8>
 800c18c:	f7ff fb54 	bl	800b838 <sulp>
 800c190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c194:	ec53 2b10 	vmov	r2, r3, d0
 800c198:	f7f4 f876 	bl	8000288 <__aeabi_dsub>
 800c19c:	2200      	movs	r2, #0
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4682      	mov	sl, r0
 800c1a2:	468b      	mov	fp, r1
 800c1a4:	f7f4 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d0c1      	beq.n	800c130 <_strtod_l+0x8b8>
 800c1ac:	e619      	b.n	800bde2 <_strtod_l+0x56a>
 800c1ae:	4641      	mov	r1, r8
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f002 fc33 	bl	800ea1c <__ratio>
 800c1b6:	ec57 6b10 	vmov	r6, r7, d0
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	f7f4 fc94 	bl	8000af0 <__aeabi_dcmple>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d06f      	beq.n	800c2ac <_strtod_l+0xa34>
 800c1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d17a      	bne.n	800c2c8 <_strtod_l+0xa50>
 800c1d2:	f1ba 0f00 	cmp.w	sl, #0
 800c1d6:	d158      	bne.n	800c28a <_strtod_l+0xa12>
 800c1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d15a      	bne.n	800c298 <_strtod_l+0xa20>
 800c1e2:	4b64      	ldr	r3, [pc, #400]	@ (800c374 <_strtod_l+0xafc>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	4639      	mov	r1, r7
 800c1ea:	f7f4 fc77 	bl	8000adc <__aeabi_dcmplt>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d159      	bne.n	800c2a6 <_strtod_l+0xa2e>
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	4b60      	ldr	r3, [pc, #384]	@ (800c378 <_strtod_l+0xb00>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f7f4 f9fd 	bl	80005f8 <__aeabi_dmul>
 800c1fe:	4606      	mov	r6, r0
 800c200:	460f      	mov	r7, r1
 800c202:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c206:	9606      	str	r6, [sp, #24]
 800c208:	9307      	str	r3, [sp, #28]
 800c20a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c20e:	4d57      	ldr	r5, [pc, #348]	@ (800c36c <_strtod_l+0xaf4>)
 800c210:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c216:	401d      	ands	r5, r3
 800c218:	4b58      	ldr	r3, [pc, #352]	@ (800c37c <_strtod_l+0xb04>)
 800c21a:	429d      	cmp	r5, r3
 800c21c:	f040 80b2 	bne.w	800c384 <_strtod_l+0xb0c>
 800c220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c222:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c226:	ec4b ab10 	vmov	d0, sl, fp
 800c22a:	f002 fb2f 	bl	800e88c <__ulp>
 800c22e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c232:	ec51 0b10 	vmov	r0, r1, d0
 800c236:	f7f4 f9df 	bl	80005f8 <__aeabi_dmul>
 800c23a:	4652      	mov	r2, sl
 800c23c:	465b      	mov	r3, fp
 800c23e:	f7f4 f825 	bl	800028c <__adddf3>
 800c242:	460b      	mov	r3, r1
 800c244:	4949      	ldr	r1, [pc, #292]	@ (800c36c <_strtod_l+0xaf4>)
 800c246:	4a4e      	ldr	r2, [pc, #312]	@ (800c380 <_strtod_l+0xb08>)
 800c248:	4019      	ands	r1, r3
 800c24a:	4291      	cmp	r1, r2
 800c24c:	4682      	mov	sl, r0
 800c24e:	d942      	bls.n	800c2d6 <_strtod_l+0xa5e>
 800c250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c252:	4b47      	ldr	r3, [pc, #284]	@ (800c370 <_strtod_l+0xaf8>)
 800c254:	429a      	cmp	r2, r3
 800c256:	d103      	bne.n	800c260 <_strtod_l+0x9e8>
 800c258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c25a:	3301      	adds	r3, #1
 800c25c:	f43f ad2b 	beq.w	800bcb6 <_strtod_l+0x43e>
 800c260:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c370 <_strtod_l+0xaf8>
 800c264:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c268:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c26a:	9805      	ldr	r0, [sp, #20]
 800c26c:	f001 ffda 	bl	800e224 <_Bfree>
 800c270:	9805      	ldr	r0, [sp, #20]
 800c272:	4649      	mov	r1, r9
 800c274:	f001 ffd6 	bl	800e224 <_Bfree>
 800c278:	9805      	ldr	r0, [sp, #20]
 800c27a:	4641      	mov	r1, r8
 800c27c:	f001 ffd2 	bl	800e224 <_Bfree>
 800c280:	9805      	ldr	r0, [sp, #20]
 800c282:	4621      	mov	r1, r4
 800c284:	f001 ffce 	bl	800e224 <_Bfree>
 800c288:	e618      	b.n	800bebc <_strtod_l+0x644>
 800c28a:	f1ba 0f01 	cmp.w	sl, #1
 800c28e:	d103      	bne.n	800c298 <_strtod_l+0xa20>
 800c290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c292:	2b00      	cmp	r3, #0
 800c294:	f43f ada5 	beq.w	800bde2 <_strtod_l+0x56a>
 800c298:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c348 <_strtod_l+0xad0>
 800c29c:	4f35      	ldr	r7, [pc, #212]	@ (800c374 <_strtod_l+0xafc>)
 800c29e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	e7b1      	b.n	800c20a <_strtod_l+0x992>
 800c2a6:	4f34      	ldr	r7, [pc, #208]	@ (800c378 <_strtod_l+0xb00>)
 800c2a8:	2600      	movs	r6, #0
 800c2aa:	e7aa      	b.n	800c202 <_strtod_l+0x98a>
 800c2ac:	4b32      	ldr	r3, [pc, #200]	@ (800c378 <_strtod_l+0xb00>)
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f7f4 f9a0 	bl	80005f8 <__aeabi_dmul>
 800c2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d09f      	beq.n	800c202 <_strtod_l+0x98a>
 800c2c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c2c6:	e7a0      	b.n	800c20a <_strtod_l+0x992>
 800c2c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c350 <_strtod_l+0xad8>
 800c2cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2d0:	ec57 6b17 	vmov	r6, r7, d7
 800c2d4:	e799      	b.n	800c20a <_strtod_l+0x992>
 800c2d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c2da:	9b08      	ldr	r3, [sp, #32]
 800c2dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1c1      	bne.n	800c268 <_strtod_l+0x9f0>
 800c2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2e8:	0d1b      	lsrs	r3, r3, #20
 800c2ea:	051b      	lsls	r3, r3, #20
 800c2ec:	429d      	cmp	r5, r3
 800c2ee:	d1bb      	bne.n	800c268 <_strtod_l+0x9f0>
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f4 fce0 	bl	8000cb8 <__aeabi_d2lz>
 800c2f8:	f7f4 f950 	bl	800059c <__aeabi_l2d>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4630      	mov	r0, r6
 800c302:	4639      	mov	r1, r7
 800c304:	f7f3 ffc0 	bl	8000288 <__aeabi_dsub>
 800c308:	460b      	mov	r3, r1
 800c30a:	4602      	mov	r2, r0
 800c30c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c310:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c316:	ea46 060a 	orr.w	r6, r6, sl
 800c31a:	431e      	orrs	r6, r3
 800c31c:	d06f      	beq.n	800c3fe <_strtod_l+0xb86>
 800c31e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c358 <_strtod_l+0xae0>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	f7f4 fbda 	bl	8000adc <__aeabi_dcmplt>
 800c328:	2800      	cmp	r0, #0
 800c32a:	f47f accf 	bne.w	800bccc <_strtod_l+0x454>
 800c32e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c360 <_strtod_l+0xae8>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c338:	f7f4 fbee 	bl	8000b18 <__aeabi_dcmpgt>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d093      	beq.n	800c268 <_strtod_l+0x9f0>
 800c340:	e4c4      	b.n	800bccc <_strtod_l+0x454>
 800c342:	bf00      	nop
 800c344:	f3af 8000 	nop.w
 800c348:	00000000 	.word	0x00000000
 800c34c:	bff00000 	.word	0xbff00000
 800c350:	00000000 	.word	0x00000000
 800c354:	3ff00000 	.word	0x3ff00000
 800c358:	94a03595 	.word	0x94a03595
 800c35c:	3fdfffff 	.word	0x3fdfffff
 800c360:	35afe535 	.word	0x35afe535
 800c364:	3fe00000 	.word	0x3fe00000
 800c368:	000fffff 	.word	0x000fffff
 800c36c:	7ff00000 	.word	0x7ff00000
 800c370:	7fefffff 	.word	0x7fefffff
 800c374:	3ff00000 	.word	0x3ff00000
 800c378:	3fe00000 	.word	0x3fe00000
 800c37c:	7fe00000 	.word	0x7fe00000
 800c380:	7c9fffff 	.word	0x7c9fffff
 800c384:	9b08      	ldr	r3, [sp, #32]
 800c386:	b323      	cbz	r3, 800c3d2 <_strtod_l+0xb5a>
 800c388:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c38c:	d821      	bhi.n	800c3d2 <_strtod_l+0xb5a>
 800c38e:	a328      	add	r3, pc, #160	@ (adr r3, 800c430 <_strtod_l+0xbb8>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	4630      	mov	r0, r6
 800c396:	4639      	mov	r1, r7
 800c398:	f7f4 fbaa 	bl	8000af0 <__aeabi_dcmple>
 800c39c:	b1a0      	cbz	r0, 800c3c8 <_strtod_l+0xb50>
 800c39e:	4639      	mov	r1, r7
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f7f4 fc01 	bl	8000ba8 <__aeabi_d2uiz>
 800c3a6:	2801      	cmp	r0, #1
 800c3a8:	bf38      	it	cc
 800c3aa:	2001      	movcc	r0, #1
 800c3ac:	f7f4 f8aa 	bl	8000504 <__aeabi_ui2d>
 800c3b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	460f      	mov	r7, r1
 800c3b6:	b9fb      	cbnz	r3, 800c3f8 <_strtod_l+0xb80>
 800c3b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c3bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c3be:	9315      	str	r3, [sp, #84]	@ 0x54
 800c3c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c3c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c3c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c3ce:	1b5b      	subs	r3, r3, r5
 800c3d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c3d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c3da:	f002 fa57 	bl	800e88c <__ulp>
 800c3de:	4650      	mov	r0, sl
 800c3e0:	ec53 2b10 	vmov	r2, r3, d0
 800c3e4:	4659      	mov	r1, fp
 800c3e6:	f7f4 f907 	bl	80005f8 <__aeabi_dmul>
 800c3ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c3ee:	f7f3 ff4d 	bl	800028c <__adddf3>
 800c3f2:	4682      	mov	sl, r0
 800c3f4:	468b      	mov	fp, r1
 800c3f6:	e770      	b.n	800c2da <_strtod_l+0xa62>
 800c3f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c3fc:	e7e0      	b.n	800c3c0 <_strtod_l+0xb48>
 800c3fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c438 <_strtod_l+0xbc0>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f4 fb6a 	bl	8000adc <__aeabi_dcmplt>
 800c408:	e798      	b.n	800c33c <_strtod_l+0xac4>
 800c40a:	2300      	movs	r3, #0
 800c40c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c40e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	f7ff ba6d 	b.w	800b8f2 <_strtod_l+0x7a>
 800c418:	2a65      	cmp	r2, #101	@ 0x65
 800c41a:	f43f ab66 	beq.w	800baea <_strtod_l+0x272>
 800c41e:	2a45      	cmp	r2, #69	@ 0x45
 800c420:	f43f ab63 	beq.w	800baea <_strtod_l+0x272>
 800c424:	2301      	movs	r3, #1
 800c426:	f7ff bb9e 	b.w	800bb66 <_strtod_l+0x2ee>
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w
 800c430:	ffc00000 	.word	0xffc00000
 800c434:	41dfffff 	.word	0x41dfffff
 800c438:	94a03595 	.word	0x94a03595
 800c43c:	3fcfffff 	.word	0x3fcfffff

0800c440 <_strtod_r>:
 800c440:	4b01      	ldr	r3, [pc, #4]	@ (800c448 <_strtod_r+0x8>)
 800c442:	f7ff ba19 	b.w	800b878 <_strtod_l>
 800c446:	bf00      	nop
 800c448:	20000038 	.word	0x20000038

0800c44c <_strtol_l.constprop.0>:
 800c44c:	2b24      	cmp	r3, #36	@ 0x24
 800c44e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c452:	4686      	mov	lr, r0
 800c454:	4690      	mov	r8, r2
 800c456:	d801      	bhi.n	800c45c <_strtol_l.constprop.0+0x10>
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d106      	bne.n	800c46a <_strtol_l.constprop.0+0x1e>
 800c45c:	f000 f92e 	bl	800c6bc <__errno>
 800c460:	2316      	movs	r3, #22
 800c462:	6003      	str	r3, [r0, #0]
 800c464:	2000      	movs	r0, #0
 800c466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46a:	4834      	ldr	r0, [pc, #208]	@ (800c53c <_strtol_l.constprop.0+0xf0>)
 800c46c:	460d      	mov	r5, r1
 800c46e:	462a      	mov	r2, r5
 800c470:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c474:	5d06      	ldrb	r6, [r0, r4]
 800c476:	f016 0608 	ands.w	r6, r6, #8
 800c47a:	d1f8      	bne.n	800c46e <_strtol_l.constprop.0+0x22>
 800c47c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c47e:	d12d      	bne.n	800c4dc <_strtol_l.constprop.0+0x90>
 800c480:	782c      	ldrb	r4, [r5, #0]
 800c482:	2601      	movs	r6, #1
 800c484:	1c95      	adds	r5, r2, #2
 800c486:	f033 0210 	bics.w	r2, r3, #16
 800c48a:	d109      	bne.n	800c4a0 <_strtol_l.constprop.0+0x54>
 800c48c:	2c30      	cmp	r4, #48	@ 0x30
 800c48e:	d12a      	bne.n	800c4e6 <_strtol_l.constprop.0+0x9a>
 800c490:	782a      	ldrb	r2, [r5, #0]
 800c492:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c496:	2a58      	cmp	r2, #88	@ 0x58
 800c498:	d125      	bne.n	800c4e6 <_strtol_l.constprop.0+0x9a>
 800c49a:	786c      	ldrb	r4, [r5, #1]
 800c49c:	2310      	movs	r3, #16
 800c49e:	3502      	adds	r5, #2
 800c4a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c4a4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	fbbc f9f3 	udiv	r9, ip, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c4b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c4b8:	2f09      	cmp	r7, #9
 800c4ba:	d81b      	bhi.n	800c4f4 <_strtol_l.constprop.0+0xa8>
 800c4bc:	463c      	mov	r4, r7
 800c4be:	42a3      	cmp	r3, r4
 800c4c0:	dd27      	ble.n	800c512 <_strtol_l.constprop.0+0xc6>
 800c4c2:	1c57      	adds	r7, r2, #1
 800c4c4:	d007      	beq.n	800c4d6 <_strtol_l.constprop.0+0x8a>
 800c4c6:	4581      	cmp	r9, r0
 800c4c8:	d320      	bcc.n	800c50c <_strtol_l.constprop.0+0xc0>
 800c4ca:	d101      	bne.n	800c4d0 <_strtol_l.constprop.0+0x84>
 800c4cc:	45a2      	cmp	sl, r4
 800c4ce:	db1d      	blt.n	800c50c <_strtol_l.constprop.0+0xc0>
 800c4d0:	fb00 4003 	mla	r0, r0, r3, r4
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4da:	e7eb      	b.n	800c4b4 <_strtol_l.constprop.0+0x68>
 800c4dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800c4de:	bf04      	itt	eq
 800c4e0:	782c      	ldrbeq	r4, [r5, #0]
 800c4e2:	1c95      	addeq	r5, r2, #2
 800c4e4:	e7cf      	b.n	800c486 <_strtol_l.constprop.0+0x3a>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1da      	bne.n	800c4a0 <_strtol_l.constprop.0+0x54>
 800c4ea:	2c30      	cmp	r4, #48	@ 0x30
 800c4ec:	bf0c      	ite	eq
 800c4ee:	2308      	moveq	r3, #8
 800c4f0:	230a      	movne	r3, #10
 800c4f2:	e7d5      	b.n	800c4a0 <_strtol_l.constprop.0+0x54>
 800c4f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c4f8:	2f19      	cmp	r7, #25
 800c4fa:	d801      	bhi.n	800c500 <_strtol_l.constprop.0+0xb4>
 800c4fc:	3c37      	subs	r4, #55	@ 0x37
 800c4fe:	e7de      	b.n	800c4be <_strtol_l.constprop.0+0x72>
 800c500:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c504:	2f19      	cmp	r7, #25
 800c506:	d804      	bhi.n	800c512 <_strtol_l.constprop.0+0xc6>
 800c508:	3c57      	subs	r4, #87	@ 0x57
 800c50a:	e7d8      	b.n	800c4be <_strtol_l.constprop.0+0x72>
 800c50c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c510:	e7e1      	b.n	800c4d6 <_strtol_l.constprop.0+0x8a>
 800c512:	1c53      	adds	r3, r2, #1
 800c514:	d108      	bne.n	800c528 <_strtol_l.constprop.0+0xdc>
 800c516:	2322      	movs	r3, #34	@ 0x22
 800c518:	f8ce 3000 	str.w	r3, [lr]
 800c51c:	4660      	mov	r0, ip
 800c51e:	f1b8 0f00 	cmp.w	r8, #0
 800c522:	d0a0      	beq.n	800c466 <_strtol_l.constprop.0+0x1a>
 800c524:	1e69      	subs	r1, r5, #1
 800c526:	e006      	b.n	800c536 <_strtol_l.constprop.0+0xea>
 800c528:	b106      	cbz	r6, 800c52c <_strtol_l.constprop.0+0xe0>
 800c52a:	4240      	negs	r0, r0
 800c52c:	f1b8 0f00 	cmp.w	r8, #0
 800c530:	d099      	beq.n	800c466 <_strtol_l.constprop.0+0x1a>
 800c532:	2a00      	cmp	r2, #0
 800c534:	d1f6      	bne.n	800c524 <_strtol_l.constprop.0+0xd8>
 800c536:	f8c8 1000 	str.w	r1, [r8]
 800c53a:	e794      	b.n	800c466 <_strtol_l.constprop.0+0x1a>
 800c53c:	0800f2c1 	.word	0x0800f2c1

0800c540 <_strtol_r>:
 800c540:	f7ff bf84 	b.w	800c44c <_strtol_l.constprop.0>

0800c544 <_fwalk_sglue>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4607      	mov	r7, r0
 800c54a:	4688      	mov	r8, r1
 800c54c:	4614      	mov	r4, r2
 800c54e:	2600      	movs	r6, #0
 800c550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c554:	f1b9 0901 	subs.w	r9, r9, #1
 800c558:	d505      	bpl.n	800c566 <_fwalk_sglue+0x22>
 800c55a:	6824      	ldr	r4, [r4, #0]
 800c55c:	2c00      	cmp	r4, #0
 800c55e:	d1f7      	bne.n	800c550 <_fwalk_sglue+0xc>
 800c560:	4630      	mov	r0, r6
 800c562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c566:	89ab      	ldrh	r3, [r5, #12]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d907      	bls.n	800c57c <_fwalk_sglue+0x38>
 800c56c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c570:	3301      	adds	r3, #1
 800c572:	d003      	beq.n	800c57c <_fwalk_sglue+0x38>
 800c574:	4629      	mov	r1, r5
 800c576:	4638      	mov	r0, r7
 800c578:	47c0      	blx	r8
 800c57a:	4306      	orrs	r6, r0
 800c57c:	3568      	adds	r5, #104	@ 0x68
 800c57e:	e7e9      	b.n	800c554 <_fwalk_sglue+0x10>

0800c580 <iprintf>:
 800c580:	b40f      	push	{r0, r1, r2, r3}
 800c582:	b507      	push	{r0, r1, r2, lr}
 800c584:	4906      	ldr	r1, [pc, #24]	@ (800c5a0 <iprintf+0x20>)
 800c586:	ab04      	add	r3, sp, #16
 800c588:	6808      	ldr	r0, [r1, #0]
 800c58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c58e:	6881      	ldr	r1, [r0, #8]
 800c590:	9301      	str	r3, [sp, #4]
 800c592:	f001 fc31 	bl	800ddf8 <_vfiprintf_r>
 800c596:	b003      	add	sp, #12
 800c598:	f85d eb04 	ldr.w	lr, [sp], #4
 800c59c:	b004      	add	sp, #16
 800c59e:	4770      	bx	lr
 800c5a0:	200001a4 	.word	0x200001a4

0800c5a4 <_puts_r>:
 800c5a4:	6a03      	ldr	r3, [r0, #32]
 800c5a6:	b570      	push	{r4, r5, r6, lr}
 800c5a8:	6884      	ldr	r4, [r0, #8]
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	460e      	mov	r6, r1
 800c5ae:	b90b      	cbnz	r3, 800c5b4 <_puts_r+0x10>
 800c5b0:	f7ff f92a 	bl	800b808 <__sinit>
 800c5b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5b6:	07db      	lsls	r3, r3, #31
 800c5b8:	d405      	bmi.n	800c5c6 <_puts_r+0x22>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	0598      	lsls	r0, r3, #22
 800c5be:	d402      	bmi.n	800c5c6 <_puts_r+0x22>
 800c5c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5c2:	f000 f8a6 	bl	800c712 <__retarget_lock_acquire_recursive>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	0719      	lsls	r1, r3, #28
 800c5ca:	d502      	bpl.n	800c5d2 <_puts_r+0x2e>
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d135      	bne.n	800c63e <_puts_r+0x9a>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f002 fb47 	bl	800ec68 <__swsetup_r>
 800c5da:	b380      	cbz	r0, 800c63e <_puts_r+0x9a>
 800c5dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c5e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5e2:	07da      	lsls	r2, r3, #31
 800c5e4:	d405      	bmi.n	800c5f2 <_puts_r+0x4e>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	059b      	lsls	r3, r3, #22
 800c5ea:	d402      	bmi.n	800c5f2 <_puts_r+0x4e>
 800c5ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ee:	f000 f891 	bl	800c714 <__retarget_lock_release_recursive>
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da04      	bge.n	800c604 <_puts_r+0x60>
 800c5fa:	69a2      	ldr	r2, [r4, #24]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	dc17      	bgt.n	800c630 <_puts_r+0x8c>
 800c600:	290a      	cmp	r1, #10
 800c602:	d015      	beq.n	800c630 <_puts_r+0x8c>
 800c604:	6823      	ldr	r3, [r4, #0]
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	6022      	str	r2, [r4, #0]
 800c60a:	7019      	strb	r1, [r3, #0]
 800c60c:	68a3      	ldr	r3, [r4, #8]
 800c60e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c612:	3b01      	subs	r3, #1
 800c614:	60a3      	str	r3, [r4, #8]
 800c616:	2900      	cmp	r1, #0
 800c618:	d1ed      	bne.n	800c5f6 <_puts_r+0x52>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	da11      	bge.n	800c642 <_puts_r+0x9e>
 800c61e:	4622      	mov	r2, r4
 800c620:	210a      	movs	r1, #10
 800c622:	4628      	mov	r0, r5
 800c624:	f002 fae1 	bl	800ebea <__swbuf_r>
 800c628:	3001      	adds	r0, #1
 800c62a:	d0d7      	beq.n	800c5dc <_puts_r+0x38>
 800c62c:	250a      	movs	r5, #10
 800c62e:	e7d7      	b.n	800c5e0 <_puts_r+0x3c>
 800c630:	4622      	mov	r2, r4
 800c632:	4628      	mov	r0, r5
 800c634:	f002 fad9 	bl	800ebea <__swbuf_r>
 800c638:	3001      	adds	r0, #1
 800c63a:	d1e7      	bne.n	800c60c <_puts_r+0x68>
 800c63c:	e7ce      	b.n	800c5dc <_puts_r+0x38>
 800c63e:	3e01      	subs	r6, #1
 800c640:	e7e4      	b.n	800c60c <_puts_r+0x68>
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	1c5a      	adds	r2, r3, #1
 800c646:	6022      	str	r2, [r4, #0]
 800c648:	220a      	movs	r2, #10
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	e7ee      	b.n	800c62c <_puts_r+0x88>
	...

0800c650 <puts>:
 800c650:	4b02      	ldr	r3, [pc, #8]	@ (800c65c <puts+0xc>)
 800c652:	4601      	mov	r1, r0
 800c654:	6818      	ldr	r0, [r3, #0]
 800c656:	f7ff bfa5 	b.w	800c5a4 <_puts_r>
 800c65a:	bf00      	nop
 800c65c:	200001a4 	.word	0x200001a4

0800c660 <strncmp>:
 800c660:	b510      	push	{r4, lr}
 800c662:	b16a      	cbz	r2, 800c680 <strncmp+0x20>
 800c664:	3901      	subs	r1, #1
 800c666:	1884      	adds	r4, r0, r2
 800c668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c66c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c670:	429a      	cmp	r2, r3
 800c672:	d103      	bne.n	800c67c <strncmp+0x1c>
 800c674:	42a0      	cmp	r0, r4
 800c676:	d001      	beq.n	800c67c <strncmp+0x1c>
 800c678:	2a00      	cmp	r2, #0
 800c67a:	d1f5      	bne.n	800c668 <strncmp+0x8>
 800c67c:	1ad0      	subs	r0, r2, r3
 800c67e:	bd10      	pop	{r4, pc}
 800c680:	4610      	mov	r0, r2
 800c682:	e7fc      	b.n	800c67e <strncmp+0x1e>

0800c684 <memset>:
 800c684:	4402      	add	r2, r0
 800c686:	4603      	mov	r3, r0
 800c688:	4293      	cmp	r3, r2
 800c68a:	d100      	bne.n	800c68e <memset+0xa>
 800c68c:	4770      	bx	lr
 800c68e:	f803 1b01 	strb.w	r1, [r3], #1
 800c692:	e7f9      	b.n	800c688 <memset+0x4>

0800c694 <_localeconv_r>:
 800c694:	4800      	ldr	r0, [pc, #0]	@ (800c698 <_localeconv_r+0x4>)
 800c696:	4770      	bx	lr
 800c698:	20000128 	.word	0x20000128

0800c69c <_sbrk_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d06      	ldr	r5, [pc, #24]	@ (800c6b8 <_sbrk_r+0x1c>)
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	602b      	str	r3, [r5, #0]
 800c6a8:	f7f5 fa9c 	bl	8001be4 <_sbrk>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_sbrk_r+0x1a>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_sbrk_r+0x1a>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	20000c64 	.word	0x20000c64

0800c6bc <__errno>:
 800c6bc:	4b01      	ldr	r3, [pc, #4]	@ (800c6c4 <__errno+0x8>)
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	200001a4 	.word	0x200001a4

0800c6c8 <__libc_init_array>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	4d0d      	ldr	r5, [pc, #52]	@ (800c700 <__libc_init_array+0x38>)
 800c6cc:	4c0d      	ldr	r4, [pc, #52]	@ (800c704 <__libc_init_array+0x3c>)
 800c6ce:	1b64      	subs	r4, r4, r5
 800c6d0:	10a4      	asrs	r4, r4, #2
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	42a6      	cmp	r6, r4
 800c6d6:	d109      	bne.n	800c6ec <__libc_init_array+0x24>
 800c6d8:	4d0b      	ldr	r5, [pc, #44]	@ (800c708 <__libc_init_array+0x40>)
 800c6da:	4c0c      	ldr	r4, [pc, #48]	@ (800c70c <__libc_init_array+0x44>)
 800c6dc:	f002 fca4 	bl	800f028 <_init>
 800c6e0:	1b64      	subs	r4, r4, r5
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	2600      	movs	r6, #0
 800c6e6:	42a6      	cmp	r6, r4
 800c6e8:	d105      	bne.n	800c6f6 <__libc_init_array+0x2e>
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f0:	4798      	blx	r3
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	e7ee      	b.n	800c6d4 <__libc_init_array+0xc>
 800c6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6fa:	4798      	blx	r3
 800c6fc:	3601      	adds	r6, #1
 800c6fe:	e7f2      	b.n	800c6e6 <__libc_init_array+0x1e>
 800c700:	0800f65c 	.word	0x0800f65c
 800c704:	0800f65c 	.word	0x0800f65c
 800c708:	0800f65c 	.word	0x0800f65c
 800c70c:	0800f660 	.word	0x0800f660

0800c710 <__retarget_lock_init_recursive>:
 800c710:	4770      	bx	lr

0800c712 <__retarget_lock_acquire_recursive>:
 800c712:	4770      	bx	lr

0800c714 <__retarget_lock_release_recursive>:
 800c714:	4770      	bx	lr

0800c716 <memcpy>:
 800c716:	440a      	add	r2, r1
 800c718:	4291      	cmp	r1, r2
 800c71a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c71e:	d100      	bne.n	800c722 <memcpy+0xc>
 800c720:	4770      	bx	lr
 800c722:	b510      	push	{r4, lr}
 800c724:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c72c:	4291      	cmp	r1, r2
 800c72e:	d1f9      	bne.n	800c724 <memcpy+0xe>
 800c730:	bd10      	pop	{r4, pc}
 800c732:	0000      	movs	r0, r0
 800c734:	0000      	movs	r0, r0
	...

0800c738 <nan>:
 800c738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c740 <nan+0x8>
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	00000000 	.word	0x00000000
 800c744:	7ff80000 	.word	0x7ff80000

0800c748 <nanf>:
 800c748:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c750 <nanf+0x8>
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	7fc00000 	.word	0x7fc00000

0800c754 <quorem>:
 800c754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	6903      	ldr	r3, [r0, #16]
 800c75a:	690c      	ldr	r4, [r1, #16]
 800c75c:	42a3      	cmp	r3, r4
 800c75e:	4607      	mov	r7, r0
 800c760:	db7e      	blt.n	800c860 <quorem+0x10c>
 800c762:	3c01      	subs	r4, #1
 800c764:	f101 0814 	add.w	r8, r1, #20
 800c768:	00a3      	lsls	r3, r4, #2
 800c76a:	f100 0514 	add.w	r5, r0, #20
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c77a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c77e:	3301      	adds	r3, #1
 800c780:	429a      	cmp	r2, r3
 800c782:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c786:	fbb2 f6f3 	udiv	r6, r2, r3
 800c78a:	d32e      	bcc.n	800c7ea <quorem+0x96>
 800c78c:	f04f 0a00 	mov.w	sl, #0
 800c790:	46c4      	mov	ip, r8
 800c792:	46ae      	mov	lr, r5
 800c794:	46d3      	mov	fp, sl
 800c796:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c79a:	b298      	uxth	r0, r3
 800c79c:	fb06 a000 	mla	r0, r6, r0, sl
 800c7a0:	0c02      	lsrs	r2, r0, #16
 800c7a2:	0c1b      	lsrs	r3, r3, #16
 800c7a4:	fb06 2303 	mla	r3, r6, r3, r2
 800c7a8:	f8de 2000 	ldr.w	r2, [lr]
 800c7ac:	b280      	uxth	r0, r0
 800c7ae:	b292      	uxth	r2, r2
 800c7b0:	1a12      	subs	r2, r2, r0
 800c7b2:	445a      	add	r2, fp
 800c7b4:	f8de 0000 	ldr.w	r0, [lr]
 800c7b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c7c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c7c6:	b292      	uxth	r2, r2
 800c7c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c7cc:	45e1      	cmp	r9, ip
 800c7ce:	f84e 2b04 	str.w	r2, [lr], #4
 800c7d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c7d6:	d2de      	bcs.n	800c796 <quorem+0x42>
 800c7d8:	9b00      	ldr	r3, [sp, #0]
 800c7da:	58eb      	ldr	r3, [r5, r3]
 800c7dc:	b92b      	cbnz	r3, 800c7ea <quorem+0x96>
 800c7de:	9b01      	ldr	r3, [sp, #4]
 800c7e0:	3b04      	subs	r3, #4
 800c7e2:	429d      	cmp	r5, r3
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	d32f      	bcc.n	800c848 <quorem+0xf4>
 800c7e8:	613c      	str	r4, [r7, #16]
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f001 ff9e 	bl	800e72c <__mcmp>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	db25      	blt.n	800c840 <quorem+0xec>
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c7fc:	f8d1 c000 	ldr.w	ip, [r1]
 800c800:	fa1f fe82 	uxth.w	lr, r2
 800c804:	fa1f f38c 	uxth.w	r3, ip
 800c808:	eba3 030e 	sub.w	r3, r3, lr
 800c80c:	4403      	add	r3, r0
 800c80e:	0c12      	lsrs	r2, r2, #16
 800c810:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c814:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c818:	b29b      	uxth	r3, r3
 800c81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c81e:	45c1      	cmp	r9, r8
 800c820:	f841 3b04 	str.w	r3, [r1], #4
 800c824:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c828:	d2e6      	bcs.n	800c7f8 <quorem+0xa4>
 800c82a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c832:	b922      	cbnz	r2, 800c83e <quorem+0xea>
 800c834:	3b04      	subs	r3, #4
 800c836:	429d      	cmp	r5, r3
 800c838:	461a      	mov	r2, r3
 800c83a:	d30b      	bcc.n	800c854 <quorem+0x100>
 800c83c:	613c      	str	r4, [r7, #16]
 800c83e:	3601      	adds	r6, #1
 800c840:	4630      	mov	r0, r6
 800c842:	b003      	add	sp, #12
 800c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c848:	6812      	ldr	r2, [r2, #0]
 800c84a:	3b04      	subs	r3, #4
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	d1cb      	bne.n	800c7e8 <quorem+0x94>
 800c850:	3c01      	subs	r4, #1
 800c852:	e7c6      	b.n	800c7e2 <quorem+0x8e>
 800c854:	6812      	ldr	r2, [r2, #0]
 800c856:	3b04      	subs	r3, #4
 800c858:	2a00      	cmp	r2, #0
 800c85a:	d1ef      	bne.n	800c83c <quorem+0xe8>
 800c85c:	3c01      	subs	r4, #1
 800c85e:	e7ea      	b.n	800c836 <quorem+0xe2>
 800c860:	2000      	movs	r0, #0
 800c862:	e7ee      	b.n	800c842 <quorem+0xee>
 800c864:	0000      	movs	r0, r0
	...

0800c868 <_dtoa_r>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	69c7      	ldr	r7, [r0, #28]
 800c86e:	b099      	sub	sp, #100	@ 0x64
 800c870:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c874:	ec55 4b10 	vmov	r4, r5, d0
 800c878:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c87a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c87c:	4683      	mov	fp, r0
 800c87e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c880:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c882:	b97f      	cbnz	r7, 800c8a4 <_dtoa_r+0x3c>
 800c884:	2010      	movs	r0, #16
 800c886:	f7fe fab3 	bl	800adf0 <malloc>
 800c88a:	4602      	mov	r2, r0
 800c88c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c890:	b920      	cbnz	r0, 800c89c <_dtoa_r+0x34>
 800c892:	4ba7      	ldr	r3, [pc, #668]	@ (800cb30 <_dtoa_r+0x2c8>)
 800c894:	21ef      	movs	r1, #239	@ 0xef
 800c896:	48a7      	ldr	r0, [pc, #668]	@ (800cb34 <_dtoa_r+0x2cc>)
 800c898:	f002 fb2e 	bl	800eef8 <__assert_func>
 800c89c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c8a0:	6007      	str	r7, [r0, #0]
 800c8a2:	60c7      	str	r7, [r0, #12]
 800c8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8a8:	6819      	ldr	r1, [r3, #0]
 800c8aa:	b159      	cbz	r1, 800c8c4 <_dtoa_r+0x5c>
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	604a      	str	r2, [r1, #4]
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	4093      	lsls	r3, r2
 800c8b4:	608b      	str	r3, [r1, #8]
 800c8b6:	4658      	mov	r0, fp
 800c8b8:	f001 fcb4 	bl	800e224 <_Bfree>
 800c8bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	601a      	str	r2, [r3, #0]
 800c8c4:	1e2b      	subs	r3, r5, #0
 800c8c6:	bfb9      	ittee	lt
 800c8c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c8cc:	9303      	strlt	r3, [sp, #12]
 800c8ce:	2300      	movge	r3, #0
 800c8d0:	6033      	strge	r3, [r6, #0]
 800c8d2:	9f03      	ldr	r7, [sp, #12]
 800c8d4:	4b98      	ldr	r3, [pc, #608]	@ (800cb38 <_dtoa_r+0x2d0>)
 800c8d6:	bfbc      	itt	lt
 800c8d8:	2201      	movlt	r2, #1
 800c8da:	6032      	strlt	r2, [r6, #0]
 800c8dc:	43bb      	bics	r3, r7
 800c8de:	d112      	bne.n	800c906 <_dtoa_r+0x9e>
 800c8e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c8e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c8e6:	6013      	str	r3, [r2, #0]
 800c8e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8ec:	4323      	orrs	r3, r4
 800c8ee:	f000 854d 	beq.w	800d38c <_dtoa_r+0xb24>
 800c8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cb4c <_dtoa_r+0x2e4>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 854f 	beq.w	800d39c <_dtoa_r+0xb34>
 800c8fe:	f10a 0303 	add.w	r3, sl, #3
 800c902:	f000 bd49 	b.w	800d398 <_dtoa_r+0xb30>
 800c906:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c90a:	2200      	movs	r2, #0
 800c90c:	ec51 0b17 	vmov	r0, r1, d7
 800c910:	2300      	movs	r3, #0
 800c912:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c916:	f7f4 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c91a:	4680      	mov	r8, r0
 800c91c:	b158      	cbz	r0, 800c936 <_dtoa_r+0xce>
 800c91e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c920:	2301      	movs	r3, #1
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c926:	b113      	cbz	r3, 800c92e <_dtoa_r+0xc6>
 800c928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c92a:	4b84      	ldr	r3, [pc, #528]	@ (800cb3c <_dtoa_r+0x2d4>)
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cb50 <_dtoa_r+0x2e8>
 800c932:	f000 bd33 	b.w	800d39c <_dtoa_r+0xb34>
 800c936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c93a:	aa16      	add	r2, sp, #88	@ 0x58
 800c93c:	a917      	add	r1, sp, #92	@ 0x5c
 800c93e:	4658      	mov	r0, fp
 800c940:	f002 f814 	bl	800e96c <__d2b>
 800c944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c948:	4681      	mov	r9, r0
 800c94a:	2e00      	cmp	r6, #0
 800c94c:	d077      	beq.n	800ca3e <_dtoa_r+0x1d6>
 800c94e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c950:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c95c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c968:	4619      	mov	r1, r3
 800c96a:	2200      	movs	r2, #0
 800c96c:	4b74      	ldr	r3, [pc, #464]	@ (800cb40 <_dtoa_r+0x2d8>)
 800c96e:	f7f3 fc8b 	bl	8000288 <__aeabi_dsub>
 800c972:	a369      	add	r3, pc, #420	@ (adr r3, 800cb18 <_dtoa_r+0x2b0>)
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f7f3 fe3e 	bl	80005f8 <__aeabi_dmul>
 800c97c:	a368      	add	r3, pc, #416	@ (adr r3, 800cb20 <_dtoa_r+0x2b8>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	f7f3 fc83 	bl	800028c <__adddf3>
 800c986:	4604      	mov	r4, r0
 800c988:	4630      	mov	r0, r6
 800c98a:	460d      	mov	r5, r1
 800c98c:	f7f3 fdca 	bl	8000524 <__aeabi_i2d>
 800c990:	a365      	add	r3, pc, #404	@ (adr r3, 800cb28 <_dtoa_r+0x2c0>)
 800c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c996:	f7f3 fe2f 	bl	80005f8 <__aeabi_dmul>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	f7f3 fc73 	bl	800028c <__adddf3>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	460d      	mov	r5, r1
 800c9aa:	f7f4 f8d5 	bl	8000b58 <__aeabi_d2iz>
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	f7f4 f890 	bl	8000adc <__aeabi_dcmplt>
 800c9bc:	b140      	cbz	r0, 800c9d0 <_dtoa_r+0x168>
 800c9be:	4638      	mov	r0, r7
 800c9c0:	f7f3 fdb0 	bl	8000524 <__aeabi_i2d>
 800c9c4:	4622      	mov	r2, r4
 800c9c6:	462b      	mov	r3, r5
 800c9c8:	f7f4 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9cc:	b900      	cbnz	r0, 800c9d0 <_dtoa_r+0x168>
 800c9ce:	3f01      	subs	r7, #1
 800c9d0:	2f16      	cmp	r7, #22
 800c9d2:	d851      	bhi.n	800ca78 <_dtoa_r+0x210>
 800c9d4:	4b5b      	ldr	r3, [pc, #364]	@ (800cb44 <_dtoa_r+0x2dc>)
 800c9d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9e2:	f7f4 f87b 	bl	8000adc <__aeabi_dcmplt>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d048      	beq.n	800ca7c <_dtoa_r+0x214>
 800c9ea:	3f01      	subs	r7, #1
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c9f2:	1b9b      	subs	r3, r3, r6
 800c9f4:	1e5a      	subs	r2, r3, #1
 800c9f6:	bf44      	itt	mi
 800c9f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c9fc:	2300      	movmi	r3, #0
 800c9fe:	9208      	str	r2, [sp, #32]
 800ca00:	bf54      	ite	pl
 800ca02:	f04f 0800 	movpl.w	r8, #0
 800ca06:	9308      	strmi	r3, [sp, #32]
 800ca08:	2f00      	cmp	r7, #0
 800ca0a:	db39      	blt.n	800ca80 <_dtoa_r+0x218>
 800ca0c:	9b08      	ldr	r3, [sp, #32]
 800ca0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ca10:	443b      	add	r3, r7
 800ca12:	9308      	str	r3, [sp, #32]
 800ca14:	2300      	movs	r3, #0
 800ca16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca1a:	2b09      	cmp	r3, #9
 800ca1c:	d864      	bhi.n	800cae8 <_dtoa_r+0x280>
 800ca1e:	2b05      	cmp	r3, #5
 800ca20:	bfc4      	itt	gt
 800ca22:	3b04      	subgt	r3, #4
 800ca24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ca26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca28:	f1a3 0302 	sub.w	r3, r3, #2
 800ca2c:	bfcc      	ite	gt
 800ca2e:	2400      	movgt	r4, #0
 800ca30:	2401      	movle	r4, #1
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d863      	bhi.n	800cafe <_dtoa_r+0x296>
 800ca36:	e8df f003 	tbb	[pc, r3]
 800ca3a:	372a      	.short	0x372a
 800ca3c:	5535      	.short	0x5535
 800ca3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ca42:	441e      	add	r6, r3
 800ca44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	bfc1      	itttt	gt
 800ca4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ca50:	409f      	lslgt	r7, r3
 800ca52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ca56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ca5a:	bfd6      	itet	le
 800ca5c:	f1c3 0320 	rsble	r3, r3, #32
 800ca60:	ea47 0003 	orrgt.w	r0, r7, r3
 800ca64:	fa04 f003 	lslle.w	r0, r4, r3
 800ca68:	f7f3 fd4c 	bl	8000504 <__aeabi_ui2d>
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ca72:	3e01      	subs	r6, #1
 800ca74:	9214      	str	r2, [sp, #80]	@ 0x50
 800ca76:	e777      	b.n	800c968 <_dtoa_r+0x100>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e7b8      	b.n	800c9ee <_dtoa_r+0x186>
 800ca7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca7e:	e7b7      	b.n	800c9f0 <_dtoa_r+0x188>
 800ca80:	427b      	negs	r3, r7
 800ca82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca84:	2300      	movs	r3, #0
 800ca86:	eba8 0807 	sub.w	r8, r8, r7
 800ca8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca8c:	e7c4      	b.n	800ca18 <_dtoa_r+0x1b0>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dc35      	bgt.n	800cb04 <_dtoa_r+0x29c>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	9307      	str	r3, [sp, #28]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800caa2:	e00b      	b.n	800cabc <_dtoa_r+0x254>
 800caa4:	2301      	movs	r3, #1
 800caa6:	e7f3      	b.n	800ca90 <_dtoa_r+0x228>
 800caa8:	2300      	movs	r3, #0
 800caaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caae:	18fb      	adds	r3, r7, r3
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	3301      	adds	r3, #1
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	9307      	str	r3, [sp, #28]
 800cab8:	bfb8      	it	lt
 800caba:	2301      	movlt	r3, #1
 800cabc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cac0:	2100      	movs	r1, #0
 800cac2:	2204      	movs	r2, #4
 800cac4:	f102 0514 	add.w	r5, r2, #20
 800cac8:	429d      	cmp	r5, r3
 800caca:	d91f      	bls.n	800cb0c <_dtoa_r+0x2a4>
 800cacc:	6041      	str	r1, [r0, #4]
 800cace:	4658      	mov	r0, fp
 800cad0:	f001 fb68 	bl	800e1a4 <_Balloc>
 800cad4:	4682      	mov	sl, r0
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d13c      	bne.n	800cb54 <_dtoa_r+0x2ec>
 800cada:	4b1b      	ldr	r3, [pc, #108]	@ (800cb48 <_dtoa_r+0x2e0>)
 800cadc:	4602      	mov	r2, r0
 800cade:	f240 11af 	movw	r1, #431	@ 0x1af
 800cae2:	e6d8      	b.n	800c896 <_dtoa_r+0x2e>
 800cae4:	2301      	movs	r3, #1
 800cae6:	e7e0      	b.n	800caaa <_dtoa_r+0x242>
 800cae8:	2401      	movs	r4, #1
 800caea:	2300      	movs	r3, #0
 800caec:	9309      	str	r3, [sp, #36]	@ 0x24
 800caee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800caf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	9307      	str	r3, [sp, #28]
 800caf8:	2200      	movs	r2, #0
 800cafa:	2312      	movs	r3, #18
 800cafc:	e7d0      	b.n	800caa0 <_dtoa_r+0x238>
 800cafe:	2301      	movs	r3, #1
 800cb00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb02:	e7f5      	b.n	800caf0 <_dtoa_r+0x288>
 800cb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	9307      	str	r3, [sp, #28]
 800cb0a:	e7d7      	b.n	800cabc <_dtoa_r+0x254>
 800cb0c:	3101      	adds	r1, #1
 800cb0e:	0052      	lsls	r2, r2, #1
 800cb10:	e7d8      	b.n	800cac4 <_dtoa_r+0x25c>
 800cb12:	bf00      	nop
 800cb14:	f3af 8000 	nop.w
 800cb18:	636f4361 	.word	0x636f4361
 800cb1c:	3fd287a7 	.word	0x3fd287a7
 800cb20:	8b60c8b3 	.word	0x8b60c8b3
 800cb24:	3fc68a28 	.word	0x3fc68a28
 800cb28:	509f79fb 	.word	0x509f79fb
 800cb2c:	3fd34413 	.word	0x3fd34413
 800cb30:	0800f3ce 	.word	0x0800f3ce
 800cb34:	0800f3e5 	.word	0x0800f3e5
 800cb38:	7ff00000 	.word	0x7ff00000
 800cb3c:	0800f23d 	.word	0x0800f23d
 800cb40:	3ff80000 	.word	0x3ff80000
 800cb44:	0800f550 	.word	0x0800f550
 800cb48:	0800f43d 	.word	0x0800f43d
 800cb4c:	0800f3ca 	.word	0x0800f3ca
 800cb50:	0800f23c 	.word	0x0800f23c
 800cb54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb58:	6018      	str	r0, [r3, #0]
 800cb5a:	9b07      	ldr	r3, [sp, #28]
 800cb5c:	2b0e      	cmp	r3, #14
 800cb5e:	f200 80a4 	bhi.w	800ccaa <_dtoa_r+0x442>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	f000 80a1 	beq.w	800ccaa <_dtoa_r+0x442>
 800cb68:	2f00      	cmp	r7, #0
 800cb6a:	dd33      	ble.n	800cbd4 <_dtoa_r+0x36c>
 800cb6c:	4bad      	ldr	r3, [pc, #692]	@ (800ce24 <_dtoa_r+0x5bc>)
 800cb6e:	f007 020f 	and.w	r2, r7, #15
 800cb72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb76:	ed93 7b00 	vldr	d7, [r3]
 800cb7a:	05f8      	lsls	r0, r7, #23
 800cb7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cb84:	d516      	bpl.n	800cbb4 <_dtoa_r+0x34c>
 800cb86:	4ba8      	ldr	r3, [pc, #672]	@ (800ce28 <_dtoa_r+0x5c0>)
 800cb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb90:	f7f3 fe5c 	bl	800084c <__aeabi_ddiv>
 800cb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb98:	f004 040f 	and.w	r4, r4, #15
 800cb9c:	2603      	movs	r6, #3
 800cb9e:	4da2      	ldr	r5, [pc, #648]	@ (800ce28 <_dtoa_r+0x5c0>)
 800cba0:	b954      	cbnz	r4, 800cbb8 <_dtoa_r+0x350>
 800cba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbaa:	f7f3 fe4f 	bl	800084c <__aeabi_ddiv>
 800cbae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb2:	e028      	b.n	800cc06 <_dtoa_r+0x39e>
 800cbb4:	2602      	movs	r6, #2
 800cbb6:	e7f2      	b.n	800cb9e <_dtoa_r+0x336>
 800cbb8:	07e1      	lsls	r1, r4, #31
 800cbba:	d508      	bpl.n	800cbce <_dtoa_r+0x366>
 800cbbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbc4:	f7f3 fd18 	bl	80005f8 <__aeabi_dmul>
 800cbc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbcc:	3601      	adds	r6, #1
 800cbce:	1064      	asrs	r4, r4, #1
 800cbd0:	3508      	adds	r5, #8
 800cbd2:	e7e5      	b.n	800cba0 <_dtoa_r+0x338>
 800cbd4:	f000 80d2 	beq.w	800cd7c <_dtoa_r+0x514>
 800cbd8:	427c      	negs	r4, r7
 800cbda:	4b92      	ldr	r3, [pc, #584]	@ (800ce24 <_dtoa_r+0x5bc>)
 800cbdc:	4d92      	ldr	r5, [pc, #584]	@ (800ce28 <_dtoa_r+0x5c0>)
 800cbde:	f004 020f 	and.w	r2, r4, #15
 800cbe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbee:	f7f3 fd03 	bl	80005f8 <__aeabi_dmul>
 800cbf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbf6:	1124      	asrs	r4, r4, #4
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	2602      	movs	r6, #2
 800cbfc:	2c00      	cmp	r4, #0
 800cbfe:	f040 80b2 	bne.w	800cd66 <_dtoa_r+0x4fe>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1d3      	bne.n	800cbae <_dtoa_r+0x346>
 800cc06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 80b7 	beq.w	800cd80 <_dtoa_r+0x518>
 800cc12:	4b86      	ldr	r3, [pc, #536]	@ (800ce2c <_dtoa_r+0x5c4>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	4620      	mov	r0, r4
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7f3 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f000 80ae 	beq.w	800cd80 <_dtoa_r+0x518>
 800cc24:	9b07      	ldr	r3, [sp, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 80aa 	beq.w	800cd80 <_dtoa_r+0x518>
 800cc2c:	9b00      	ldr	r3, [sp, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dd37      	ble.n	800cca2 <_dtoa_r+0x43a>
 800cc32:	1e7b      	subs	r3, r7, #1
 800cc34:	9304      	str	r3, [sp, #16]
 800cc36:	4620      	mov	r0, r4
 800cc38:	4b7d      	ldr	r3, [pc, #500]	@ (800ce30 <_dtoa_r+0x5c8>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	f7f3 fcdb 	bl	80005f8 <__aeabi_dmul>
 800cc42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc46:	9c00      	ldr	r4, [sp, #0]
 800cc48:	3601      	adds	r6, #1
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7f3 fc6a 	bl	8000524 <__aeabi_i2d>
 800cc50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc54:	f7f3 fcd0 	bl	80005f8 <__aeabi_dmul>
 800cc58:	4b76      	ldr	r3, [pc, #472]	@ (800ce34 <_dtoa_r+0x5cc>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f7f3 fb16 	bl	800028c <__adddf3>
 800cc60:	4605      	mov	r5, r0
 800cc62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cc66:	2c00      	cmp	r4, #0
 800cc68:	f040 808d 	bne.w	800cd86 <_dtoa_r+0x51e>
 800cc6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc70:	4b71      	ldr	r3, [pc, #452]	@ (800ce38 <_dtoa_r+0x5d0>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f7f3 fb08 	bl	8000288 <__aeabi_dsub>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc80:	462a      	mov	r2, r5
 800cc82:	4633      	mov	r3, r6
 800cc84:	f7f3 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	f040 828b 	bne.w	800d1a4 <_dtoa_r+0x93c>
 800cc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc92:	462a      	mov	r2, r5
 800cc94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cc98:	f7f3 ff20 	bl	8000adc <__aeabi_dcmplt>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f040 8128 	bne.w	800cef2 <_dtoa_r+0x68a>
 800cca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ccaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f2c0 815a 	blt.w	800cf66 <_dtoa_r+0x6fe>
 800ccb2:	2f0e      	cmp	r7, #14
 800ccb4:	f300 8157 	bgt.w	800cf66 <_dtoa_r+0x6fe>
 800ccb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ce24 <_dtoa_r+0x5bc>)
 800ccba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ccbe:	ed93 7b00 	vldr	d7, [r3]
 800ccc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	ed8d 7b00 	vstr	d7, [sp]
 800ccca:	da03      	bge.n	800ccd4 <_dtoa_r+0x46c>
 800cccc:	9b07      	ldr	r3, [sp, #28]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f340 8101 	ble.w	800ced6 <_dtoa_r+0x66e>
 800ccd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ccd8:	4656      	mov	r6, sl
 800ccda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f3 fdb3 	bl	800084c <__aeabi_ddiv>
 800cce6:	f7f3 ff37 	bl	8000b58 <__aeabi_d2iz>
 800ccea:	4680      	mov	r8, r0
 800ccec:	f7f3 fc1a 	bl	8000524 <__aeabi_i2d>
 800ccf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccf4:	f7f3 fc80 	bl	80005f8 <__aeabi_dmul>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	4629      	mov	r1, r5
 800cd00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd04:	f7f3 fac0 	bl	8000288 <__aeabi_dsub>
 800cd08:	f806 4b01 	strb.w	r4, [r6], #1
 800cd0c:	9d07      	ldr	r5, [sp, #28]
 800cd0e:	eba6 040a 	sub.w	r4, r6, sl
 800cd12:	42a5      	cmp	r5, r4
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	f040 8117 	bne.w	800cf4a <_dtoa_r+0x6e2>
 800cd1c:	f7f3 fab6 	bl	800028c <__adddf3>
 800cd20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd24:	4604      	mov	r4, r0
 800cd26:	460d      	mov	r5, r1
 800cd28:	f7f3 fef6 	bl	8000b18 <__aeabi_dcmpgt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f040 80f9 	bne.w	800cf24 <_dtoa_r+0x6bc>
 800cd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd3e:	b118      	cbz	r0, 800cd48 <_dtoa_r+0x4e0>
 800cd40:	f018 0f01 	tst.w	r8, #1
 800cd44:	f040 80ee 	bne.w	800cf24 <_dtoa_r+0x6bc>
 800cd48:	4649      	mov	r1, r9
 800cd4a:	4658      	mov	r0, fp
 800cd4c:	f001 fa6a 	bl	800e224 <_Bfree>
 800cd50:	2300      	movs	r3, #0
 800cd52:	7033      	strb	r3, [r6, #0]
 800cd54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd56:	3701      	adds	r7, #1
 800cd58:	601f      	str	r7, [r3, #0]
 800cd5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 831d 	beq.w	800d39c <_dtoa_r+0xb34>
 800cd62:	601e      	str	r6, [r3, #0]
 800cd64:	e31a      	b.n	800d39c <_dtoa_r+0xb34>
 800cd66:	07e2      	lsls	r2, r4, #31
 800cd68:	d505      	bpl.n	800cd76 <_dtoa_r+0x50e>
 800cd6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd6e:	f7f3 fc43 	bl	80005f8 <__aeabi_dmul>
 800cd72:	3601      	adds	r6, #1
 800cd74:	2301      	movs	r3, #1
 800cd76:	1064      	asrs	r4, r4, #1
 800cd78:	3508      	adds	r5, #8
 800cd7a:	e73f      	b.n	800cbfc <_dtoa_r+0x394>
 800cd7c:	2602      	movs	r6, #2
 800cd7e:	e742      	b.n	800cc06 <_dtoa_r+0x39e>
 800cd80:	9c07      	ldr	r4, [sp, #28]
 800cd82:	9704      	str	r7, [sp, #16]
 800cd84:	e761      	b.n	800cc4a <_dtoa_r+0x3e2>
 800cd86:	4b27      	ldr	r3, [pc, #156]	@ (800ce24 <_dtoa_r+0x5bc>)
 800cd88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd92:	4454      	add	r4, sl
 800cd94:	2900      	cmp	r1, #0
 800cd96:	d053      	beq.n	800ce40 <_dtoa_r+0x5d8>
 800cd98:	4928      	ldr	r1, [pc, #160]	@ (800ce3c <_dtoa_r+0x5d4>)
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	f7f3 fd56 	bl	800084c <__aeabi_ddiv>
 800cda0:	4633      	mov	r3, r6
 800cda2:	462a      	mov	r2, r5
 800cda4:	f7f3 fa70 	bl	8000288 <__aeabi_dsub>
 800cda8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cdac:	4656      	mov	r6, sl
 800cdae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdb2:	f7f3 fed1 	bl	8000b58 <__aeabi_d2iz>
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	f7f3 fbb4 	bl	8000524 <__aeabi_i2d>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc4:	f7f3 fa60 	bl	8000288 <__aeabi_dsub>
 800cdc8:	3530      	adds	r5, #48	@ 0x30
 800cdca:	4602      	mov	r2, r0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdd2:	f806 5b01 	strb.w	r5, [r6], #1
 800cdd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cdda:	f7f3 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d171      	bne.n	800cec6 <_dtoa_r+0x65e>
 800cde2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cde6:	4911      	ldr	r1, [pc, #68]	@ (800ce2c <_dtoa_r+0x5c4>)
 800cde8:	2000      	movs	r0, #0
 800cdea:	f7f3 fa4d 	bl	8000288 <__aeabi_dsub>
 800cdee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cdf2:	f7f3 fe73 	bl	8000adc <__aeabi_dcmplt>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f040 8095 	bne.w	800cf26 <_dtoa_r+0x6be>
 800cdfc:	42a6      	cmp	r6, r4
 800cdfe:	f43f af50 	beq.w	800cca2 <_dtoa_r+0x43a>
 800ce02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce06:	4b0a      	ldr	r3, [pc, #40]	@ (800ce30 <_dtoa_r+0x5c8>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f7f3 fbf5 	bl	80005f8 <__aeabi_dmul>
 800ce0e:	4b08      	ldr	r3, [pc, #32]	@ (800ce30 <_dtoa_r+0x5c8>)
 800ce10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce14:	2200      	movs	r2, #0
 800ce16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce1a:	f7f3 fbed 	bl	80005f8 <__aeabi_dmul>
 800ce1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce22:	e7c4      	b.n	800cdae <_dtoa_r+0x546>
 800ce24:	0800f550 	.word	0x0800f550
 800ce28:	0800f528 	.word	0x0800f528
 800ce2c:	3ff00000 	.word	0x3ff00000
 800ce30:	40240000 	.word	0x40240000
 800ce34:	401c0000 	.word	0x401c0000
 800ce38:	40140000 	.word	0x40140000
 800ce3c:	3fe00000 	.word	0x3fe00000
 800ce40:	4631      	mov	r1, r6
 800ce42:	4628      	mov	r0, r5
 800ce44:	f7f3 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ce48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce4c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ce4e:	4656      	mov	r6, sl
 800ce50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce54:	f7f3 fe80 	bl	8000b58 <__aeabi_d2iz>
 800ce58:	4605      	mov	r5, r0
 800ce5a:	f7f3 fb63 	bl	8000524 <__aeabi_i2d>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce66:	f7f3 fa0f 	bl	8000288 <__aeabi_dsub>
 800ce6a:	3530      	adds	r5, #48	@ 0x30
 800ce6c:	f806 5b01 	strb.w	r5, [r6], #1
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	42a6      	cmp	r6, r4
 800ce76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce7a:	f04f 0200 	mov.w	r2, #0
 800ce7e:	d124      	bne.n	800ceca <_dtoa_r+0x662>
 800ce80:	4bac      	ldr	r3, [pc, #688]	@ (800d134 <_dtoa_r+0x8cc>)
 800ce82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce86:	f7f3 fa01 	bl	800028c <__adddf3>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce92:	f7f3 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d145      	bne.n	800cf26 <_dtoa_r+0x6be>
 800ce9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce9e:	49a5      	ldr	r1, [pc, #660]	@ (800d134 <_dtoa_r+0x8cc>)
 800cea0:	2000      	movs	r0, #0
 800cea2:	f7f3 f9f1 	bl	8000288 <__aeabi_dsub>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceae:	f7f3 fe15 	bl	8000adc <__aeabi_dcmplt>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f43f aef5 	beq.w	800cca2 <_dtoa_r+0x43a>
 800ceb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ceba:	1e73      	subs	r3, r6, #1
 800cebc:	9315      	str	r3, [sp, #84]	@ 0x54
 800cebe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cec2:	2b30      	cmp	r3, #48	@ 0x30
 800cec4:	d0f8      	beq.n	800ceb8 <_dtoa_r+0x650>
 800cec6:	9f04      	ldr	r7, [sp, #16]
 800cec8:	e73e      	b.n	800cd48 <_dtoa_r+0x4e0>
 800ceca:	4b9b      	ldr	r3, [pc, #620]	@ (800d138 <_dtoa_r+0x8d0>)
 800cecc:	f7f3 fb94 	bl	80005f8 <__aeabi_dmul>
 800ced0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced4:	e7bc      	b.n	800ce50 <_dtoa_r+0x5e8>
 800ced6:	d10c      	bne.n	800cef2 <_dtoa_r+0x68a>
 800ced8:	4b98      	ldr	r3, [pc, #608]	@ (800d13c <_dtoa_r+0x8d4>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cee0:	f7f3 fb8a 	bl	80005f8 <__aeabi_dmul>
 800cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee8:	f7f3 fe0c 	bl	8000b04 <__aeabi_dcmpge>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	f000 8157 	beq.w	800d1a0 <_dtoa_r+0x938>
 800cef2:	2400      	movs	r4, #0
 800cef4:	4625      	mov	r5, r4
 800cef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cef8:	43db      	mvns	r3, r3
 800cefa:	9304      	str	r3, [sp, #16]
 800cefc:	4656      	mov	r6, sl
 800cefe:	2700      	movs	r7, #0
 800cf00:	4621      	mov	r1, r4
 800cf02:	4658      	mov	r0, fp
 800cf04:	f001 f98e 	bl	800e224 <_Bfree>
 800cf08:	2d00      	cmp	r5, #0
 800cf0a:	d0dc      	beq.n	800cec6 <_dtoa_r+0x65e>
 800cf0c:	b12f      	cbz	r7, 800cf1a <_dtoa_r+0x6b2>
 800cf0e:	42af      	cmp	r7, r5
 800cf10:	d003      	beq.n	800cf1a <_dtoa_r+0x6b2>
 800cf12:	4639      	mov	r1, r7
 800cf14:	4658      	mov	r0, fp
 800cf16:	f001 f985 	bl	800e224 <_Bfree>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4658      	mov	r0, fp
 800cf1e:	f001 f981 	bl	800e224 <_Bfree>
 800cf22:	e7d0      	b.n	800cec6 <_dtoa_r+0x65e>
 800cf24:	9704      	str	r7, [sp, #16]
 800cf26:	4633      	mov	r3, r6
 800cf28:	461e      	mov	r6, r3
 800cf2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf2e:	2a39      	cmp	r2, #57	@ 0x39
 800cf30:	d107      	bne.n	800cf42 <_dtoa_r+0x6da>
 800cf32:	459a      	cmp	sl, r3
 800cf34:	d1f8      	bne.n	800cf28 <_dtoa_r+0x6c0>
 800cf36:	9a04      	ldr	r2, [sp, #16]
 800cf38:	3201      	adds	r2, #1
 800cf3a:	9204      	str	r2, [sp, #16]
 800cf3c:	2230      	movs	r2, #48	@ 0x30
 800cf3e:	f88a 2000 	strb.w	r2, [sl]
 800cf42:	781a      	ldrb	r2, [r3, #0]
 800cf44:	3201      	adds	r2, #1
 800cf46:	701a      	strb	r2, [r3, #0]
 800cf48:	e7bd      	b.n	800cec6 <_dtoa_r+0x65e>
 800cf4a:	4b7b      	ldr	r3, [pc, #492]	@ (800d138 <_dtoa_r+0x8d0>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f7f3 fb53 	bl	80005f8 <__aeabi_dmul>
 800cf52:	2200      	movs	r2, #0
 800cf54:	2300      	movs	r3, #0
 800cf56:	4604      	mov	r4, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	f7f3 fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	f43f aebb 	beq.w	800ccda <_dtoa_r+0x472>
 800cf64:	e6f0      	b.n	800cd48 <_dtoa_r+0x4e0>
 800cf66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf68:	2a00      	cmp	r2, #0
 800cf6a:	f000 80db 	beq.w	800d124 <_dtoa_r+0x8bc>
 800cf6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf70:	2a01      	cmp	r2, #1
 800cf72:	f300 80bf 	bgt.w	800d0f4 <_dtoa_r+0x88c>
 800cf76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	f000 80b7 	beq.w	800d0ec <_dtoa_r+0x884>
 800cf7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cf82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf84:	4646      	mov	r6, r8
 800cf86:	9a08      	ldr	r2, [sp, #32]
 800cf88:	2101      	movs	r1, #1
 800cf8a:	441a      	add	r2, r3
 800cf8c:	4658      	mov	r0, fp
 800cf8e:	4498      	add	r8, r3
 800cf90:	9208      	str	r2, [sp, #32]
 800cf92:	f001 fa45 	bl	800e420 <__i2b>
 800cf96:	4605      	mov	r5, r0
 800cf98:	b15e      	cbz	r6, 800cfb2 <_dtoa_r+0x74a>
 800cf9a:	9b08      	ldr	r3, [sp, #32]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	dd08      	ble.n	800cfb2 <_dtoa_r+0x74a>
 800cfa0:	42b3      	cmp	r3, r6
 800cfa2:	9a08      	ldr	r2, [sp, #32]
 800cfa4:	bfa8      	it	ge
 800cfa6:	4633      	movge	r3, r6
 800cfa8:	eba8 0803 	sub.w	r8, r8, r3
 800cfac:	1af6      	subs	r6, r6, r3
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	9308      	str	r3, [sp, #32]
 800cfb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfb4:	b1f3      	cbz	r3, 800cff4 <_dtoa_r+0x78c>
 800cfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80b7 	beq.w	800d12c <_dtoa_r+0x8c4>
 800cfbe:	b18c      	cbz	r4, 800cfe4 <_dtoa_r+0x77c>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	4658      	mov	r0, fp
 800cfc6:	f001 faeb 	bl	800e5a0 <__pow5mult>
 800cfca:	464a      	mov	r2, r9
 800cfcc:	4601      	mov	r1, r0
 800cfce:	4605      	mov	r5, r0
 800cfd0:	4658      	mov	r0, fp
 800cfd2:	f001 fa3b 	bl	800e44c <__multiply>
 800cfd6:	4649      	mov	r1, r9
 800cfd8:	9004      	str	r0, [sp, #16]
 800cfda:	4658      	mov	r0, fp
 800cfdc:	f001 f922 	bl	800e224 <_Bfree>
 800cfe0:	9b04      	ldr	r3, [sp, #16]
 800cfe2:	4699      	mov	r9, r3
 800cfe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfe6:	1b1a      	subs	r2, r3, r4
 800cfe8:	d004      	beq.n	800cff4 <_dtoa_r+0x78c>
 800cfea:	4649      	mov	r1, r9
 800cfec:	4658      	mov	r0, fp
 800cfee:	f001 fad7 	bl	800e5a0 <__pow5mult>
 800cff2:	4681      	mov	r9, r0
 800cff4:	2101      	movs	r1, #1
 800cff6:	4658      	mov	r0, fp
 800cff8:	f001 fa12 	bl	800e420 <__i2b>
 800cffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cffe:	4604      	mov	r4, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 81cf 	beq.w	800d3a4 <_dtoa_r+0xb3c>
 800d006:	461a      	mov	r2, r3
 800d008:	4601      	mov	r1, r0
 800d00a:	4658      	mov	r0, fp
 800d00c:	f001 fac8 	bl	800e5a0 <__pow5mult>
 800d010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d012:	2b01      	cmp	r3, #1
 800d014:	4604      	mov	r4, r0
 800d016:	f300 8095 	bgt.w	800d144 <_dtoa_r+0x8dc>
 800d01a:	9b02      	ldr	r3, [sp, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f040 8087 	bne.w	800d130 <_dtoa_r+0x8c8>
 800d022:	9b03      	ldr	r3, [sp, #12]
 800d024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f040 8089 	bne.w	800d140 <_dtoa_r+0x8d8>
 800d02e:	9b03      	ldr	r3, [sp, #12]
 800d030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d034:	0d1b      	lsrs	r3, r3, #20
 800d036:	051b      	lsls	r3, r3, #20
 800d038:	b12b      	cbz	r3, 800d046 <_dtoa_r+0x7de>
 800d03a:	9b08      	ldr	r3, [sp, #32]
 800d03c:	3301      	adds	r3, #1
 800d03e:	9308      	str	r3, [sp, #32]
 800d040:	f108 0801 	add.w	r8, r8, #1
 800d044:	2301      	movs	r3, #1
 800d046:	930a      	str	r3, [sp, #40]	@ 0x28
 800d048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f000 81b0 	beq.w	800d3b0 <_dtoa_r+0xb48>
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d056:	6918      	ldr	r0, [r3, #16]
 800d058:	f001 f996 	bl	800e388 <__hi0bits>
 800d05c:	f1c0 0020 	rsb	r0, r0, #32
 800d060:	9b08      	ldr	r3, [sp, #32]
 800d062:	4418      	add	r0, r3
 800d064:	f010 001f 	ands.w	r0, r0, #31
 800d068:	d077      	beq.n	800d15a <_dtoa_r+0x8f2>
 800d06a:	f1c0 0320 	rsb	r3, r0, #32
 800d06e:	2b04      	cmp	r3, #4
 800d070:	dd6b      	ble.n	800d14a <_dtoa_r+0x8e2>
 800d072:	9b08      	ldr	r3, [sp, #32]
 800d074:	f1c0 001c 	rsb	r0, r0, #28
 800d078:	4403      	add	r3, r0
 800d07a:	4480      	add	r8, r0
 800d07c:	4406      	add	r6, r0
 800d07e:	9308      	str	r3, [sp, #32]
 800d080:	f1b8 0f00 	cmp.w	r8, #0
 800d084:	dd05      	ble.n	800d092 <_dtoa_r+0x82a>
 800d086:	4649      	mov	r1, r9
 800d088:	4642      	mov	r2, r8
 800d08a:	4658      	mov	r0, fp
 800d08c:	f001 fae2 	bl	800e654 <__lshift>
 800d090:	4681      	mov	r9, r0
 800d092:	9b08      	ldr	r3, [sp, #32]
 800d094:	2b00      	cmp	r3, #0
 800d096:	dd05      	ble.n	800d0a4 <_dtoa_r+0x83c>
 800d098:	4621      	mov	r1, r4
 800d09a:	461a      	mov	r2, r3
 800d09c:	4658      	mov	r0, fp
 800d09e:	f001 fad9 	bl	800e654 <__lshift>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d059      	beq.n	800d15e <_dtoa_r+0x8f6>
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	4648      	mov	r0, r9
 800d0ae:	f001 fb3d 	bl	800e72c <__mcmp>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	da53      	bge.n	800d15e <_dtoa_r+0x8f6>
 800d0b6:	1e7b      	subs	r3, r7, #1
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	2300      	movs	r3, #0
 800d0be:	220a      	movs	r2, #10
 800d0c0:	4658      	mov	r0, fp
 800d0c2:	f001 f8d1 	bl	800e268 <__multadd>
 800d0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0c8:	4681      	mov	r9, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f000 8172 	beq.w	800d3b4 <_dtoa_r+0xb4c>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	220a      	movs	r2, #10
 800d0d6:	4658      	mov	r0, fp
 800d0d8:	f001 f8c6 	bl	800e268 <__multadd>
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	dc67      	bgt.n	800d1b4 <_dtoa_r+0x94c>
 800d0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	dc41      	bgt.n	800d16e <_dtoa_r+0x906>
 800d0ea:	e063      	b.n	800d1b4 <_dtoa_r+0x94c>
 800d0ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d0ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d0f2:	e746      	b.n	800cf82 <_dtoa_r+0x71a>
 800d0f4:	9b07      	ldr	r3, [sp, #28]
 800d0f6:	1e5c      	subs	r4, r3, #1
 800d0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0fa:	42a3      	cmp	r3, r4
 800d0fc:	bfbf      	itttt	lt
 800d0fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d100:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d102:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d104:	1ae3      	sublt	r3, r4, r3
 800d106:	bfb4      	ite	lt
 800d108:	18d2      	addlt	r2, r2, r3
 800d10a:	1b1c      	subge	r4, r3, r4
 800d10c:	9b07      	ldr	r3, [sp, #28]
 800d10e:	bfbc      	itt	lt
 800d110:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d112:	2400      	movlt	r4, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	bfb5      	itete	lt
 800d118:	eba8 0603 	sublt.w	r6, r8, r3
 800d11c:	9b07      	ldrge	r3, [sp, #28]
 800d11e:	2300      	movlt	r3, #0
 800d120:	4646      	movge	r6, r8
 800d122:	e730      	b.n	800cf86 <_dtoa_r+0x71e>
 800d124:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d126:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d128:	4646      	mov	r6, r8
 800d12a:	e735      	b.n	800cf98 <_dtoa_r+0x730>
 800d12c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d12e:	e75c      	b.n	800cfea <_dtoa_r+0x782>
 800d130:	2300      	movs	r3, #0
 800d132:	e788      	b.n	800d046 <_dtoa_r+0x7de>
 800d134:	3fe00000 	.word	0x3fe00000
 800d138:	40240000 	.word	0x40240000
 800d13c:	40140000 	.word	0x40140000
 800d140:	9b02      	ldr	r3, [sp, #8]
 800d142:	e780      	b.n	800d046 <_dtoa_r+0x7de>
 800d144:	2300      	movs	r3, #0
 800d146:	930a      	str	r3, [sp, #40]	@ 0x28
 800d148:	e782      	b.n	800d050 <_dtoa_r+0x7e8>
 800d14a:	d099      	beq.n	800d080 <_dtoa_r+0x818>
 800d14c:	9a08      	ldr	r2, [sp, #32]
 800d14e:	331c      	adds	r3, #28
 800d150:	441a      	add	r2, r3
 800d152:	4498      	add	r8, r3
 800d154:	441e      	add	r6, r3
 800d156:	9208      	str	r2, [sp, #32]
 800d158:	e792      	b.n	800d080 <_dtoa_r+0x818>
 800d15a:	4603      	mov	r3, r0
 800d15c:	e7f6      	b.n	800d14c <_dtoa_r+0x8e4>
 800d15e:	9b07      	ldr	r3, [sp, #28]
 800d160:	9704      	str	r7, [sp, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	dc20      	bgt.n	800d1a8 <_dtoa_r+0x940>
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	dd1e      	ble.n	800d1ac <_dtoa_r+0x944>
 800d16e:	9b00      	ldr	r3, [sp, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f47f aec0 	bne.w	800cef6 <_dtoa_r+0x68e>
 800d176:	4621      	mov	r1, r4
 800d178:	2205      	movs	r2, #5
 800d17a:	4658      	mov	r0, fp
 800d17c:	f001 f874 	bl	800e268 <__multadd>
 800d180:	4601      	mov	r1, r0
 800d182:	4604      	mov	r4, r0
 800d184:	4648      	mov	r0, r9
 800d186:	f001 fad1 	bl	800e72c <__mcmp>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	f77f aeb3 	ble.w	800cef6 <_dtoa_r+0x68e>
 800d190:	4656      	mov	r6, sl
 800d192:	2331      	movs	r3, #49	@ 0x31
 800d194:	f806 3b01 	strb.w	r3, [r6], #1
 800d198:	9b04      	ldr	r3, [sp, #16]
 800d19a:	3301      	adds	r3, #1
 800d19c:	9304      	str	r3, [sp, #16]
 800d19e:	e6ae      	b.n	800cefe <_dtoa_r+0x696>
 800d1a0:	9c07      	ldr	r4, [sp, #28]
 800d1a2:	9704      	str	r7, [sp, #16]
 800d1a4:	4625      	mov	r5, r4
 800d1a6:	e7f3      	b.n	800d190 <_dtoa_r+0x928>
 800d1a8:	9b07      	ldr	r3, [sp, #28]
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 8104 	beq.w	800d3bc <_dtoa_r+0xb54>
 800d1b4:	2e00      	cmp	r6, #0
 800d1b6:	dd05      	ble.n	800d1c4 <_dtoa_r+0x95c>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4632      	mov	r2, r6
 800d1bc:	4658      	mov	r0, fp
 800d1be:	f001 fa49 	bl	800e654 <__lshift>
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d05a      	beq.n	800d280 <_dtoa_r+0xa18>
 800d1ca:	6869      	ldr	r1, [r5, #4]
 800d1cc:	4658      	mov	r0, fp
 800d1ce:	f000 ffe9 	bl	800e1a4 <_Balloc>
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	b928      	cbnz	r0, 800d1e2 <_dtoa_r+0x97a>
 800d1d6:	4b84      	ldr	r3, [pc, #528]	@ (800d3e8 <_dtoa_r+0xb80>)
 800d1d8:	4602      	mov	r2, r0
 800d1da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d1de:	f7ff bb5a 	b.w	800c896 <_dtoa_r+0x2e>
 800d1e2:	692a      	ldr	r2, [r5, #16]
 800d1e4:	3202      	adds	r2, #2
 800d1e6:	0092      	lsls	r2, r2, #2
 800d1e8:	f105 010c 	add.w	r1, r5, #12
 800d1ec:	300c      	adds	r0, #12
 800d1ee:	f7ff fa92 	bl	800c716 <memcpy>
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	4631      	mov	r1, r6
 800d1f6:	4658      	mov	r0, fp
 800d1f8:	f001 fa2c 	bl	800e654 <__lshift>
 800d1fc:	f10a 0301 	add.w	r3, sl, #1
 800d200:	9307      	str	r3, [sp, #28]
 800d202:	9b00      	ldr	r3, [sp, #0]
 800d204:	4453      	add	r3, sl
 800d206:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d208:	9b02      	ldr	r3, [sp, #8]
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	462f      	mov	r7, r5
 800d210:	930a      	str	r3, [sp, #40]	@ 0x28
 800d212:	4605      	mov	r5, r0
 800d214:	9b07      	ldr	r3, [sp, #28]
 800d216:	4621      	mov	r1, r4
 800d218:	3b01      	subs	r3, #1
 800d21a:	4648      	mov	r0, r9
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	f7ff fa99 	bl	800c754 <quorem>
 800d222:	4639      	mov	r1, r7
 800d224:	9002      	str	r0, [sp, #8]
 800d226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d22a:	4648      	mov	r0, r9
 800d22c:	f001 fa7e 	bl	800e72c <__mcmp>
 800d230:	462a      	mov	r2, r5
 800d232:	9008      	str	r0, [sp, #32]
 800d234:	4621      	mov	r1, r4
 800d236:	4658      	mov	r0, fp
 800d238:	f001 fa94 	bl	800e764 <__mdiff>
 800d23c:	68c2      	ldr	r2, [r0, #12]
 800d23e:	4606      	mov	r6, r0
 800d240:	bb02      	cbnz	r2, 800d284 <_dtoa_r+0xa1c>
 800d242:	4601      	mov	r1, r0
 800d244:	4648      	mov	r0, r9
 800d246:	f001 fa71 	bl	800e72c <__mcmp>
 800d24a:	4602      	mov	r2, r0
 800d24c:	4631      	mov	r1, r6
 800d24e:	4658      	mov	r0, fp
 800d250:	920e      	str	r2, [sp, #56]	@ 0x38
 800d252:	f000 ffe7 	bl	800e224 <_Bfree>
 800d256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d25a:	9e07      	ldr	r6, [sp, #28]
 800d25c:	ea43 0102 	orr.w	r1, r3, r2
 800d260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d262:	4319      	orrs	r1, r3
 800d264:	d110      	bne.n	800d288 <_dtoa_r+0xa20>
 800d266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d26a:	d029      	beq.n	800d2c0 <_dtoa_r+0xa58>
 800d26c:	9b08      	ldr	r3, [sp, #32]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	dd02      	ble.n	800d278 <_dtoa_r+0xa10>
 800d272:	9b02      	ldr	r3, [sp, #8]
 800d274:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d278:	9b00      	ldr	r3, [sp, #0]
 800d27a:	f883 8000 	strb.w	r8, [r3]
 800d27e:	e63f      	b.n	800cf00 <_dtoa_r+0x698>
 800d280:	4628      	mov	r0, r5
 800d282:	e7bb      	b.n	800d1fc <_dtoa_r+0x994>
 800d284:	2201      	movs	r2, #1
 800d286:	e7e1      	b.n	800d24c <_dtoa_r+0x9e4>
 800d288:	9b08      	ldr	r3, [sp, #32]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	db04      	blt.n	800d298 <_dtoa_r+0xa30>
 800d28e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d290:	430b      	orrs	r3, r1
 800d292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d294:	430b      	orrs	r3, r1
 800d296:	d120      	bne.n	800d2da <_dtoa_r+0xa72>
 800d298:	2a00      	cmp	r2, #0
 800d29a:	dded      	ble.n	800d278 <_dtoa_r+0xa10>
 800d29c:	4649      	mov	r1, r9
 800d29e:	2201      	movs	r2, #1
 800d2a0:	4658      	mov	r0, fp
 800d2a2:	f001 f9d7 	bl	800e654 <__lshift>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4681      	mov	r9, r0
 800d2aa:	f001 fa3f 	bl	800e72c <__mcmp>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	dc03      	bgt.n	800d2ba <_dtoa_r+0xa52>
 800d2b2:	d1e1      	bne.n	800d278 <_dtoa_r+0xa10>
 800d2b4:	f018 0f01 	tst.w	r8, #1
 800d2b8:	d0de      	beq.n	800d278 <_dtoa_r+0xa10>
 800d2ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2be:	d1d8      	bne.n	800d272 <_dtoa_r+0xa0a>
 800d2c0:	9a00      	ldr	r2, [sp, #0]
 800d2c2:	2339      	movs	r3, #57	@ 0x39
 800d2c4:	7013      	strb	r3, [r2, #0]
 800d2c6:	4633      	mov	r3, r6
 800d2c8:	461e      	mov	r6, r3
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d2d0:	2a39      	cmp	r2, #57	@ 0x39
 800d2d2:	d052      	beq.n	800d37a <_dtoa_r+0xb12>
 800d2d4:	3201      	adds	r2, #1
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	e612      	b.n	800cf00 <_dtoa_r+0x698>
 800d2da:	2a00      	cmp	r2, #0
 800d2dc:	dd07      	ble.n	800d2ee <_dtoa_r+0xa86>
 800d2de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2e2:	d0ed      	beq.n	800d2c0 <_dtoa_r+0xa58>
 800d2e4:	9a00      	ldr	r2, [sp, #0]
 800d2e6:	f108 0301 	add.w	r3, r8, #1
 800d2ea:	7013      	strb	r3, [r2, #0]
 800d2ec:	e608      	b.n	800cf00 <_dtoa_r+0x698>
 800d2ee:	9b07      	ldr	r3, [sp, #28]
 800d2f0:	9a07      	ldr	r2, [sp, #28]
 800d2f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d028      	beq.n	800d34e <_dtoa_r+0xae6>
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	2300      	movs	r3, #0
 800d300:	220a      	movs	r2, #10
 800d302:	4658      	mov	r0, fp
 800d304:	f000 ffb0 	bl	800e268 <__multadd>
 800d308:	42af      	cmp	r7, r5
 800d30a:	4681      	mov	r9, r0
 800d30c:	f04f 0300 	mov.w	r3, #0
 800d310:	f04f 020a 	mov.w	r2, #10
 800d314:	4639      	mov	r1, r7
 800d316:	4658      	mov	r0, fp
 800d318:	d107      	bne.n	800d32a <_dtoa_r+0xac2>
 800d31a:	f000 ffa5 	bl	800e268 <__multadd>
 800d31e:	4607      	mov	r7, r0
 800d320:	4605      	mov	r5, r0
 800d322:	9b07      	ldr	r3, [sp, #28]
 800d324:	3301      	adds	r3, #1
 800d326:	9307      	str	r3, [sp, #28]
 800d328:	e774      	b.n	800d214 <_dtoa_r+0x9ac>
 800d32a:	f000 ff9d 	bl	800e268 <__multadd>
 800d32e:	4629      	mov	r1, r5
 800d330:	4607      	mov	r7, r0
 800d332:	2300      	movs	r3, #0
 800d334:	220a      	movs	r2, #10
 800d336:	4658      	mov	r0, fp
 800d338:	f000 ff96 	bl	800e268 <__multadd>
 800d33c:	4605      	mov	r5, r0
 800d33e:	e7f0      	b.n	800d322 <_dtoa_r+0xaba>
 800d340:	9b00      	ldr	r3, [sp, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	bfcc      	ite	gt
 800d346:	461e      	movgt	r6, r3
 800d348:	2601      	movle	r6, #1
 800d34a:	4456      	add	r6, sl
 800d34c:	2700      	movs	r7, #0
 800d34e:	4649      	mov	r1, r9
 800d350:	2201      	movs	r2, #1
 800d352:	4658      	mov	r0, fp
 800d354:	f001 f97e 	bl	800e654 <__lshift>
 800d358:	4621      	mov	r1, r4
 800d35a:	4681      	mov	r9, r0
 800d35c:	f001 f9e6 	bl	800e72c <__mcmp>
 800d360:	2800      	cmp	r0, #0
 800d362:	dcb0      	bgt.n	800d2c6 <_dtoa_r+0xa5e>
 800d364:	d102      	bne.n	800d36c <_dtoa_r+0xb04>
 800d366:	f018 0f01 	tst.w	r8, #1
 800d36a:	d1ac      	bne.n	800d2c6 <_dtoa_r+0xa5e>
 800d36c:	4633      	mov	r3, r6
 800d36e:	461e      	mov	r6, r3
 800d370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d374:	2a30      	cmp	r2, #48	@ 0x30
 800d376:	d0fa      	beq.n	800d36e <_dtoa_r+0xb06>
 800d378:	e5c2      	b.n	800cf00 <_dtoa_r+0x698>
 800d37a:	459a      	cmp	sl, r3
 800d37c:	d1a4      	bne.n	800d2c8 <_dtoa_r+0xa60>
 800d37e:	9b04      	ldr	r3, [sp, #16]
 800d380:	3301      	adds	r3, #1
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	2331      	movs	r3, #49	@ 0x31
 800d386:	f88a 3000 	strb.w	r3, [sl]
 800d38a:	e5b9      	b.n	800cf00 <_dtoa_r+0x698>
 800d38c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d38e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d3ec <_dtoa_r+0xb84>
 800d392:	b11b      	cbz	r3, 800d39c <_dtoa_r+0xb34>
 800d394:	f10a 0308 	add.w	r3, sl, #8
 800d398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d39a:	6013      	str	r3, [r2, #0]
 800d39c:	4650      	mov	r0, sl
 800d39e:	b019      	add	sp, #100	@ 0x64
 800d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	f77f ae37 	ble.w	800d01a <_dtoa_r+0x7b2>
 800d3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	e655      	b.n	800d060 <_dtoa_r+0x7f8>
 800d3b4:	9b00      	ldr	r3, [sp, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f77f aed6 	ble.w	800d168 <_dtoa_r+0x900>
 800d3bc:	4656      	mov	r6, sl
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4648      	mov	r0, r9
 800d3c2:	f7ff f9c7 	bl	800c754 <quorem>
 800d3c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d3ca:	f806 8b01 	strb.w	r8, [r6], #1
 800d3ce:	9b00      	ldr	r3, [sp, #0]
 800d3d0:	eba6 020a 	sub.w	r2, r6, sl
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	ddb3      	ble.n	800d340 <_dtoa_r+0xad8>
 800d3d8:	4649      	mov	r1, r9
 800d3da:	2300      	movs	r3, #0
 800d3dc:	220a      	movs	r2, #10
 800d3de:	4658      	mov	r0, fp
 800d3e0:	f000 ff42 	bl	800e268 <__multadd>
 800d3e4:	4681      	mov	r9, r0
 800d3e6:	e7ea      	b.n	800d3be <_dtoa_r+0xb56>
 800d3e8:	0800f43d 	.word	0x0800f43d
 800d3ec:	0800f3c1 	.word	0x0800f3c1

0800d3f0 <_free_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	d041      	beq.n	800d47c <_free_r+0x8c>
 800d3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fc:	1f0c      	subs	r4, r1, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	bfb8      	it	lt
 800d402:	18e4      	addlt	r4, r4, r3
 800d404:	f7fe f948 	bl	800b698 <__malloc_lock>
 800d408:	4a1d      	ldr	r2, [pc, #116]	@ (800d480 <_free_r+0x90>)
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	b933      	cbnz	r3, 800d41c <_free_r+0x2c>
 800d40e:	6063      	str	r3, [r4, #4]
 800d410:	6014      	str	r4, [r2, #0]
 800d412:	4628      	mov	r0, r5
 800d414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d418:	f7fe b944 	b.w	800b6a4 <__malloc_unlock>
 800d41c:	42a3      	cmp	r3, r4
 800d41e:	d908      	bls.n	800d432 <_free_r+0x42>
 800d420:	6820      	ldr	r0, [r4, #0]
 800d422:	1821      	adds	r1, r4, r0
 800d424:	428b      	cmp	r3, r1
 800d426:	bf01      	itttt	eq
 800d428:	6819      	ldreq	r1, [r3, #0]
 800d42a:	685b      	ldreq	r3, [r3, #4]
 800d42c:	1809      	addeq	r1, r1, r0
 800d42e:	6021      	streq	r1, [r4, #0]
 800d430:	e7ed      	b.n	800d40e <_free_r+0x1e>
 800d432:	461a      	mov	r2, r3
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	b10b      	cbz	r3, 800d43c <_free_r+0x4c>
 800d438:	42a3      	cmp	r3, r4
 800d43a:	d9fa      	bls.n	800d432 <_free_r+0x42>
 800d43c:	6811      	ldr	r1, [r2, #0]
 800d43e:	1850      	adds	r0, r2, r1
 800d440:	42a0      	cmp	r0, r4
 800d442:	d10b      	bne.n	800d45c <_free_r+0x6c>
 800d444:	6820      	ldr	r0, [r4, #0]
 800d446:	4401      	add	r1, r0
 800d448:	1850      	adds	r0, r2, r1
 800d44a:	4283      	cmp	r3, r0
 800d44c:	6011      	str	r1, [r2, #0]
 800d44e:	d1e0      	bne.n	800d412 <_free_r+0x22>
 800d450:	6818      	ldr	r0, [r3, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	6053      	str	r3, [r2, #4]
 800d456:	4408      	add	r0, r1
 800d458:	6010      	str	r0, [r2, #0]
 800d45a:	e7da      	b.n	800d412 <_free_r+0x22>
 800d45c:	d902      	bls.n	800d464 <_free_r+0x74>
 800d45e:	230c      	movs	r3, #12
 800d460:	602b      	str	r3, [r5, #0]
 800d462:	e7d6      	b.n	800d412 <_free_r+0x22>
 800d464:	6820      	ldr	r0, [r4, #0]
 800d466:	1821      	adds	r1, r4, r0
 800d468:	428b      	cmp	r3, r1
 800d46a:	bf04      	itt	eq
 800d46c:	6819      	ldreq	r1, [r3, #0]
 800d46e:	685b      	ldreq	r3, [r3, #4]
 800d470:	6063      	str	r3, [r4, #4]
 800d472:	bf04      	itt	eq
 800d474:	1809      	addeq	r1, r1, r0
 800d476:	6021      	streq	r1, [r4, #0]
 800d478:	6054      	str	r4, [r2, #4]
 800d47a:	e7ca      	b.n	800d412 <_free_r+0x22>
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	bf00      	nop
 800d480:	20000b20 	.word	0x20000b20

0800d484 <rshift>:
 800d484:	6903      	ldr	r3, [r0, #16]
 800d486:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d48a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d48e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d492:	f100 0414 	add.w	r4, r0, #20
 800d496:	dd45      	ble.n	800d524 <rshift+0xa0>
 800d498:	f011 011f 	ands.w	r1, r1, #31
 800d49c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4a4:	d10c      	bne.n	800d4c0 <rshift+0x3c>
 800d4a6:	f100 0710 	add.w	r7, r0, #16
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	42b1      	cmp	r1, r6
 800d4ae:	d334      	bcc.n	800d51a <rshift+0x96>
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	1eea      	subs	r2, r5, #3
 800d4b6:	4296      	cmp	r6, r2
 800d4b8:	bf38      	it	cc
 800d4ba:	2300      	movcc	r3, #0
 800d4bc:	4423      	add	r3, r4
 800d4be:	e015      	b.n	800d4ec <rshift+0x68>
 800d4c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d4c4:	f1c1 0820 	rsb	r8, r1, #32
 800d4c8:	40cf      	lsrs	r7, r1
 800d4ca:	f105 0e04 	add.w	lr, r5, #4
 800d4ce:	46a1      	mov	r9, r4
 800d4d0:	4576      	cmp	r6, lr
 800d4d2:	46f4      	mov	ip, lr
 800d4d4:	d815      	bhi.n	800d502 <rshift+0x7e>
 800d4d6:	1a9a      	subs	r2, r3, r2
 800d4d8:	0092      	lsls	r2, r2, #2
 800d4da:	3a04      	subs	r2, #4
 800d4dc:	3501      	adds	r5, #1
 800d4de:	42ae      	cmp	r6, r5
 800d4e0:	bf38      	it	cc
 800d4e2:	2200      	movcc	r2, #0
 800d4e4:	18a3      	adds	r3, r4, r2
 800d4e6:	50a7      	str	r7, [r4, r2]
 800d4e8:	b107      	cbz	r7, 800d4ec <rshift+0x68>
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	1b1a      	subs	r2, r3, r4
 800d4ee:	42a3      	cmp	r3, r4
 800d4f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d4f4:	bf08      	it	eq
 800d4f6:	2300      	moveq	r3, #0
 800d4f8:	6102      	str	r2, [r0, #16]
 800d4fa:	bf08      	it	eq
 800d4fc:	6143      	streq	r3, [r0, #20]
 800d4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d502:	f8dc c000 	ldr.w	ip, [ip]
 800d506:	fa0c fc08 	lsl.w	ip, ip, r8
 800d50a:	ea4c 0707 	orr.w	r7, ip, r7
 800d50e:	f849 7b04 	str.w	r7, [r9], #4
 800d512:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d516:	40cf      	lsrs	r7, r1
 800d518:	e7da      	b.n	800d4d0 <rshift+0x4c>
 800d51a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d51e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d522:	e7c3      	b.n	800d4ac <rshift+0x28>
 800d524:	4623      	mov	r3, r4
 800d526:	e7e1      	b.n	800d4ec <rshift+0x68>

0800d528 <__hexdig_fun>:
 800d528:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d52c:	2b09      	cmp	r3, #9
 800d52e:	d802      	bhi.n	800d536 <__hexdig_fun+0xe>
 800d530:	3820      	subs	r0, #32
 800d532:	b2c0      	uxtb	r0, r0
 800d534:	4770      	bx	lr
 800d536:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d53a:	2b05      	cmp	r3, #5
 800d53c:	d801      	bhi.n	800d542 <__hexdig_fun+0x1a>
 800d53e:	3847      	subs	r0, #71	@ 0x47
 800d540:	e7f7      	b.n	800d532 <__hexdig_fun+0xa>
 800d542:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d546:	2b05      	cmp	r3, #5
 800d548:	d801      	bhi.n	800d54e <__hexdig_fun+0x26>
 800d54a:	3827      	subs	r0, #39	@ 0x27
 800d54c:	e7f1      	b.n	800d532 <__hexdig_fun+0xa>
 800d54e:	2000      	movs	r0, #0
 800d550:	4770      	bx	lr
	...

0800d554 <__gethex>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	b085      	sub	sp, #20
 800d55a:	468a      	mov	sl, r1
 800d55c:	9302      	str	r3, [sp, #8]
 800d55e:	680b      	ldr	r3, [r1, #0]
 800d560:	9001      	str	r0, [sp, #4]
 800d562:	4690      	mov	r8, r2
 800d564:	1c9c      	adds	r4, r3, #2
 800d566:	46a1      	mov	r9, r4
 800d568:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d56c:	2830      	cmp	r0, #48	@ 0x30
 800d56e:	d0fa      	beq.n	800d566 <__gethex+0x12>
 800d570:	eba9 0303 	sub.w	r3, r9, r3
 800d574:	f1a3 0b02 	sub.w	fp, r3, #2
 800d578:	f7ff ffd6 	bl	800d528 <__hexdig_fun>
 800d57c:	4605      	mov	r5, r0
 800d57e:	2800      	cmp	r0, #0
 800d580:	d168      	bne.n	800d654 <__gethex+0x100>
 800d582:	49a0      	ldr	r1, [pc, #640]	@ (800d804 <__gethex+0x2b0>)
 800d584:	2201      	movs	r2, #1
 800d586:	4648      	mov	r0, r9
 800d588:	f7ff f86a 	bl	800c660 <strncmp>
 800d58c:	4607      	mov	r7, r0
 800d58e:	2800      	cmp	r0, #0
 800d590:	d167      	bne.n	800d662 <__gethex+0x10e>
 800d592:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d596:	4626      	mov	r6, r4
 800d598:	f7ff ffc6 	bl	800d528 <__hexdig_fun>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d062      	beq.n	800d666 <__gethex+0x112>
 800d5a0:	4623      	mov	r3, r4
 800d5a2:	7818      	ldrb	r0, [r3, #0]
 800d5a4:	2830      	cmp	r0, #48	@ 0x30
 800d5a6:	4699      	mov	r9, r3
 800d5a8:	f103 0301 	add.w	r3, r3, #1
 800d5ac:	d0f9      	beq.n	800d5a2 <__gethex+0x4e>
 800d5ae:	f7ff ffbb 	bl	800d528 <__hexdig_fun>
 800d5b2:	fab0 f580 	clz	r5, r0
 800d5b6:	096d      	lsrs	r5, r5, #5
 800d5b8:	f04f 0b01 	mov.w	fp, #1
 800d5bc:	464a      	mov	r2, r9
 800d5be:	4616      	mov	r6, r2
 800d5c0:	3201      	adds	r2, #1
 800d5c2:	7830      	ldrb	r0, [r6, #0]
 800d5c4:	f7ff ffb0 	bl	800d528 <__hexdig_fun>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d1f8      	bne.n	800d5be <__gethex+0x6a>
 800d5cc:	498d      	ldr	r1, [pc, #564]	@ (800d804 <__gethex+0x2b0>)
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f7ff f845 	bl	800c660 <strncmp>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d13f      	bne.n	800d65a <__gethex+0x106>
 800d5da:	b944      	cbnz	r4, 800d5ee <__gethex+0x9a>
 800d5dc:	1c74      	adds	r4, r6, #1
 800d5de:	4622      	mov	r2, r4
 800d5e0:	4616      	mov	r6, r2
 800d5e2:	3201      	adds	r2, #1
 800d5e4:	7830      	ldrb	r0, [r6, #0]
 800d5e6:	f7ff ff9f 	bl	800d528 <__hexdig_fun>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d1f8      	bne.n	800d5e0 <__gethex+0x8c>
 800d5ee:	1ba4      	subs	r4, r4, r6
 800d5f0:	00a7      	lsls	r7, r4, #2
 800d5f2:	7833      	ldrb	r3, [r6, #0]
 800d5f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d5f8:	2b50      	cmp	r3, #80	@ 0x50
 800d5fa:	d13e      	bne.n	800d67a <__gethex+0x126>
 800d5fc:	7873      	ldrb	r3, [r6, #1]
 800d5fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800d600:	d033      	beq.n	800d66a <__gethex+0x116>
 800d602:	2b2d      	cmp	r3, #45	@ 0x2d
 800d604:	d034      	beq.n	800d670 <__gethex+0x11c>
 800d606:	1c71      	adds	r1, r6, #1
 800d608:	2400      	movs	r4, #0
 800d60a:	7808      	ldrb	r0, [r1, #0]
 800d60c:	f7ff ff8c 	bl	800d528 <__hexdig_fun>
 800d610:	1e43      	subs	r3, r0, #1
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b18      	cmp	r3, #24
 800d616:	d830      	bhi.n	800d67a <__gethex+0x126>
 800d618:	f1a0 0210 	sub.w	r2, r0, #16
 800d61c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d620:	f7ff ff82 	bl	800d528 <__hexdig_fun>
 800d624:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d628:	fa5f fc8c 	uxtb.w	ip, ip
 800d62c:	f1bc 0f18 	cmp.w	ip, #24
 800d630:	f04f 030a 	mov.w	r3, #10
 800d634:	d91e      	bls.n	800d674 <__gethex+0x120>
 800d636:	b104      	cbz	r4, 800d63a <__gethex+0xe6>
 800d638:	4252      	negs	r2, r2
 800d63a:	4417      	add	r7, r2
 800d63c:	f8ca 1000 	str.w	r1, [sl]
 800d640:	b1ed      	cbz	r5, 800d67e <__gethex+0x12a>
 800d642:	f1bb 0f00 	cmp.w	fp, #0
 800d646:	bf0c      	ite	eq
 800d648:	2506      	moveq	r5, #6
 800d64a:	2500      	movne	r5, #0
 800d64c:	4628      	mov	r0, r5
 800d64e:	b005      	add	sp, #20
 800d650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d654:	2500      	movs	r5, #0
 800d656:	462c      	mov	r4, r5
 800d658:	e7b0      	b.n	800d5bc <__gethex+0x68>
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	d1c7      	bne.n	800d5ee <__gethex+0x9a>
 800d65e:	4627      	mov	r7, r4
 800d660:	e7c7      	b.n	800d5f2 <__gethex+0x9e>
 800d662:	464e      	mov	r6, r9
 800d664:	462f      	mov	r7, r5
 800d666:	2501      	movs	r5, #1
 800d668:	e7c3      	b.n	800d5f2 <__gethex+0x9e>
 800d66a:	2400      	movs	r4, #0
 800d66c:	1cb1      	adds	r1, r6, #2
 800d66e:	e7cc      	b.n	800d60a <__gethex+0xb6>
 800d670:	2401      	movs	r4, #1
 800d672:	e7fb      	b.n	800d66c <__gethex+0x118>
 800d674:	fb03 0002 	mla	r0, r3, r2, r0
 800d678:	e7ce      	b.n	800d618 <__gethex+0xc4>
 800d67a:	4631      	mov	r1, r6
 800d67c:	e7de      	b.n	800d63c <__gethex+0xe8>
 800d67e:	eba6 0309 	sub.w	r3, r6, r9
 800d682:	3b01      	subs	r3, #1
 800d684:	4629      	mov	r1, r5
 800d686:	2b07      	cmp	r3, #7
 800d688:	dc0a      	bgt.n	800d6a0 <__gethex+0x14c>
 800d68a:	9801      	ldr	r0, [sp, #4]
 800d68c:	f000 fd8a 	bl	800e1a4 <_Balloc>
 800d690:	4604      	mov	r4, r0
 800d692:	b940      	cbnz	r0, 800d6a6 <__gethex+0x152>
 800d694:	4b5c      	ldr	r3, [pc, #368]	@ (800d808 <__gethex+0x2b4>)
 800d696:	4602      	mov	r2, r0
 800d698:	21e4      	movs	r1, #228	@ 0xe4
 800d69a:	485c      	ldr	r0, [pc, #368]	@ (800d80c <__gethex+0x2b8>)
 800d69c:	f001 fc2c 	bl	800eef8 <__assert_func>
 800d6a0:	3101      	adds	r1, #1
 800d6a2:	105b      	asrs	r3, r3, #1
 800d6a4:	e7ef      	b.n	800d686 <__gethex+0x132>
 800d6a6:	f100 0a14 	add.w	sl, r0, #20
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	4655      	mov	r5, sl
 800d6ae:	469b      	mov	fp, r3
 800d6b0:	45b1      	cmp	r9, r6
 800d6b2:	d337      	bcc.n	800d724 <__gethex+0x1d0>
 800d6b4:	f845 bb04 	str.w	fp, [r5], #4
 800d6b8:	eba5 050a 	sub.w	r5, r5, sl
 800d6bc:	10ad      	asrs	r5, r5, #2
 800d6be:	6125      	str	r5, [r4, #16]
 800d6c0:	4658      	mov	r0, fp
 800d6c2:	f000 fe61 	bl	800e388 <__hi0bits>
 800d6c6:	016d      	lsls	r5, r5, #5
 800d6c8:	f8d8 6000 	ldr.w	r6, [r8]
 800d6cc:	1a2d      	subs	r5, r5, r0
 800d6ce:	42b5      	cmp	r5, r6
 800d6d0:	dd54      	ble.n	800d77c <__gethex+0x228>
 800d6d2:	1bad      	subs	r5, r5, r6
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f001 f9f5 	bl	800eac6 <__any_on>
 800d6dc:	4681      	mov	r9, r0
 800d6de:	b178      	cbz	r0, 800d700 <__gethex+0x1ac>
 800d6e0:	1e6b      	subs	r3, r5, #1
 800d6e2:	1159      	asrs	r1, r3, #5
 800d6e4:	f003 021f 	and.w	r2, r3, #31
 800d6e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d6ec:	f04f 0901 	mov.w	r9, #1
 800d6f0:	fa09 f202 	lsl.w	r2, r9, r2
 800d6f4:	420a      	tst	r2, r1
 800d6f6:	d003      	beq.n	800d700 <__gethex+0x1ac>
 800d6f8:	454b      	cmp	r3, r9
 800d6fa:	dc36      	bgt.n	800d76a <__gethex+0x216>
 800d6fc:	f04f 0902 	mov.w	r9, #2
 800d700:	4629      	mov	r1, r5
 800d702:	4620      	mov	r0, r4
 800d704:	f7ff febe 	bl	800d484 <rshift>
 800d708:	442f      	add	r7, r5
 800d70a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d70e:	42bb      	cmp	r3, r7
 800d710:	da42      	bge.n	800d798 <__gethex+0x244>
 800d712:	9801      	ldr	r0, [sp, #4]
 800d714:	4621      	mov	r1, r4
 800d716:	f000 fd85 	bl	800e224 <_Bfree>
 800d71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d71c:	2300      	movs	r3, #0
 800d71e:	6013      	str	r3, [r2, #0]
 800d720:	25a3      	movs	r5, #163	@ 0xa3
 800d722:	e793      	b.n	800d64c <__gethex+0xf8>
 800d724:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d728:	2a2e      	cmp	r2, #46	@ 0x2e
 800d72a:	d012      	beq.n	800d752 <__gethex+0x1fe>
 800d72c:	2b20      	cmp	r3, #32
 800d72e:	d104      	bne.n	800d73a <__gethex+0x1e6>
 800d730:	f845 bb04 	str.w	fp, [r5], #4
 800d734:	f04f 0b00 	mov.w	fp, #0
 800d738:	465b      	mov	r3, fp
 800d73a:	7830      	ldrb	r0, [r6, #0]
 800d73c:	9303      	str	r3, [sp, #12]
 800d73e:	f7ff fef3 	bl	800d528 <__hexdig_fun>
 800d742:	9b03      	ldr	r3, [sp, #12]
 800d744:	f000 000f 	and.w	r0, r0, #15
 800d748:	4098      	lsls	r0, r3
 800d74a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d74e:	3304      	adds	r3, #4
 800d750:	e7ae      	b.n	800d6b0 <__gethex+0x15c>
 800d752:	45b1      	cmp	r9, r6
 800d754:	d8ea      	bhi.n	800d72c <__gethex+0x1d8>
 800d756:	492b      	ldr	r1, [pc, #172]	@ (800d804 <__gethex+0x2b0>)
 800d758:	9303      	str	r3, [sp, #12]
 800d75a:	2201      	movs	r2, #1
 800d75c:	4630      	mov	r0, r6
 800d75e:	f7fe ff7f 	bl	800c660 <strncmp>
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	2800      	cmp	r0, #0
 800d766:	d1e1      	bne.n	800d72c <__gethex+0x1d8>
 800d768:	e7a2      	b.n	800d6b0 <__gethex+0x15c>
 800d76a:	1ea9      	subs	r1, r5, #2
 800d76c:	4620      	mov	r0, r4
 800d76e:	f001 f9aa 	bl	800eac6 <__any_on>
 800d772:	2800      	cmp	r0, #0
 800d774:	d0c2      	beq.n	800d6fc <__gethex+0x1a8>
 800d776:	f04f 0903 	mov.w	r9, #3
 800d77a:	e7c1      	b.n	800d700 <__gethex+0x1ac>
 800d77c:	da09      	bge.n	800d792 <__gethex+0x23e>
 800d77e:	1b75      	subs	r5, r6, r5
 800d780:	4621      	mov	r1, r4
 800d782:	9801      	ldr	r0, [sp, #4]
 800d784:	462a      	mov	r2, r5
 800d786:	f000 ff65 	bl	800e654 <__lshift>
 800d78a:	1b7f      	subs	r7, r7, r5
 800d78c:	4604      	mov	r4, r0
 800d78e:	f100 0a14 	add.w	sl, r0, #20
 800d792:	f04f 0900 	mov.w	r9, #0
 800d796:	e7b8      	b.n	800d70a <__gethex+0x1b6>
 800d798:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d79c:	42bd      	cmp	r5, r7
 800d79e:	dd6f      	ble.n	800d880 <__gethex+0x32c>
 800d7a0:	1bed      	subs	r5, r5, r7
 800d7a2:	42ae      	cmp	r6, r5
 800d7a4:	dc34      	bgt.n	800d810 <__gethex+0x2bc>
 800d7a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d022      	beq.n	800d7f4 <__gethex+0x2a0>
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d024      	beq.n	800d7fc <__gethex+0x2a8>
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d115      	bne.n	800d7e2 <__gethex+0x28e>
 800d7b6:	42ae      	cmp	r6, r5
 800d7b8:	d113      	bne.n	800d7e2 <__gethex+0x28e>
 800d7ba:	2e01      	cmp	r6, #1
 800d7bc:	d10b      	bne.n	800d7d6 <__gethex+0x282>
 800d7be:	9a02      	ldr	r2, [sp, #8]
 800d7c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	6123      	str	r3, [r4, #16]
 800d7ca:	f8ca 3000 	str.w	r3, [sl]
 800d7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7d0:	2562      	movs	r5, #98	@ 0x62
 800d7d2:	601c      	str	r4, [r3, #0]
 800d7d4:	e73a      	b.n	800d64c <__gethex+0xf8>
 800d7d6:	1e71      	subs	r1, r6, #1
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 f974 	bl	800eac6 <__any_on>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d1ed      	bne.n	800d7be <__gethex+0x26a>
 800d7e2:	9801      	ldr	r0, [sp, #4]
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	f000 fd1d 	bl	800e224 <_Bfree>
 800d7ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	6013      	str	r3, [r2, #0]
 800d7f0:	2550      	movs	r5, #80	@ 0x50
 800d7f2:	e72b      	b.n	800d64c <__gethex+0xf8>
 800d7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1f3      	bne.n	800d7e2 <__gethex+0x28e>
 800d7fa:	e7e0      	b.n	800d7be <__gethex+0x26a>
 800d7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1dd      	bne.n	800d7be <__gethex+0x26a>
 800d802:	e7ee      	b.n	800d7e2 <__gethex+0x28e>
 800d804:	0800f265 	.word	0x0800f265
 800d808:	0800f43d 	.word	0x0800f43d
 800d80c:	0800f44e 	.word	0x0800f44e
 800d810:	1e6f      	subs	r7, r5, #1
 800d812:	f1b9 0f00 	cmp.w	r9, #0
 800d816:	d130      	bne.n	800d87a <__gethex+0x326>
 800d818:	b127      	cbz	r7, 800d824 <__gethex+0x2d0>
 800d81a:	4639      	mov	r1, r7
 800d81c:	4620      	mov	r0, r4
 800d81e:	f001 f952 	bl	800eac6 <__any_on>
 800d822:	4681      	mov	r9, r0
 800d824:	117a      	asrs	r2, r7, #5
 800d826:	2301      	movs	r3, #1
 800d828:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d82c:	f007 071f 	and.w	r7, r7, #31
 800d830:	40bb      	lsls	r3, r7
 800d832:	4213      	tst	r3, r2
 800d834:	4629      	mov	r1, r5
 800d836:	4620      	mov	r0, r4
 800d838:	bf18      	it	ne
 800d83a:	f049 0902 	orrne.w	r9, r9, #2
 800d83e:	f7ff fe21 	bl	800d484 <rshift>
 800d842:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d846:	1b76      	subs	r6, r6, r5
 800d848:	2502      	movs	r5, #2
 800d84a:	f1b9 0f00 	cmp.w	r9, #0
 800d84e:	d047      	beq.n	800d8e0 <__gethex+0x38c>
 800d850:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d015      	beq.n	800d884 <__gethex+0x330>
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d017      	beq.n	800d88c <__gethex+0x338>
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d109      	bne.n	800d874 <__gethex+0x320>
 800d860:	f019 0f02 	tst.w	r9, #2
 800d864:	d006      	beq.n	800d874 <__gethex+0x320>
 800d866:	f8da 3000 	ldr.w	r3, [sl]
 800d86a:	ea49 0903 	orr.w	r9, r9, r3
 800d86e:	f019 0f01 	tst.w	r9, #1
 800d872:	d10e      	bne.n	800d892 <__gethex+0x33e>
 800d874:	f045 0510 	orr.w	r5, r5, #16
 800d878:	e032      	b.n	800d8e0 <__gethex+0x38c>
 800d87a:	f04f 0901 	mov.w	r9, #1
 800d87e:	e7d1      	b.n	800d824 <__gethex+0x2d0>
 800d880:	2501      	movs	r5, #1
 800d882:	e7e2      	b.n	800d84a <__gethex+0x2f6>
 800d884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d886:	f1c3 0301 	rsb	r3, r3, #1
 800d88a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0f0      	beq.n	800d874 <__gethex+0x320>
 800d892:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d896:	f104 0314 	add.w	r3, r4, #20
 800d89a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d89e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d8a2:	f04f 0c00 	mov.w	ip, #0
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d8b0:	d01b      	beq.n	800d8ea <__gethex+0x396>
 800d8b2:	3201      	adds	r2, #1
 800d8b4:	6002      	str	r2, [r0, #0]
 800d8b6:	2d02      	cmp	r5, #2
 800d8b8:	f104 0314 	add.w	r3, r4, #20
 800d8bc:	d13c      	bne.n	800d938 <__gethex+0x3e4>
 800d8be:	f8d8 2000 	ldr.w	r2, [r8]
 800d8c2:	3a01      	subs	r2, #1
 800d8c4:	42b2      	cmp	r2, r6
 800d8c6:	d109      	bne.n	800d8dc <__gethex+0x388>
 800d8c8:	1171      	asrs	r1, r6, #5
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d8d0:	f006 061f 	and.w	r6, r6, #31
 800d8d4:	fa02 f606 	lsl.w	r6, r2, r6
 800d8d8:	421e      	tst	r6, r3
 800d8da:	d13a      	bne.n	800d952 <__gethex+0x3fe>
 800d8dc:	f045 0520 	orr.w	r5, r5, #32
 800d8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e2:	601c      	str	r4, [r3, #0]
 800d8e4:	9b02      	ldr	r3, [sp, #8]
 800d8e6:	601f      	str	r7, [r3, #0]
 800d8e8:	e6b0      	b.n	800d64c <__gethex+0xf8>
 800d8ea:	4299      	cmp	r1, r3
 800d8ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800d8f0:	d8d9      	bhi.n	800d8a6 <__gethex+0x352>
 800d8f2:	68a3      	ldr	r3, [r4, #8]
 800d8f4:	459b      	cmp	fp, r3
 800d8f6:	db17      	blt.n	800d928 <__gethex+0x3d4>
 800d8f8:	6861      	ldr	r1, [r4, #4]
 800d8fa:	9801      	ldr	r0, [sp, #4]
 800d8fc:	3101      	adds	r1, #1
 800d8fe:	f000 fc51 	bl	800e1a4 <_Balloc>
 800d902:	4681      	mov	r9, r0
 800d904:	b918      	cbnz	r0, 800d90e <__gethex+0x3ba>
 800d906:	4b1a      	ldr	r3, [pc, #104]	@ (800d970 <__gethex+0x41c>)
 800d908:	4602      	mov	r2, r0
 800d90a:	2184      	movs	r1, #132	@ 0x84
 800d90c:	e6c5      	b.n	800d69a <__gethex+0x146>
 800d90e:	6922      	ldr	r2, [r4, #16]
 800d910:	3202      	adds	r2, #2
 800d912:	f104 010c 	add.w	r1, r4, #12
 800d916:	0092      	lsls	r2, r2, #2
 800d918:	300c      	adds	r0, #12
 800d91a:	f7fe fefc 	bl	800c716 <memcpy>
 800d91e:	4621      	mov	r1, r4
 800d920:	9801      	ldr	r0, [sp, #4]
 800d922:	f000 fc7f 	bl	800e224 <_Bfree>
 800d926:	464c      	mov	r4, r9
 800d928:	6923      	ldr	r3, [r4, #16]
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d930:	6122      	str	r2, [r4, #16]
 800d932:	2201      	movs	r2, #1
 800d934:	615a      	str	r2, [r3, #20]
 800d936:	e7be      	b.n	800d8b6 <__gethex+0x362>
 800d938:	6922      	ldr	r2, [r4, #16]
 800d93a:	455a      	cmp	r2, fp
 800d93c:	dd0b      	ble.n	800d956 <__gethex+0x402>
 800d93e:	2101      	movs	r1, #1
 800d940:	4620      	mov	r0, r4
 800d942:	f7ff fd9f 	bl	800d484 <rshift>
 800d946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d94a:	3701      	adds	r7, #1
 800d94c:	42bb      	cmp	r3, r7
 800d94e:	f6ff aee0 	blt.w	800d712 <__gethex+0x1be>
 800d952:	2501      	movs	r5, #1
 800d954:	e7c2      	b.n	800d8dc <__gethex+0x388>
 800d956:	f016 061f 	ands.w	r6, r6, #31
 800d95a:	d0fa      	beq.n	800d952 <__gethex+0x3fe>
 800d95c:	4453      	add	r3, sl
 800d95e:	f1c6 0620 	rsb	r6, r6, #32
 800d962:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d966:	f000 fd0f 	bl	800e388 <__hi0bits>
 800d96a:	42b0      	cmp	r0, r6
 800d96c:	dbe7      	blt.n	800d93e <__gethex+0x3ea>
 800d96e:	e7f0      	b.n	800d952 <__gethex+0x3fe>
 800d970:	0800f43d 	.word	0x0800f43d

0800d974 <L_shift>:
 800d974:	f1c2 0208 	rsb	r2, r2, #8
 800d978:	0092      	lsls	r2, r2, #2
 800d97a:	b570      	push	{r4, r5, r6, lr}
 800d97c:	f1c2 0620 	rsb	r6, r2, #32
 800d980:	6843      	ldr	r3, [r0, #4]
 800d982:	6804      	ldr	r4, [r0, #0]
 800d984:	fa03 f506 	lsl.w	r5, r3, r6
 800d988:	432c      	orrs	r4, r5
 800d98a:	40d3      	lsrs	r3, r2
 800d98c:	6004      	str	r4, [r0, #0]
 800d98e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d992:	4288      	cmp	r0, r1
 800d994:	d3f4      	bcc.n	800d980 <L_shift+0xc>
 800d996:	bd70      	pop	{r4, r5, r6, pc}

0800d998 <__match>:
 800d998:	b530      	push	{r4, r5, lr}
 800d99a:	6803      	ldr	r3, [r0, #0]
 800d99c:	3301      	adds	r3, #1
 800d99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a2:	b914      	cbnz	r4, 800d9aa <__match+0x12>
 800d9a4:	6003      	str	r3, [r0, #0]
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	bd30      	pop	{r4, r5, pc}
 800d9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d9b2:	2d19      	cmp	r5, #25
 800d9b4:	bf98      	it	ls
 800d9b6:	3220      	addls	r2, #32
 800d9b8:	42a2      	cmp	r2, r4
 800d9ba:	d0f0      	beq.n	800d99e <__match+0x6>
 800d9bc:	2000      	movs	r0, #0
 800d9be:	e7f3      	b.n	800d9a8 <__match+0x10>

0800d9c0 <__hexnan>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	680b      	ldr	r3, [r1, #0]
 800d9c6:	6801      	ldr	r1, [r0, #0]
 800d9c8:	115e      	asrs	r6, r3, #5
 800d9ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d9ce:	f013 031f 	ands.w	r3, r3, #31
 800d9d2:	b087      	sub	sp, #28
 800d9d4:	bf18      	it	ne
 800d9d6:	3604      	addne	r6, #4
 800d9d8:	2500      	movs	r5, #0
 800d9da:	1f37      	subs	r7, r6, #4
 800d9dc:	4682      	mov	sl, r0
 800d9de:	4690      	mov	r8, r2
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d9e6:	46b9      	mov	r9, r7
 800d9e8:	463c      	mov	r4, r7
 800d9ea:	9502      	str	r5, [sp, #8]
 800d9ec:	46ab      	mov	fp, r5
 800d9ee:	784a      	ldrb	r2, [r1, #1]
 800d9f0:	1c4b      	adds	r3, r1, #1
 800d9f2:	9303      	str	r3, [sp, #12]
 800d9f4:	b342      	cbz	r2, 800da48 <__hexnan+0x88>
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	9105      	str	r1, [sp, #20]
 800d9fa:	9204      	str	r2, [sp, #16]
 800d9fc:	f7ff fd94 	bl	800d528 <__hexdig_fun>
 800da00:	2800      	cmp	r0, #0
 800da02:	d151      	bne.n	800daa8 <__hexnan+0xe8>
 800da04:	9a04      	ldr	r2, [sp, #16]
 800da06:	9905      	ldr	r1, [sp, #20]
 800da08:	2a20      	cmp	r2, #32
 800da0a:	d818      	bhi.n	800da3e <__hexnan+0x7e>
 800da0c:	9b02      	ldr	r3, [sp, #8]
 800da0e:	459b      	cmp	fp, r3
 800da10:	dd13      	ble.n	800da3a <__hexnan+0x7a>
 800da12:	454c      	cmp	r4, r9
 800da14:	d206      	bcs.n	800da24 <__hexnan+0x64>
 800da16:	2d07      	cmp	r5, #7
 800da18:	dc04      	bgt.n	800da24 <__hexnan+0x64>
 800da1a:	462a      	mov	r2, r5
 800da1c:	4649      	mov	r1, r9
 800da1e:	4620      	mov	r0, r4
 800da20:	f7ff ffa8 	bl	800d974 <L_shift>
 800da24:	4544      	cmp	r4, r8
 800da26:	d952      	bls.n	800dace <__hexnan+0x10e>
 800da28:	2300      	movs	r3, #0
 800da2a:	f1a4 0904 	sub.w	r9, r4, #4
 800da2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da32:	f8cd b008 	str.w	fp, [sp, #8]
 800da36:	464c      	mov	r4, r9
 800da38:	461d      	mov	r5, r3
 800da3a:	9903      	ldr	r1, [sp, #12]
 800da3c:	e7d7      	b.n	800d9ee <__hexnan+0x2e>
 800da3e:	2a29      	cmp	r2, #41	@ 0x29
 800da40:	d157      	bne.n	800daf2 <__hexnan+0x132>
 800da42:	3102      	adds	r1, #2
 800da44:	f8ca 1000 	str.w	r1, [sl]
 800da48:	f1bb 0f00 	cmp.w	fp, #0
 800da4c:	d051      	beq.n	800daf2 <__hexnan+0x132>
 800da4e:	454c      	cmp	r4, r9
 800da50:	d206      	bcs.n	800da60 <__hexnan+0xa0>
 800da52:	2d07      	cmp	r5, #7
 800da54:	dc04      	bgt.n	800da60 <__hexnan+0xa0>
 800da56:	462a      	mov	r2, r5
 800da58:	4649      	mov	r1, r9
 800da5a:	4620      	mov	r0, r4
 800da5c:	f7ff ff8a 	bl	800d974 <L_shift>
 800da60:	4544      	cmp	r4, r8
 800da62:	d936      	bls.n	800dad2 <__hexnan+0x112>
 800da64:	f1a8 0204 	sub.w	r2, r8, #4
 800da68:	4623      	mov	r3, r4
 800da6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800da6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800da72:	429f      	cmp	r7, r3
 800da74:	d2f9      	bcs.n	800da6a <__hexnan+0xaa>
 800da76:	1b3b      	subs	r3, r7, r4
 800da78:	f023 0303 	bic.w	r3, r3, #3
 800da7c:	3304      	adds	r3, #4
 800da7e:	3401      	adds	r4, #1
 800da80:	3e03      	subs	r6, #3
 800da82:	42b4      	cmp	r4, r6
 800da84:	bf88      	it	hi
 800da86:	2304      	movhi	r3, #4
 800da88:	4443      	add	r3, r8
 800da8a:	2200      	movs	r2, #0
 800da8c:	f843 2b04 	str.w	r2, [r3], #4
 800da90:	429f      	cmp	r7, r3
 800da92:	d2fb      	bcs.n	800da8c <__hexnan+0xcc>
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	b91b      	cbnz	r3, 800daa0 <__hexnan+0xe0>
 800da98:	4547      	cmp	r7, r8
 800da9a:	d128      	bne.n	800daee <__hexnan+0x12e>
 800da9c:	2301      	movs	r3, #1
 800da9e:	603b      	str	r3, [r7, #0]
 800daa0:	2005      	movs	r0, #5
 800daa2:	b007      	add	sp, #28
 800daa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa8:	3501      	adds	r5, #1
 800daaa:	2d08      	cmp	r5, #8
 800daac:	f10b 0b01 	add.w	fp, fp, #1
 800dab0:	dd06      	ble.n	800dac0 <__hexnan+0x100>
 800dab2:	4544      	cmp	r4, r8
 800dab4:	d9c1      	bls.n	800da3a <__hexnan+0x7a>
 800dab6:	2300      	movs	r3, #0
 800dab8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dabc:	2501      	movs	r5, #1
 800dabe:	3c04      	subs	r4, #4
 800dac0:	6822      	ldr	r2, [r4, #0]
 800dac2:	f000 000f 	and.w	r0, r0, #15
 800dac6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800daca:	6020      	str	r0, [r4, #0]
 800dacc:	e7b5      	b.n	800da3a <__hexnan+0x7a>
 800dace:	2508      	movs	r5, #8
 800dad0:	e7b3      	b.n	800da3a <__hexnan+0x7a>
 800dad2:	9b01      	ldr	r3, [sp, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d0dd      	beq.n	800da94 <__hexnan+0xd4>
 800dad8:	f1c3 0320 	rsb	r3, r3, #32
 800dadc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dae0:	40da      	lsrs	r2, r3
 800dae2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dae6:	4013      	ands	r3, r2
 800dae8:	f846 3c04 	str.w	r3, [r6, #-4]
 800daec:	e7d2      	b.n	800da94 <__hexnan+0xd4>
 800daee:	3f04      	subs	r7, #4
 800daf0:	e7d0      	b.n	800da94 <__hexnan+0xd4>
 800daf2:	2004      	movs	r0, #4
 800daf4:	e7d5      	b.n	800daa2 <__hexnan+0xe2>

0800daf6 <__ssputs_r>:
 800daf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dafa:	688e      	ldr	r6, [r1, #8]
 800dafc:	461f      	mov	r7, r3
 800dafe:	42be      	cmp	r6, r7
 800db00:	680b      	ldr	r3, [r1, #0]
 800db02:	4682      	mov	sl, r0
 800db04:	460c      	mov	r4, r1
 800db06:	4690      	mov	r8, r2
 800db08:	d82d      	bhi.n	800db66 <__ssputs_r+0x70>
 800db0a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db0e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db12:	d026      	beq.n	800db62 <__ssputs_r+0x6c>
 800db14:	6965      	ldr	r5, [r4, #20]
 800db16:	6909      	ldr	r1, [r1, #16]
 800db18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db1c:	eba3 0901 	sub.w	r9, r3, r1
 800db20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db24:	1c7b      	adds	r3, r7, #1
 800db26:	444b      	add	r3, r9
 800db28:	106d      	asrs	r5, r5, #1
 800db2a:	429d      	cmp	r5, r3
 800db2c:	bf38      	it	cc
 800db2e:	461d      	movcc	r5, r3
 800db30:	0553      	lsls	r3, r2, #21
 800db32:	d527      	bpl.n	800db84 <__ssputs_r+0x8e>
 800db34:	4629      	mov	r1, r5
 800db36:	f7fd f98d 	bl	800ae54 <_malloc_r>
 800db3a:	4606      	mov	r6, r0
 800db3c:	b360      	cbz	r0, 800db98 <__ssputs_r+0xa2>
 800db3e:	6921      	ldr	r1, [r4, #16]
 800db40:	464a      	mov	r2, r9
 800db42:	f7fe fde8 	bl	800c716 <memcpy>
 800db46:	89a3      	ldrh	r3, [r4, #12]
 800db48:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db50:	81a3      	strh	r3, [r4, #12]
 800db52:	6126      	str	r6, [r4, #16]
 800db54:	6165      	str	r5, [r4, #20]
 800db56:	444e      	add	r6, r9
 800db58:	eba5 0509 	sub.w	r5, r5, r9
 800db5c:	6026      	str	r6, [r4, #0]
 800db5e:	60a5      	str	r5, [r4, #8]
 800db60:	463e      	mov	r6, r7
 800db62:	42be      	cmp	r6, r7
 800db64:	d900      	bls.n	800db68 <__ssputs_r+0x72>
 800db66:	463e      	mov	r6, r7
 800db68:	6820      	ldr	r0, [r4, #0]
 800db6a:	4632      	mov	r2, r6
 800db6c:	4641      	mov	r1, r8
 800db6e:	f001 f940 	bl	800edf2 <memmove>
 800db72:	68a3      	ldr	r3, [r4, #8]
 800db74:	1b9b      	subs	r3, r3, r6
 800db76:	60a3      	str	r3, [r4, #8]
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	4433      	add	r3, r6
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	2000      	movs	r0, #0
 800db80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db84:	462a      	mov	r2, r5
 800db86:	f001 f802 	bl	800eb8e <_realloc_r>
 800db8a:	4606      	mov	r6, r0
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d1e0      	bne.n	800db52 <__ssputs_r+0x5c>
 800db90:	6921      	ldr	r1, [r4, #16]
 800db92:	4650      	mov	r0, sl
 800db94:	f7ff fc2c 	bl	800d3f0 <_free_r>
 800db98:	230c      	movs	r3, #12
 800db9a:	f8ca 3000 	str.w	r3, [sl]
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbaa:	e7e9      	b.n	800db80 <__ssputs_r+0x8a>

0800dbac <_svfiprintf_r>:
 800dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	4698      	mov	r8, r3
 800dbb2:	898b      	ldrh	r3, [r1, #12]
 800dbb4:	061b      	lsls	r3, r3, #24
 800dbb6:	b09d      	sub	sp, #116	@ 0x74
 800dbb8:	4607      	mov	r7, r0
 800dbba:	460d      	mov	r5, r1
 800dbbc:	4614      	mov	r4, r2
 800dbbe:	d510      	bpl.n	800dbe2 <_svfiprintf_r+0x36>
 800dbc0:	690b      	ldr	r3, [r1, #16]
 800dbc2:	b973      	cbnz	r3, 800dbe2 <_svfiprintf_r+0x36>
 800dbc4:	2140      	movs	r1, #64	@ 0x40
 800dbc6:	f7fd f945 	bl	800ae54 <_malloc_r>
 800dbca:	6028      	str	r0, [r5, #0]
 800dbcc:	6128      	str	r0, [r5, #16]
 800dbce:	b930      	cbnz	r0, 800dbde <_svfiprintf_r+0x32>
 800dbd0:	230c      	movs	r3, #12
 800dbd2:	603b      	str	r3, [r7, #0]
 800dbd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbd8:	b01d      	add	sp, #116	@ 0x74
 800dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbde:	2340      	movs	r3, #64	@ 0x40
 800dbe0:	616b      	str	r3, [r5, #20]
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbe6:	2320      	movs	r3, #32
 800dbe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbec:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbf0:	2330      	movs	r3, #48	@ 0x30
 800dbf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd90 <_svfiprintf_r+0x1e4>
 800dbf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbfa:	f04f 0901 	mov.w	r9, #1
 800dbfe:	4623      	mov	r3, r4
 800dc00:	469a      	mov	sl, r3
 800dc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc06:	b10a      	cbz	r2, 800dc0c <_svfiprintf_r+0x60>
 800dc08:	2a25      	cmp	r2, #37	@ 0x25
 800dc0a:	d1f9      	bne.n	800dc00 <_svfiprintf_r+0x54>
 800dc0c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc10:	d00b      	beq.n	800dc2a <_svfiprintf_r+0x7e>
 800dc12:	465b      	mov	r3, fp
 800dc14:	4622      	mov	r2, r4
 800dc16:	4629      	mov	r1, r5
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7ff ff6c 	bl	800daf6 <__ssputs_r>
 800dc1e:	3001      	adds	r0, #1
 800dc20:	f000 80a7 	beq.w	800dd72 <_svfiprintf_r+0x1c6>
 800dc24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc26:	445a      	add	r2, fp
 800dc28:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 809f 	beq.w	800dd72 <_svfiprintf_r+0x1c6>
 800dc34:	2300      	movs	r3, #0
 800dc36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc3e:	f10a 0a01 	add.w	sl, sl, #1
 800dc42:	9304      	str	r3, [sp, #16]
 800dc44:	9307      	str	r3, [sp, #28]
 800dc46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc4c:	4654      	mov	r4, sl
 800dc4e:	2205      	movs	r2, #5
 800dc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc54:	484e      	ldr	r0, [pc, #312]	@ (800dd90 <_svfiprintf_r+0x1e4>)
 800dc56:	f7f2 fabb 	bl	80001d0 <memchr>
 800dc5a:	9a04      	ldr	r2, [sp, #16]
 800dc5c:	b9d8      	cbnz	r0, 800dc96 <_svfiprintf_r+0xea>
 800dc5e:	06d0      	lsls	r0, r2, #27
 800dc60:	bf44      	itt	mi
 800dc62:	2320      	movmi	r3, #32
 800dc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc68:	0711      	lsls	r1, r2, #28
 800dc6a:	bf44      	itt	mi
 800dc6c:	232b      	movmi	r3, #43	@ 0x2b
 800dc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc72:	f89a 3000 	ldrb.w	r3, [sl]
 800dc76:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc78:	d015      	beq.n	800dca6 <_svfiprintf_r+0xfa>
 800dc7a:	9a07      	ldr	r2, [sp, #28]
 800dc7c:	4654      	mov	r4, sl
 800dc7e:	2000      	movs	r0, #0
 800dc80:	f04f 0c0a 	mov.w	ip, #10
 800dc84:	4621      	mov	r1, r4
 800dc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc8a:	3b30      	subs	r3, #48	@ 0x30
 800dc8c:	2b09      	cmp	r3, #9
 800dc8e:	d94b      	bls.n	800dd28 <_svfiprintf_r+0x17c>
 800dc90:	b1b0      	cbz	r0, 800dcc0 <_svfiprintf_r+0x114>
 800dc92:	9207      	str	r2, [sp, #28]
 800dc94:	e014      	b.n	800dcc0 <_svfiprintf_r+0x114>
 800dc96:	eba0 0308 	sub.w	r3, r0, r8
 800dc9a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	9304      	str	r3, [sp, #16]
 800dca2:	46a2      	mov	sl, r4
 800dca4:	e7d2      	b.n	800dc4c <_svfiprintf_r+0xa0>
 800dca6:	9b03      	ldr	r3, [sp, #12]
 800dca8:	1d19      	adds	r1, r3, #4
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	9103      	str	r1, [sp, #12]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	bfbb      	ittet	lt
 800dcb2:	425b      	neglt	r3, r3
 800dcb4:	f042 0202 	orrlt.w	r2, r2, #2
 800dcb8:	9307      	strge	r3, [sp, #28]
 800dcba:	9307      	strlt	r3, [sp, #28]
 800dcbc:	bfb8      	it	lt
 800dcbe:	9204      	strlt	r2, [sp, #16]
 800dcc0:	7823      	ldrb	r3, [r4, #0]
 800dcc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcc4:	d10a      	bne.n	800dcdc <_svfiprintf_r+0x130>
 800dcc6:	7863      	ldrb	r3, [r4, #1]
 800dcc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcca:	d132      	bne.n	800dd32 <_svfiprintf_r+0x186>
 800dccc:	9b03      	ldr	r3, [sp, #12]
 800dcce:	1d1a      	adds	r2, r3, #4
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	9203      	str	r2, [sp, #12]
 800dcd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcd8:	3402      	adds	r4, #2
 800dcda:	9305      	str	r3, [sp, #20]
 800dcdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dda0 <_svfiprintf_r+0x1f4>
 800dce0:	7821      	ldrb	r1, [r4, #0]
 800dce2:	2203      	movs	r2, #3
 800dce4:	4650      	mov	r0, sl
 800dce6:	f7f2 fa73 	bl	80001d0 <memchr>
 800dcea:	b138      	cbz	r0, 800dcfc <_svfiprintf_r+0x150>
 800dcec:	9b04      	ldr	r3, [sp, #16]
 800dcee:	eba0 000a 	sub.w	r0, r0, sl
 800dcf2:	2240      	movs	r2, #64	@ 0x40
 800dcf4:	4082      	lsls	r2, r0
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	3401      	adds	r4, #1
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd00:	4824      	ldr	r0, [pc, #144]	@ (800dd94 <_svfiprintf_r+0x1e8>)
 800dd02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd06:	2206      	movs	r2, #6
 800dd08:	f7f2 fa62 	bl	80001d0 <memchr>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d036      	beq.n	800dd7e <_svfiprintf_r+0x1d2>
 800dd10:	4b21      	ldr	r3, [pc, #132]	@ (800dd98 <_svfiprintf_r+0x1ec>)
 800dd12:	bb1b      	cbnz	r3, 800dd5c <_svfiprintf_r+0x1b0>
 800dd14:	9b03      	ldr	r3, [sp, #12]
 800dd16:	3307      	adds	r3, #7
 800dd18:	f023 0307 	bic.w	r3, r3, #7
 800dd1c:	3308      	adds	r3, #8
 800dd1e:	9303      	str	r3, [sp, #12]
 800dd20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd22:	4433      	add	r3, r6
 800dd24:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd26:	e76a      	b.n	800dbfe <_svfiprintf_r+0x52>
 800dd28:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	2001      	movs	r0, #1
 800dd30:	e7a8      	b.n	800dc84 <_svfiprintf_r+0xd8>
 800dd32:	2300      	movs	r3, #0
 800dd34:	3401      	adds	r4, #1
 800dd36:	9305      	str	r3, [sp, #20]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f04f 0c0a 	mov.w	ip, #10
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd44:	3a30      	subs	r2, #48	@ 0x30
 800dd46:	2a09      	cmp	r2, #9
 800dd48:	d903      	bls.n	800dd52 <_svfiprintf_r+0x1a6>
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d0c6      	beq.n	800dcdc <_svfiprintf_r+0x130>
 800dd4e:	9105      	str	r1, [sp, #20]
 800dd50:	e7c4      	b.n	800dcdc <_svfiprintf_r+0x130>
 800dd52:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd56:	4604      	mov	r4, r0
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e7f0      	b.n	800dd3e <_svfiprintf_r+0x192>
 800dd5c:	ab03      	add	r3, sp, #12
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	462a      	mov	r2, r5
 800dd62:	4b0e      	ldr	r3, [pc, #56]	@ (800dd9c <_svfiprintf_r+0x1f0>)
 800dd64:	a904      	add	r1, sp, #16
 800dd66:	4638      	mov	r0, r7
 800dd68:	f7fc fe18 	bl	800a99c <_printf_float>
 800dd6c:	1c42      	adds	r2, r0, #1
 800dd6e:	4606      	mov	r6, r0
 800dd70:	d1d6      	bne.n	800dd20 <_svfiprintf_r+0x174>
 800dd72:	89ab      	ldrh	r3, [r5, #12]
 800dd74:	065b      	lsls	r3, r3, #25
 800dd76:	f53f af2d 	bmi.w	800dbd4 <_svfiprintf_r+0x28>
 800dd7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd7c:	e72c      	b.n	800dbd8 <_svfiprintf_r+0x2c>
 800dd7e:	ab03      	add	r3, sp, #12
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	462a      	mov	r2, r5
 800dd84:	4b05      	ldr	r3, [pc, #20]	@ (800dd9c <_svfiprintf_r+0x1f0>)
 800dd86:	a904      	add	r1, sp, #16
 800dd88:	4638      	mov	r0, r7
 800dd8a:	f7fd f951 	bl	800b030 <_printf_i>
 800dd8e:	e7ed      	b.n	800dd6c <_svfiprintf_r+0x1c0>
 800dd90:	0800f4ae 	.word	0x0800f4ae
 800dd94:	0800f4b8 	.word	0x0800f4b8
 800dd98:	0800a99d 	.word	0x0800a99d
 800dd9c:	0800daf7 	.word	0x0800daf7
 800dda0:	0800f4b4 	.word	0x0800f4b4

0800dda4 <__sfputc_r>:
 800dda4:	6893      	ldr	r3, [r2, #8]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	b410      	push	{r4}
 800ddac:	6093      	str	r3, [r2, #8]
 800ddae:	da08      	bge.n	800ddc2 <__sfputc_r+0x1e>
 800ddb0:	6994      	ldr	r4, [r2, #24]
 800ddb2:	42a3      	cmp	r3, r4
 800ddb4:	db01      	blt.n	800ddba <__sfputc_r+0x16>
 800ddb6:	290a      	cmp	r1, #10
 800ddb8:	d103      	bne.n	800ddc2 <__sfputc_r+0x1e>
 800ddba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddbe:	f000 bf14 	b.w	800ebea <__swbuf_r>
 800ddc2:	6813      	ldr	r3, [r2, #0]
 800ddc4:	1c58      	adds	r0, r3, #1
 800ddc6:	6010      	str	r0, [r2, #0]
 800ddc8:	7019      	strb	r1, [r3, #0]
 800ddca:	4608      	mov	r0, r1
 800ddcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <__sfputs_r>:
 800ddd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	460f      	mov	r7, r1
 800ddd8:	4614      	mov	r4, r2
 800ddda:	18d5      	adds	r5, r2, r3
 800dddc:	42ac      	cmp	r4, r5
 800ddde:	d101      	bne.n	800dde4 <__sfputs_r+0x12>
 800dde0:	2000      	movs	r0, #0
 800dde2:	e007      	b.n	800ddf4 <__sfputs_r+0x22>
 800dde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde8:	463a      	mov	r2, r7
 800ddea:	4630      	mov	r0, r6
 800ddec:	f7ff ffda 	bl	800dda4 <__sfputc_r>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d1f3      	bne.n	800dddc <__sfputs_r+0xa>
 800ddf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddf8 <_vfiprintf_r>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	b09d      	sub	sp, #116	@ 0x74
 800de00:	4614      	mov	r4, r2
 800de02:	4698      	mov	r8, r3
 800de04:	4606      	mov	r6, r0
 800de06:	b118      	cbz	r0, 800de10 <_vfiprintf_r+0x18>
 800de08:	6a03      	ldr	r3, [r0, #32]
 800de0a:	b90b      	cbnz	r3, 800de10 <_vfiprintf_r+0x18>
 800de0c:	f7fd fcfc 	bl	800b808 <__sinit>
 800de10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de12:	07d9      	lsls	r1, r3, #31
 800de14:	d405      	bmi.n	800de22 <_vfiprintf_r+0x2a>
 800de16:	89ab      	ldrh	r3, [r5, #12]
 800de18:	059a      	lsls	r2, r3, #22
 800de1a:	d402      	bmi.n	800de22 <_vfiprintf_r+0x2a>
 800de1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de1e:	f7fe fc78 	bl	800c712 <__retarget_lock_acquire_recursive>
 800de22:	89ab      	ldrh	r3, [r5, #12]
 800de24:	071b      	lsls	r3, r3, #28
 800de26:	d501      	bpl.n	800de2c <_vfiprintf_r+0x34>
 800de28:	692b      	ldr	r3, [r5, #16]
 800de2a:	b99b      	cbnz	r3, 800de54 <_vfiprintf_r+0x5c>
 800de2c:	4629      	mov	r1, r5
 800de2e:	4630      	mov	r0, r6
 800de30:	f000 ff1a 	bl	800ec68 <__swsetup_r>
 800de34:	b170      	cbz	r0, 800de54 <_vfiprintf_r+0x5c>
 800de36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de38:	07dc      	lsls	r4, r3, #31
 800de3a:	d504      	bpl.n	800de46 <_vfiprintf_r+0x4e>
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de40:	b01d      	add	sp, #116	@ 0x74
 800de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de46:	89ab      	ldrh	r3, [r5, #12]
 800de48:	0598      	lsls	r0, r3, #22
 800de4a:	d4f7      	bmi.n	800de3c <_vfiprintf_r+0x44>
 800de4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de4e:	f7fe fc61 	bl	800c714 <__retarget_lock_release_recursive>
 800de52:	e7f3      	b.n	800de3c <_vfiprintf_r+0x44>
 800de54:	2300      	movs	r3, #0
 800de56:	9309      	str	r3, [sp, #36]	@ 0x24
 800de58:	2320      	movs	r3, #32
 800de5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de62:	2330      	movs	r3, #48	@ 0x30
 800de64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e014 <_vfiprintf_r+0x21c>
 800de68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de6c:	f04f 0901 	mov.w	r9, #1
 800de70:	4623      	mov	r3, r4
 800de72:	469a      	mov	sl, r3
 800de74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de78:	b10a      	cbz	r2, 800de7e <_vfiprintf_r+0x86>
 800de7a:	2a25      	cmp	r2, #37	@ 0x25
 800de7c:	d1f9      	bne.n	800de72 <_vfiprintf_r+0x7a>
 800de7e:	ebba 0b04 	subs.w	fp, sl, r4
 800de82:	d00b      	beq.n	800de9c <_vfiprintf_r+0xa4>
 800de84:	465b      	mov	r3, fp
 800de86:	4622      	mov	r2, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	4630      	mov	r0, r6
 800de8c:	f7ff ffa1 	bl	800ddd2 <__sfputs_r>
 800de90:	3001      	adds	r0, #1
 800de92:	f000 80a7 	beq.w	800dfe4 <_vfiprintf_r+0x1ec>
 800de96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de98:	445a      	add	r2, fp
 800de9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800de9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 809f 	beq.w	800dfe4 <_vfiprintf_r+0x1ec>
 800dea6:	2300      	movs	r3, #0
 800dea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800deac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deb0:	f10a 0a01 	add.w	sl, sl, #1
 800deb4:	9304      	str	r3, [sp, #16]
 800deb6:	9307      	str	r3, [sp, #28]
 800deb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800debc:	931a      	str	r3, [sp, #104]	@ 0x68
 800debe:	4654      	mov	r4, sl
 800dec0:	2205      	movs	r2, #5
 800dec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec6:	4853      	ldr	r0, [pc, #332]	@ (800e014 <_vfiprintf_r+0x21c>)
 800dec8:	f7f2 f982 	bl	80001d0 <memchr>
 800decc:	9a04      	ldr	r2, [sp, #16]
 800dece:	b9d8      	cbnz	r0, 800df08 <_vfiprintf_r+0x110>
 800ded0:	06d1      	lsls	r1, r2, #27
 800ded2:	bf44      	itt	mi
 800ded4:	2320      	movmi	r3, #32
 800ded6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800deda:	0713      	lsls	r3, r2, #28
 800dedc:	bf44      	itt	mi
 800dede:	232b      	movmi	r3, #43	@ 0x2b
 800dee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dee4:	f89a 3000 	ldrb.w	r3, [sl]
 800dee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800deea:	d015      	beq.n	800df18 <_vfiprintf_r+0x120>
 800deec:	9a07      	ldr	r2, [sp, #28]
 800deee:	4654      	mov	r4, sl
 800def0:	2000      	movs	r0, #0
 800def2:	f04f 0c0a 	mov.w	ip, #10
 800def6:	4621      	mov	r1, r4
 800def8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800defc:	3b30      	subs	r3, #48	@ 0x30
 800defe:	2b09      	cmp	r3, #9
 800df00:	d94b      	bls.n	800df9a <_vfiprintf_r+0x1a2>
 800df02:	b1b0      	cbz	r0, 800df32 <_vfiprintf_r+0x13a>
 800df04:	9207      	str	r2, [sp, #28]
 800df06:	e014      	b.n	800df32 <_vfiprintf_r+0x13a>
 800df08:	eba0 0308 	sub.w	r3, r0, r8
 800df0c:	fa09 f303 	lsl.w	r3, r9, r3
 800df10:	4313      	orrs	r3, r2
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	46a2      	mov	sl, r4
 800df16:	e7d2      	b.n	800debe <_vfiprintf_r+0xc6>
 800df18:	9b03      	ldr	r3, [sp, #12]
 800df1a:	1d19      	adds	r1, r3, #4
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	9103      	str	r1, [sp, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	bfbb      	ittet	lt
 800df24:	425b      	neglt	r3, r3
 800df26:	f042 0202 	orrlt.w	r2, r2, #2
 800df2a:	9307      	strge	r3, [sp, #28]
 800df2c:	9307      	strlt	r3, [sp, #28]
 800df2e:	bfb8      	it	lt
 800df30:	9204      	strlt	r2, [sp, #16]
 800df32:	7823      	ldrb	r3, [r4, #0]
 800df34:	2b2e      	cmp	r3, #46	@ 0x2e
 800df36:	d10a      	bne.n	800df4e <_vfiprintf_r+0x156>
 800df38:	7863      	ldrb	r3, [r4, #1]
 800df3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800df3c:	d132      	bne.n	800dfa4 <_vfiprintf_r+0x1ac>
 800df3e:	9b03      	ldr	r3, [sp, #12]
 800df40:	1d1a      	adds	r2, r3, #4
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	9203      	str	r2, [sp, #12]
 800df46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df4a:	3402      	adds	r4, #2
 800df4c:	9305      	str	r3, [sp, #20]
 800df4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e024 <_vfiprintf_r+0x22c>
 800df52:	7821      	ldrb	r1, [r4, #0]
 800df54:	2203      	movs	r2, #3
 800df56:	4650      	mov	r0, sl
 800df58:	f7f2 f93a 	bl	80001d0 <memchr>
 800df5c:	b138      	cbz	r0, 800df6e <_vfiprintf_r+0x176>
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	eba0 000a 	sub.w	r0, r0, sl
 800df64:	2240      	movs	r2, #64	@ 0x40
 800df66:	4082      	lsls	r2, r0
 800df68:	4313      	orrs	r3, r2
 800df6a:	3401      	adds	r4, #1
 800df6c:	9304      	str	r3, [sp, #16]
 800df6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df72:	4829      	ldr	r0, [pc, #164]	@ (800e018 <_vfiprintf_r+0x220>)
 800df74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df78:	2206      	movs	r2, #6
 800df7a:	f7f2 f929 	bl	80001d0 <memchr>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d03f      	beq.n	800e002 <_vfiprintf_r+0x20a>
 800df82:	4b26      	ldr	r3, [pc, #152]	@ (800e01c <_vfiprintf_r+0x224>)
 800df84:	bb1b      	cbnz	r3, 800dfce <_vfiprintf_r+0x1d6>
 800df86:	9b03      	ldr	r3, [sp, #12]
 800df88:	3307      	adds	r3, #7
 800df8a:	f023 0307 	bic.w	r3, r3, #7
 800df8e:	3308      	adds	r3, #8
 800df90:	9303      	str	r3, [sp, #12]
 800df92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df94:	443b      	add	r3, r7
 800df96:	9309      	str	r3, [sp, #36]	@ 0x24
 800df98:	e76a      	b.n	800de70 <_vfiprintf_r+0x78>
 800df9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800df9e:	460c      	mov	r4, r1
 800dfa0:	2001      	movs	r0, #1
 800dfa2:	e7a8      	b.n	800def6 <_vfiprintf_r+0xfe>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	3401      	adds	r4, #1
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	f04f 0c0a 	mov.w	ip, #10
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfb6:	3a30      	subs	r2, #48	@ 0x30
 800dfb8:	2a09      	cmp	r2, #9
 800dfba:	d903      	bls.n	800dfc4 <_vfiprintf_r+0x1cc>
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0c6      	beq.n	800df4e <_vfiprintf_r+0x156>
 800dfc0:	9105      	str	r1, [sp, #20]
 800dfc2:	e7c4      	b.n	800df4e <_vfiprintf_r+0x156>
 800dfc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfc8:	4604      	mov	r4, r0
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e7f0      	b.n	800dfb0 <_vfiprintf_r+0x1b8>
 800dfce:	ab03      	add	r3, sp, #12
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	462a      	mov	r2, r5
 800dfd4:	4b12      	ldr	r3, [pc, #72]	@ (800e020 <_vfiprintf_r+0x228>)
 800dfd6:	a904      	add	r1, sp, #16
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f7fc fcdf 	bl	800a99c <_printf_float>
 800dfde:	4607      	mov	r7, r0
 800dfe0:	1c78      	adds	r0, r7, #1
 800dfe2:	d1d6      	bne.n	800df92 <_vfiprintf_r+0x19a>
 800dfe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfe6:	07d9      	lsls	r1, r3, #31
 800dfe8:	d405      	bmi.n	800dff6 <_vfiprintf_r+0x1fe>
 800dfea:	89ab      	ldrh	r3, [r5, #12]
 800dfec:	059a      	lsls	r2, r3, #22
 800dfee:	d402      	bmi.n	800dff6 <_vfiprintf_r+0x1fe>
 800dff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dff2:	f7fe fb8f 	bl	800c714 <__retarget_lock_release_recursive>
 800dff6:	89ab      	ldrh	r3, [r5, #12]
 800dff8:	065b      	lsls	r3, r3, #25
 800dffa:	f53f af1f 	bmi.w	800de3c <_vfiprintf_r+0x44>
 800dffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e000:	e71e      	b.n	800de40 <_vfiprintf_r+0x48>
 800e002:	ab03      	add	r3, sp, #12
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	462a      	mov	r2, r5
 800e008:	4b05      	ldr	r3, [pc, #20]	@ (800e020 <_vfiprintf_r+0x228>)
 800e00a:	a904      	add	r1, sp, #16
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7fd f80f 	bl	800b030 <_printf_i>
 800e012:	e7e4      	b.n	800dfde <_vfiprintf_r+0x1e6>
 800e014:	0800f4ae 	.word	0x0800f4ae
 800e018:	0800f4b8 	.word	0x0800f4b8
 800e01c:	0800a99d 	.word	0x0800a99d
 800e020:	0800ddd3 	.word	0x0800ddd3
 800e024:	0800f4b4 	.word	0x0800f4b4

0800e028 <__ascii_mbtowc>:
 800e028:	b082      	sub	sp, #8
 800e02a:	b901      	cbnz	r1, 800e02e <__ascii_mbtowc+0x6>
 800e02c:	a901      	add	r1, sp, #4
 800e02e:	b142      	cbz	r2, 800e042 <__ascii_mbtowc+0x1a>
 800e030:	b14b      	cbz	r3, 800e046 <__ascii_mbtowc+0x1e>
 800e032:	7813      	ldrb	r3, [r2, #0]
 800e034:	600b      	str	r3, [r1, #0]
 800e036:	7812      	ldrb	r2, [r2, #0]
 800e038:	1e10      	subs	r0, r2, #0
 800e03a:	bf18      	it	ne
 800e03c:	2001      	movne	r0, #1
 800e03e:	b002      	add	sp, #8
 800e040:	4770      	bx	lr
 800e042:	4610      	mov	r0, r2
 800e044:	e7fb      	b.n	800e03e <__ascii_mbtowc+0x16>
 800e046:	f06f 0001 	mvn.w	r0, #1
 800e04a:	e7f8      	b.n	800e03e <__ascii_mbtowc+0x16>

0800e04c <__sflush_r>:
 800e04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	0716      	lsls	r6, r2, #28
 800e056:	4605      	mov	r5, r0
 800e058:	460c      	mov	r4, r1
 800e05a:	d454      	bmi.n	800e106 <__sflush_r+0xba>
 800e05c:	684b      	ldr	r3, [r1, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	dc02      	bgt.n	800e068 <__sflush_r+0x1c>
 800e062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e064:	2b00      	cmp	r3, #0
 800e066:	dd48      	ble.n	800e0fa <__sflush_r+0xae>
 800e068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e06a:	2e00      	cmp	r6, #0
 800e06c:	d045      	beq.n	800e0fa <__sflush_r+0xae>
 800e06e:	2300      	movs	r3, #0
 800e070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e074:	682f      	ldr	r7, [r5, #0]
 800e076:	6a21      	ldr	r1, [r4, #32]
 800e078:	602b      	str	r3, [r5, #0]
 800e07a:	d030      	beq.n	800e0de <__sflush_r+0x92>
 800e07c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	0759      	lsls	r1, r3, #29
 800e082:	d505      	bpl.n	800e090 <__sflush_r+0x44>
 800e084:	6863      	ldr	r3, [r4, #4]
 800e086:	1ad2      	subs	r2, r2, r3
 800e088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e08a:	b10b      	cbz	r3, 800e090 <__sflush_r+0x44>
 800e08c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e08e:	1ad2      	subs	r2, r2, r3
 800e090:	2300      	movs	r3, #0
 800e092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e094:	6a21      	ldr	r1, [r4, #32]
 800e096:	4628      	mov	r0, r5
 800e098:	47b0      	blx	r6
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	d106      	bne.n	800e0ae <__sflush_r+0x62>
 800e0a0:	6829      	ldr	r1, [r5, #0]
 800e0a2:	291d      	cmp	r1, #29
 800e0a4:	d82b      	bhi.n	800e0fe <__sflush_r+0xb2>
 800e0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800e150 <__sflush_r+0x104>)
 800e0a8:	410a      	asrs	r2, r1
 800e0aa:	07d6      	lsls	r6, r2, #31
 800e0ac:	d427      	bmi.n	800e0fe <__sflush_r+0xb2>
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	6062      	str	r2, [r4, #4]
 800e0b2:	04d9      	lsls	r1, r3, #19
 800e0b4:	6922      	ldr	r2, [r4, #16]
 800e0b6:	6022      	str	r2, [r4, #0]
 800e0b8:	d504      	bpl.n	800e0c4 <__sflush_r+0x78>
 800e0ba:	1c42      	adds	r2, r0, #1
 800e0bc:	d101      	bne.n	800e0c2 <__sflush_r+0x76>
 800e0be:	682b      	ldr	r3, [r5, #0]
 800e0c0:	b903      	cbnz	r3, 800e0c4 <__sflush_r+0x78>
 800e0c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0c6:	602f      	str	r7, [r5, #0]
 800e0c8:	b1b9      	cbz	r1, 800e0fa <__sflush_r+0xae>
 800e0ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0ce:	4299      	cmp	r1, r3
 800e0d0:	d002      	beq.n	800e0d8 <__sflush_r+0x8c>
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f7ff f98c 	bl	800d3f0 <_free_r>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0dc:	e00d      	b.n	800e0fa <__sflush_r+0xae>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	47b0      	blx	r6
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	1c50      	adds	r0, r2, #1
 800e0e8:	d1c9      	bne.n	800e07e <__sflush_r+0x32>
 800e0ea:	682b      	ldr	r3, [r5, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d0c6      	beq.n	800e07e <__sflush_r+0x32>
 800e0f0:	2b1d      	cmp	r3, #29
 800e0f2:	d001      	beq.n	800e0f8 <__sflush_r+0xac>
 800e0f4:	2b16      	cmp	r3, #22
 800e0f6:	d11e      	bne.n	800e136 <__sflush_r+0xea>
 800e0f8:	602f      	str	r7, [r5, #0]
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	e022      	b.n	800e144 <__sflush_r+0xf8>
 800e0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e102:	b21b      	sxth	r3, r3
 800e104:	e01b      	b.n	800e13e <__sflush_r+0xf2>
 800e106:	690f      	ldr	r7, [r1, #16]
 800e108:	2f00      	cmp	r7, #0
 800e10a:	d0f6      	beq.n	800e0fa <__sflush_r+0xae>
 800e10c:	0793      	lsls	r3, r2, #30
 800e10e:	680e      	ldr	r6, [r1, #0]
 800e110:	bf08      	it	eq
 800e112:	694b      	ldreq	r3, [r1, #20]
 800e114:	600f      	str	r7, [r1, #0]
 800e116:	bf18      	it	ne
 800e118:	2300      	movne	r3, #0
 800e11a:	eba6 0807 	sub.w	r8, r6, r7
 800e11e:	608b      	str	r3, [r1, #8]
 800e120:	f1b8 0f00 	cmp.w	r8, #0
 800e124:	dde9      	ble.n	800e0fa <__sflush_r+0xae>
 800e126:	6a21      	ldr	r1, [r4, #32]
 800e128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e12a:	4643      	mov	r3, r8
 800e12c:	463a      	mov	r2, r7
 800e12e:	4628      	mov	r0, r5
 800e130:	47b0      	blx	r6
 800e132:	2800      	cmp	r0, #0
 800e134:	dc08      	bgt.n	800e148 <__sflush_r+0xfc>
 800e136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e13e:	81a3      	strh	r3, [r4, #12]
 800e140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e148:	4407      	add	r7, r0
 800e14a:	eba8 0800 	sub.w	r8, r8, r0
 800e14e:	e7e7      	b.n	800e120 <__sflush_r+0xd4>
 800e150:	dfbffffe 	.word	0xdfbffffe

0800e154 <_fflush_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	690b      	ldr	r3, [r1, #16]
 800e158:	4605      	mov	r5, r0
 800e15a:	460c      	mov	r4, r1
 800e15c:	b913      	cbnz	r3, 800e164 <_fflush_r+0x10>
 800e15e:	2500      	movs	r5, #0
 800e160:	4628      	mov	r0, r5
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	b118      	cbz	r0, 800e16e <_fflush_r+0x1a>
 800e166:	6a03      	ldr	r3, [r0, #32]
 800e168:	b90b      	cbnz	r3, 800e16e <_fflush_r+0x1a>
 800e16a:	f7fd fb4d 	bl	800b808 <__sinit>
 800e16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0f3      	beq.n	800e15e <_fflush_r+0xa>
 800e176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e178:	07d0      	lsls	r0, r2, #31
 800e17a:	d404      	bmi.n	800e186 <_fflush_r+0x32>
 800e17c:	0599      	lsls	r1, r3, #22
 800e17e:	d402      	bmi.n	800e186 <_fflush_r+0x32>
 800e180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e182:	f7fe fac6 	bl	800c712 <__retarget_lock_acquire_recursive>
 800e186:	4628      	mov	r0, r5
 800e188:	4621      	mov	r1, r4
 800e18a:	f7ff ff5f 	bl	800e04c <__sflush_r>
 800e18e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e190:	07da      	lsls	r2, r3, #31
 800e192:	4605      	mov	r5, r0
 800e194:	d4e4      	bmi.n	800e160 <_fflush_r+0xc>
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	059b      	lsls	r3, r3, #22
 800e19a:	d4e1      	bmi.n	800e160 <_fflush_r+0xc>
 800e19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e19e:	f7fe fab9 	bl	800c714 <__retarget_lock_release_recursive>
 800e1a2:	e7dd      	b.n	800e160 <_fflush_r+0xc>

0800e1a4 <_Balloc>:
 800e1a4:	b570      	push	{r4, r5, r6, lr}
 800e1a6:	69c6      	ldr	r6, [r0, #28]
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	b976      	cbnz	r6, 800e1cc <_Balloc+0x28>
 800e1ae:	2010      	movs	r0, #16
 800e1b0:	f7fc fe1e 	bl	800adf0 <malloc>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	61e0      	str	r0, [r4, #28]
 800e1b8:	b920      	cbnz	r0, 800e1c4 <_Balloc+0x20>
 800e1ba:	4b18      	ldr	r3, [pc, #96]	@ (800e21c <_Balloc+0x78>)
 800e1bc:	4818      	ldr	r0, [pc, #96]	@ (800e220 <_Balloc+0x7c>)
 800e1be:	216b      	movs	r1, #107	@ 0x6b
 800e1c0:	f000 fe9a 	bl	800eef8 <__assert_func>
 800e1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1c8:	6006      	str	r6, [r0, #0]
 800e1ca:	60c6      	str	r6, [r0, #12]
 800e1cc:	69e6      	ldr	r6, [r4, #28]
 800e1ce:	68f3      	ldr	r3, [r6, #12]
 800e1d0:	b183      	cbz	r3, 800e1f4 <_Balloc+0x50>
 800e1d2:	69e3      	ldr	r3, [r4, #28]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1da:	b9b8      	cbnz	r0, 800e20c <_Balloc+0x68>
 800e1dc:	2101      	movs	r1, #1
 800e1de:	fa01 f605 	lsl.w	r6, r1, r5
 800e1e2:	1d72      	adds	r2, r6, #5
 800e1e4:	0092      	lsls	r2, r2, #2
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f000 fea4 	bl	800ef34 <_calloc_r>
 800e1ec:	b160      	cbz	r0, 800e208 <_Balloc+0x64>
 800e1ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1f2:	e00e      	b.n	800e212 <_Balloc+0x6e>
 800e1f4:	2221      	movs	r2, #33	@ 0x21
 800e1f6:	2104      	movs	r1, #4
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f000 fe9b 	bl	800ef34 <_calloc_r>
 800e1fe:	69e3      	ldr	r3, [r4, #28]
 800e200:	60f0      	str	r0, [r6, #12]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e4      	bne.n	800e1d2 <_Balloc+0x2e>
 800e208:	2000      	movs	r0, #0
 800e20a:	bd70      	pop	{r4, r5, r6, pc}
 800e20c:	6802      	ldr	r2, [r0, #0]
 800e20e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e212:	2300      	movs	r3, #0
 800e214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e218:	e7f7      	b.n	800e20a <_Balloc+0x66>
 800e21a:	bf00      	nop
 800e21c:	0800f3ce 	.word	0x0800f3ce
 800e220:	0800f4bf 	.word	0x0800f4bf

0800e224 <_Bfree>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	69c6      	ldr	r6, [r0, #28]
 800e228:	4605      	mov	r5, r0
 800e22a:	460c      	mov	r4, r1
 800e22c:	b976      	cbnz	r6, 800e24c <_Bfree+0x28>
 800e22e:	2010      	movs	r0, #16
 800e230:	f7fc fdde 	bl	800adf0 <malloc>
 800e234:	4602      	mov	r2, r0
 800e236:	61e8      	str	r0, [r5, #28]
 800e238:	b920      	cbnz	r0, 800e244 <_Bfree+0x20>
 800e23a:	4b09      	ldr	r3, [pc, #36]	@ (800e260 <_Bfree+0x3c>)
 800e23c:	4809      	ldr	r0, [pc, #36]	@ (800e264 <_Bfree+0x40>)
 800e23e:	218f      	movs	r1, #143	@ 0x8f
 800e240:	f000 fe5a 	bl	800eef8 <__assert_func>
 800e244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e248:	6006      	str	r6, [r0, #0]
 800e24a:	60c6      	str	r6, [r0, #12]
 800e24c:	b13c      	cbz	r4, 800e25e <_Bfree+0x3a>
 800e24e:	69eb      	ldr	r3, [r5, #28]
 800e250:	6862      	ldr	r2, [r4, #4]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e258:	6021      	str	r1, [r4, #0]
 800e25a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	0800f3ce 	.word	0x0800f3ce
 800e264:	0800f4bf 	.word	0x0800f4bf

0800e268 <__multadd>:
 800e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26c:	690d      	ldr	r5, [r1, #16]
 800e26e:	4607      	mov	r7, r0
 800e270:	460c      	mov	r4, r1
 800e272:	461e      	mov	r6, r3
 800e274:	f101 0c14 	add.w	ip, r1, #20
 800e278:	2000      	movs	r0, #0
 800e27a:	f8dc 3000 	ldr.w	r3, [ip]
 800e27e:	b299      	uxth	r1, r3
 800e280:	fb02 6101 	mla	r1, r2, r1, r6
 800e284:	0c1e      	lsrs	r6, r3, #16
 800e286:	0c0b      	lsrs	r3, r1, #16
 800e288:	fb02 3306 	mla	r3, r2, r6, r3
 800e28c:	b289      	uxth	r1, r1
 800e28e:	3001      	adds	r0, #1
 800e290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e294:	4285      	cmp	r5, r0
 800e296:	f84c 1b04 	str.w	r1, [ip], #4
 800e29a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e29e:	dcec      	bgt.n	800e27a <__multadd+0x12>
 800e2a0:	b30e      	cbz	r6, 800e2e6 <__multadd+0x7e>
 800e2a2:	68a3      	ldr	r3, [r4, #8]
 800e2a4:	42ab      	cmp	r3, r5
 800e2a6:	dc19      	bgt.n	800e2dc <__multadd+0x74>
 800e2a8:	6861      	ldr	r1, [r4, #4]
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	3101      	adds	r1, #1
 800e2ae:	f7ff ff79 	bl	800e1a4 <_Balloc>
 800e2b2:	4680      	mov	r8, r0
 800e2b4:	b928      	cbnz	r0, 800e2c2 <__multadd+0x5a>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <__multadd+0x84>)
 800e2ba:	480d      	ldr	r0, [pc, #52]	@ (800e2f0 <__multadd+0x88>)
 800e2bc:	21ba      	movs	r1, #186	@ 0xba
 800e2be:	f000 fe1b 	bl	800eef8 <__assert_func>
 800e2c2:	6922      	ldr	r2, [r4, #16]
 800e2c4:	3202      	adds	r2, #2
 800e2c6:	f104 010c 	add.w	r1, r4, #12
 800e2ca:	0092      	lsls	r2, r2, #2
 800e2cc:	300c      	adds	r0, #12
 800e2ce:	f7fe fa22 	bl	800c716 <memcpy>
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	f7ff ffa5 	bl	800e224 <_Bfree>
 800e2da:	4644      	mov	r4, r8
 800e2dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2e0:	3501      	adds	r5, #1
 800e2e2:	615e      	str	r6, [r3, #20]
 800e2e4:	6125      	str	r5, [r4, #16]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ec:	0800f43d 	.word	0x0800f43d
 800e2f0:	0800f4bf 	.word	0x0800f4bf

0800e2f4 <__s2b>:
 800e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f8:	460c      	mov	r4, r1
 800e2fa:	4615      	mov	r5, r2
 800e2fc:	461f      	mov	r7, r3
 800e2fe:	2209      	movs	r2, #9
 800e300:	3308      	adds	r3, #8
 800e302:	4606      	mov	r6, r0
 800e304:	fb93 f3f2 	sdiv	r3, r3, r2
 800e308:	2100      	movs	r1, #0
 800e30a:	2201      	movs	r2, #1
 800e30c:	429a      	cmp	r2, r3
 800e30e:	db09      	blt.n	800e324 <__s2b+0x30>
 800e310:	4630      	mov	r0, r6
 800e312:	f7ff ff47 	bl	800e1a4 <_Balloc>
 800e316:	b940      	cbnz	r0, 800e32a <__s2b+0x36>
 800e318:	4602      	mov	r2, r0
 800e31a:	4b19      	ldr	r3, [pc, #100]	@ (800e380 <__s2b+0x8c>)
 800e31c:	4819      	ldr	r0, [pc, #100]	@ (800e384 <__s2b+0x90>)
 800e31e:	21d3      	movs	r1, #211	@ 0xd3
 800e320:	f000 fdea 	bl	800eef8 <__assert_func>
 800e324:	0052      	lsls	r2, r2, #1
 800e326:	3101      	adds	r1, #1
 800e328:	e7f0      	b.n	800e30c <__s2b+0x18>
 800e32a:	9b08      	ldr	r3, [sp, #32]
 800e32c:	6143      	str	r3, [r0, #20]
 800e32e:	2d09      	cmp	r5, #9
 800e330:	f04f 0301 	mov.w	r3, #1
 800e334:	6103      	str	r3, [r0, #16]
 800e336:	dd16      	ble.n	800e366 <__s2b+0x72>
 800e338:	f104 0909 	add.w	r9, r4, #9
 800e33c:	46c8      	mov	r8, r9
 800e33e:	442c      	add	r4, r5
 800e340:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e344:	4601      	mov	r1, r0
 800e346:	3b30      	subs	r3, #48	@ 0x30
 800e348:	220a      	movs	r2, #10
 800e34a:	4630      	mov	r0, r6
 800e34c:	f7ff ff8c 	bl	800e268 <__multadd>
 800e350:	45a0      	cmp	r8, r4
 800e352:	d1f5      	bne.n	800e340 <__s2b+0x4c>
 800e354:	f1a5 0408 	sub.w	r4, r5, #8
 800e358:	444c      	add	r4, r9
 800e35a:	1b2d      	subs	r5, r5, r4
 800e35c:	1963      	adds	r3, r4, r5
 800e35e:	42bb      	cmp	r3, r7
 800e360:	db04      	blt.n	800e36c <__s2b+0x78>
 800e362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e366:	340a      	adds	r4, #10
 800e368:	2509      	movs	r5, #9
 800e36a:	e7f6      	b.n	800e35a <__s2b+0x66>
 800e36c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e370:	4601      	mov	r1, r0
 800e372:	3b30      	subs	r3, #48	@ 0x30
 800e374:	220a      	movs	r2, #10
 800e376:	4630      	mov	r0, r6
 800e378:	f7ff ff76 	bl	800e268 <__multadd>
 800e37c:	e7ee      	b.n	800e35c <__s2b+0x68>
 800e37e:	bf00      	nop
 800e380:	0800f43d 	.word	0x0800f43d
 800e384:	0800f4bf 	.word	0x0800f4bf

0800e388 <__hi0bits>:
 800e388:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e38c:	4603      	mov	r3, r0
 800e38e:	bf36      	itet	cc
 800e390:	0403      	lslcc	r3, r0, #16
 800e392:	2000      	movcs	r0, #0
 800e394:	2010      	movcc	r0, #16
 800e396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e39a:	bf3c      	itt	cc
 800e39c:	021b      	lslcc	r3, r3, #8
 800e39e:	3008      	addcc	r0, #8
 800e3a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3a4:	bf3c      	itt	cc
 800e3a6:	011b      	lslcc	r3, r3, #4
 800e3a8:	3004      	addcc	r0, #4
 800e3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3ae:	bf3c      	itt	cc
 800e3b0:	009b      	lslcc	r3, r3, #2
 800e3b2:	3002      	addcc	r0, #2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	db05      	blt.n	800e3c4 <__hi0bits+0x3c>
 800e3b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e3bc:	f100 0001 	add.w	r0, r0, #1
 800e3c0:	bf08      	it	eq
 800e3c2:	2020      	moveq	r0, #32
 800e3c4:	4770      	bx	lr

0800e3c6 <__lo0bits>:
 800e3c6:	6803      	ldr	r3, [r0, #0]
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	f013 0007 	ands.w	r0, r3, #7
 800e3ce:	d00b      	beq.n	800e3e8 <__lo0bits+0x22>
 800e3d0:	07d9      	lsls	r1, r3, #31
 800e3d2:	d421      	bmi.n	800e418 <__lo0bits+0x52>
 800e3d4:	0798      	lsls	r0, r3, #30
 800e3d6:	bf49      	itett	mi
 800e3d8:	085b      	lsrmi	r3, r3, #1
 800e3da:	089b      	lsrpl	r3, r3, #2
 800e3dc:	2001      	movmi	r0, #1
 800e3de:	6013      	strmi	r3, [r2, #0]
 800e3e0:	bf5c      	itt	pl
 800e3e2:	6013      	strpl	r3, [r2, #0]
 800e3e4:	2002      	movpl	r0, #2
 800e3e6:	4770      	bx	lr
 800e3e8:	b299      	uxth	r1, r3
 800e3ea:	b909      	cbnz	r1, 800e3f0 <__lo0bits+0x2a>
 800e3ec:	0c1b      	lsrs	r3, r3, #16
 800e3ee:	2010      	movs	r0, #16
 800e3f0:	b2d9      	uxtb	r1, r3
 800e3f2:	b909      	cbnz	r1, 800e3f8 <__lo0bits+0x32>
 800e3f4:	3008      	adds	r0, #8
 800e3f6:	0a1b      	lsrs	r3, r3, #8
 800e3f8:	0719      	lsls	r1, r3, #28
 800e3fa:	bf04      	itt	eq
 800e3fc:	091b      	lsreq	r3, r3, #4
 800e3fe:	3004      	addeq	r0, #4
 800e400:	0799      	lsls	r1, r3, #30
 800e402:	bf04      	itt	eq
 800e404:	089b      	lsreq	r3, r3, #2
 800e406:	3002      	addeq	r0, #2
 800e408:	07d9      	lsls	r1, r3, #31
 800e40a:	d403      	bmi.n	800e414 <__lo0bits+0x4e>
 800e40c:	085b      	lsrs	r3, r3, #1
 800e40e:	f100 0001 	add.w	r0, r0, #1
 800e412:	d003      	beq.n	800e41c <__lo0bits+0x56>
 800e414:	6013      	str	r3, [r2, #0]
 800e416:	4770      	bx	lr
 800e418:	2000      	movs	r0, #0
 800e41a:	4770      	bx	lr
 800e41c:	2020      	movs	r0, #32
 800e41e:	4770      	bx	lr

0800e420 <__i2b>:
 800e420:	b510      	push	{r4, lr}
 800e422:	460c      	mov	r4, r1
 800e424:	2101      	movs	r1, #1
 800e426:	f7ff febd 	bl	800e1a4 <_Balloc>
 800e42a:	4602      	mov	r2, r0
 800e42c:	b928      	cbnz	r0, 800e43a <__i2b+0x1a>
 800e42e:	4b05      	ldr	r3, [pc, #20]	@ (800e444 <__i2b+0x24>)
 800e430:	4805      	ldr	r0, [pc, #20]	@ (800e448 <__i2b+0x28>)
 800e432:	f240 1145 	movw	r1, #325	@ 0x145
 800e436:	f000 fd5f 	bl	800eef8 <__assert_func>
 800e43a:	2301      	movs	r3, #1
 800e43c:	6144      	str	r4, [r0, #20]
 800e43e:	6103      	str	r3, [r0, #16]
 800e440:	bd10      	pop	{r4, pc}
 800e442:	bf00      	nop
 800e444:	0800f43d 	.word	0x0800f43d
 800e448:	0800f4bf 	.word	0x0800f4bf

0800e44c <__multiply>:
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	4614      	mov	r4, r2
 800e452:	690a      	ldr	r2, [r1, #16]
 800e454:	6923      	ldr	r3, [r4, #16]
 800e456:	429a      	cmp	r2, r3
 800e458:	bfa8      	it	ge
 800e45a:	4623      	movge	r3, r4
 800e45c:	460f      	mov	r7, r1
 800e45e:	bfa4      	itt	ge
 800e460:	460c      	movge	r4, r1
 800e462:	461f      	movge	r7, r3
 800e464:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e468:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e46c:	68a3      	ldr	r3, [r4, #8]
 800e46e:	6861      	ldr	r1, [r4, #4]
 800e470:	eb0a 0609 	add.w	r6, sl, r9
 800e474:	42b3      	cmp	r3, r6
 800e476:	b085      	sub	sp, #20
 800e478:	bfb8      	it	lt
 800e47a:	3101      	addlt	r1, #1
 800e47c:	f7ff fe92 	bl	800e1a4 <_Balloc>
 800e480:	b930      	cbnz	r0, 800e490 <__multiply+0x44>
 800e482:	4602      	mov	r2, r0
 800e484:	4b44      	ldr	r3, [pc, #272]	@ (800e598 <__multiply+0x14c>)
 800e486:	4845      	ldr	r0, [pc, #276]	@ (800e59c <__multiply+0x150>)
 800e488:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e48c:	f000 fd34 	bl	800eef8 <__assert_func>
 800e490:	f100 0514 	add.w	r5, r0, #20
 800e494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e498:	462b      	mov	r3, r5
 800e49a:	2200      	movs	r2, #0
 800e49c:	4543      	cmp	r3, r8
 800e49e:	d321      	bcc.n	800e4e4 <__multiply+0x98>
 800e4a0:	f107 0114 	add.w	r1, r7, #20
 800e4a4:	f104 0214 	add.w	r2, r4, #20
 800e4a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e4ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e4b0:	9302      	str	r3, [sp, #8]
 800e4b2:	1b13      	subs	r3, r2, r4
 800e4b4:	3b15      	subs	r3, #21
 800e4b6:	f023 0303 	bic.w	r3, r3, #3
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	f104 0715 	add.w	r7, r4, #21
 800e4c0:	42ba      	cmp	r2, r7
 800e4c2:	bf38      	it	cc
 800e4c4:	2304      	movcc	r3, #4
 800e4c6:	9301      	str	r3, [sp, #4]
 800e4c8:	9b02      	ldr	r3, [sp, #8]
 800e4ca:	9103      	str	r1, [sp, #12]
 800e4cc:	428b      	cmp	r3, r1
 800e4ce:	d80c      	bhi.n	800e4ea <__multiply+0x9e>
 800e4d0:	2e00      	cmp	r6, #0
 800e4d2:	dd03      	ble.n	800e4dc <__multiply+0x90>
 800e4d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d05b      	beq.n	800e594 <__multiply+0x148>
 800e4dc:	6106      	str	r6, [r0, #16]
 800e4de:	b005      	add	sp, #20
 800e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e4:	f843 2b04 	str.w	r2, [r3], #4
 800e4e8:	e7d8      	b.n	800e49c <__multiply+0x50>
 800e4ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800e4ee:	f1ba 0f00 	cmp.w	sl, #0
 800e4f2:	d024      	beq.n	800e53e <__multiply+0xf2>
 800e4f4:	f104 0e14 	add.w	lr, r4, #20
 800e4f8:	46a9      	mov	r9, r5
 800e4fa:	f04f 0c00 	mov.w	ip, #0
 800e4fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e502:	f8d9 3000 	ldr.w	r3, [r9]
 800e506:	fa1f fb87 	uxth.w	fp, r7
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e510:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e514:	f8d9 7000 	ldr.w	r7, [r9]
 800e518:	4463      	add	r3, ip
 800e51a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e51e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e522:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e526:	b29b      	uxth	r3, r3
 800e528:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e52c:	4572      	cmp	r2, lr
 800e52e:	f849 3b04 	str.w	r3, [r9], #4
 800e532:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e536:	d8e2      	bhi.n	800e4fe <__multiply+0xb2>
 800e538:	9b01      	ldr	r3, [sp, #4]
 800e53a:	f845 c003 	str.w	ip, [r5, r3]
 800e53e:	9b03      	ldr	r3, [sp, #12]
 800e540:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e544:	3104      	adds	r1, #4
 800e546:	f1b9 0f00 	cmp.w	r9, #0
 800e54a:	d021      	beq.n	800e590 <__multiply+0x144>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	f104 0c14 	add.w	ip, r4, #20
 800e552:	46ae      	mov	lr, r5
 800e554:	f04f 0a00 	mov.w	sl, #0
 800e558:	f8bc b000 	ldrh.w	fp, [ip]
 800e55c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e560:	fb09 770b 	mla	r7, r9, fp, r7
 800e564:	4457      	add	r7, sl
 800e566:	b29b      	uxth	r3, r3
 800e568:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e56c:	f84e 3b04 	str.w	r3, [lr], #4
 800e570:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e578:	f8be 3000 	ldrh.w	r3, [lr]
 800e57c:	fb09 330a 	mla	r3, r9, sl, r3
 800e580:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e584:	4562      	cmp	r2, ip
 800e586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e58a:	d8e5      	bhi.n	800e558 <__multiply+0x10c>
 800e58c:	9f01      	ldr	r7, [sp, #4]
 800e58e:	51eb      	str	r3, [r5, r7]
 800e590:	3504      	adds	r5, #4
 800e592:	e799      	b.n	800e4c8 <__multiply+0x7c>
 800e594:	3e01      	subs	r6, #1
 800e596:	e79b      	b.n	800e4d0 <__multiply+0x84>
 800e598:	0800f43d 	.word	0x0800f43d
 800e59c:	0800f4bf 	.word	0x0800f4bf

0800e5a0 <__pow5mult>:
 800e5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a4:	4615      	mov	r5, r2
 800e5a6:	f012 0203 	ands.w	r2, r2, #3
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	460e      	mov	r6, r1
 800e5ae:	d007      	beq.n	800e5c0 <__pow5mult+0x20>
 800e5b0:	4c25      	ldr	r4, [pc, #148]	@ (800e648 <__pow5mult+0xa8>)
 800e5b2:	3a01      	subs	r2, #1
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5ba:	f7ff fe55 	bl	800e268 <__multadd>
 800e5be:	4606      	mov	r6, r0
 800e5c0:	10ad      	asrs	r5, r5, #2
 800e5c2:	d03d      	beq.n	800e640 <__pow5mult+0xa0>
 800e5c4:	69fc      	ldr	r4, [r7, #28]
 800e5c6:	b97c      	cbnz	r4, 800e5e8 <__pow5mult+0x48>
 800e5c8:	2010      	movs	r0, #16
 800e5ca:	f7fc fc11 	bl	800adf0 <malloc>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	61f8      	str	r0, [r7, #28]
 800e5d2:	b928      	cbnz	r0, 800e5e0 <__pow5mult+0x40>
 800e5d4:	4b1d      	ldr	r3, [pc, #116]	@ (800e64c <__pow5mult+0xac>)
 800e5d6:	481e      	ldr	r0, [pc, #120]	@ (800e650 <__pow5mult+0xb0>)
 800e5d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e5dc:	f000 fc8c 	bl	800eef8 <__assert_func>
 800e5e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5e4:	6004      	str	r4, [r0, #0]
 800e5e6:	60c4      	str	r4, [r0, #12]
 800e5e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e5ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5f0:	b94c      	cbnz	r4, 800e606 <__pow5mult+0x66>
 800e5f2:	f240 2171 	movw	r1, #625	@ 0x271
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f7ff ff12 	bl	800e420 <__i2b>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800e602:	4604      	mov	r4, r0
 800e604:	6003      	str	r3, [r0, #0]
 800e606:	f04f 0900 	mov.w	r9, #0
 800e60a:	07eb      	lsls	r3, r5, #31
 800e60c:	d50a      	bpl.n	800e624 <__pow5mult+0x84>
 800e60e:	4631      	mov	r1, r6
 800e610:	4622      	mov	r2, r4
 800e612:	4638      	mov	r0, r7
 800e614:	f7ff ff1a 	bl	800e44c <__multiply>
 800e618:	4631      	mov	r1, r6
 800e61a:	4680      	mov	r8, r0
 800e61c:	4638      	mov	r0, r7
 800e61e:	f7ff fe01 	bl	800e224 <_Bfree>
 800e622:	4646      	mov	r6, r8
 800e624:	106d      	asrs	r5, r5, #1
 800e626:	d00b      	beq.n	800e640 <__pow5mult+0xa0>
 800e628:	6820      	ldr	r0, [r4, #0]
 800e62a:	b938      	cbnz	r0, 800e63c <__pow5mult+0x9c>
 800e62c:	4622      	mov	r2, r4
 800e62e:	4621      	mov	r1, r4
 800e630:	4638      	mov	r0, r7
 800e632:	f7ff ff0b 	bl	800e44c <__multiply>
 800e636:	6020      	str	r0, [r4, #0]
 800e638:	f8c0 9000 	str.w	r9, [r0]
 800e63c:	4604      	mov	r4, r0
 800e63e:	e7e4      	b.n	800e60a <__pow5mult+0x6a>
 800e640:	4630      	mov	r0, r6
 800e642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e646:	bf00      	nop
 800e648:	0800f518 	.word	0x0800f518
 800e64c:	0800f3ce 	.word	0x0800f3ce
 800e650:	0800f4bf 	.word	0x0800f4bf

0800e654 <__lshift>:
 800e654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e658:	460c      	mov	r4, r1
 800e65a:	6849      	ldr	r1, [r1, #4]
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e662:	68a3      	ldr	r3, [r4, #8]
 800e664:	4607      	mov	r7, r0
 800e666:	4691      	mov	r9, r2
 800e668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e66c:	f108 0601 	add.w	r6, r8, #1
 800e670:	42b3      	cmp	r3, r6
 800e672:	db0b      	blt.n	800e68c <__lshift+0x38>
 800e674:	4638      	mov	r0, r7
 800e676:	f7ff fd95 	bl	800e1a4 <_Balloc>
 800e67a:	4605      	mov	r5, r0
 800e67c:	b948      	cbnz	r0, 800e692 <__lshift+0x3e>
 800e67e:	4602      	mov	r2, r0
 800e680:	4b28      	ldr	r3, [pc, #160]	@ (800e724 <__lshift+0xd0>)
 800e682:	4829      	ldr	r0, [pc, #164]	@ (800e728 <__lshift+0xd4>)
 800e684:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e688:	f000 fc36 	bl	800eef8 <__assert_func>
 800e68c:	3101      	adds	r1, #1
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	e7ee      	b.n	800e670 <__lshift+0x1c>
 800e692:	2300      	movs	r3, #0
 800e694:	f100 0114 	add.w	r1, r0, #20
 800e698:	f100 0210 	add.w	r2, r0, #16
 800e69c:	4618      	mov	r0, r3
 800e69e:	4553      	cmp	r3, sl
 800e6a0:	db33      	blt.n	800e70a <__lshift+0xb6>
 800e6a2:	6920      	ldr	r0, [r4, #16]
 800e6a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6a8:	f104 0314 	add.w	r3, r4, #20
 800e6ac:	f019 091f 	ands.w	r9, r9, #31
 800e6b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6b8:	d02b      	beq.n	800e712 <__lshift+0xbe>
 800e6ba:	f1c9 0e20 	rsb	lr, r9, #32
 800e6be:	468a      	mov	sl, r1
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	6818      	ldr	r0, [r3, #0]
 800e6c4:	fa00 f009 	lsl.w	r0, r0, r9
 800e6c8:	4310      	orrs	r0, r2
 800e6ca:	f84a 0b04 	str.w	r0, [sl], #4
 800e6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6d2:	459c      	cmp	ip, r3
 800e6d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e6d8:	d8f3      	bhi.n	800e6c2 <__lshift+0x6e>
 800e6da:	ebac 0304 	sub.w	r3, ip, r4
 800e6de:	3b15      	subs	r3, #21
 800e6e0:	f023 0303 	bic.w	r3, r3, #3
 800e6e4:	3304      	adds	r3, #4
 800e6e6:	f104 0015 	add.w	r0, r4, #21
 800e6ea:	4584      	cmp	ip, r0
 800e6ec:	bf38      	it	cc
 800e6ee:	2304      	movcc	r3, #4
 800e6f0:	50ca      	str	r2, [r1, r3]
 800e6f2:	b10a      	cbz	r2, 800e6f8 <__lshift+0xa4>
 800e6f4:	f108 0602 	add.w	r6, r8, #2
 800e6f8:	3e01      	subs	r6, #1
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	612e      	str	r6, [r5, #16]
 800e6fe:	4621      	mov	r1, r4
 800e700:	f7ff fd90 	bl	800e224 <_Bfree>
 800e704:	4628      	mov	r0, r5
 800e706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e70e:	3301      	adds	r3, #1
 800e710:	e7c5      	b.n	800e69e <__lshift+0x4a>
 800e712:	3904      	subs	r1, #4
 800e714:	f853 2b04 	ldr.w	r2, [r3], #4
 800e718:	f841 2f04 	str.w	r2, [r1, #4]!
 800e71c:	459c      	cmp	ip, r3
 800e71e:	d8f9      	bhi.n	800e714 <__lshift+0xc0>
 800e720:	e7ea      	b.n	800e6f8 <__lshift+0xa4>
 800e722:	bf00      	nop
 800e724:	0800f43d 	.word	0x0800f43d
 800e728:	0800f4bf 	.word	0x0800f4bf

0800e72c <__mcmp>:
 800e72c:	690a      	ldr	r2, [r1, #16]
 800e72e:	4603      	mov	r3, r0
 800e730:	6900      	ldr	r0, [r0, #16]
 800e732:	1a80      	subs	r0, r0, r2
 800e734:	b530      	push	{r4, r5, lr}
 800e736:	d10e      	bne.n	800e756 <__mcmp+0x2a>
 800e738:	3314      	adds	r3, #20
 800e73a:	3114      	adds	r1, #20
 800e73c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e740:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e744:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e748:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e74c:	4295      	cmp	r5, r2
 800e74e:	d003      	beq.n	800e758 <__mcmp+0x2c>
 800e750:	d205      	bcs.n	800e75e <__mcmp+0x32>
 800e752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e756:	bd30      	pop	{r4, r5, pc}
 800e758:	42a3      	cmp	r3, r4
 800e75a:	d3f3      	bcc.n	800e744 <__mcmp+0x18>
 800e75c:	e7fb      	b.n	800e756 <__mcmp+0x2a>
 800e75e:	2001      	movs	r0, #1
 800e760:	e7f9      	b.n	800e756 <__mcmp+0x2a>
	...

0800e764 <__mdiff>:
 800e764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	4689      	mov	r9, r1
 800e76a:	4606      	mov	r6, r0
 800e76c:	4611      	mov	r1, r2
 800e76e:	4648      	mov	r0, r9
 800e770:	4614      	mov	r4, r2
 800e772:	f7ff ffdb 	bl	800e72c <__mcmp>
 800e776:	1e05      	subs	r5, r0, #0
 800e778:	d112      	bne.n	800e7a0 <__mdiff+0x3c>
 800e77a:	4629      	mov	r1, r5
 800e77c:	4630      	mov	r0, r6
 800e77e:	f7ff fd11 	bl	800e1a4 <_Balloc>
 800e782:	4602      	mov	r2, r0
 800e784:	b928      	cbnz	r0, 800e792 <__mdiff+0x2e>
 800e786:	4b3f      	ldr	r3, [pc, #252]	@ (800e884 <__mdiff+0x120>)
 800e788:	f240 2137 	movw	r1, #567	@ 0x237
 800e78c:	483e      	ldr	r0, [pc, #248]	@ (800e888 <__mdiff+0x124>)
 800e78e:	f000 fbb3 	bl	800eef8 <__assert_func>
 800e792:	2301      	movs	r3, #1
 800e794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e798:	4610      	mov	r0, r2
 800e79a:	b003      	add	sp, #12
 800e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a0:	bfbc      	itt	lt
 800e7a2:	464b      	movlt	r3, r9
 800e7a4:	46a1      	movlt	r9, r4
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e7ac:	bfba      	itte	lt
 800e7ae:	461c      	movlt	r4, r3
 800e7b0:	2501      	movlt	r5, #1
 800e7b2:	2500      	movge	r5, #0
 800e7b4:	f7ff fcf6 	bl	800e1a4 <_Balloc>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	b918      	cbnz	r0, 800e7c4 <__mdiff+0x60>
 800e7bc:	4b31      	ldr	r3, [pc, #196]	@ (800e884 <__mdiff+0x120>)
 800e7be:	f240 2145 	movw	r1, #581	@ 0x245
 800e7c2:	e7e3      	b.n	800e78c <__mdiff+0x28>
 800e7c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e7c8:	6926      	ldr	r6, [r4, #16]
 800e7ca:	60c5      	str	r5, [r0, #12]
 800e7cc:	f109 0310 	add.w	r3, r9, #16
 800e7d0:	f109 0514 	add.w	r5, r9, #20
 800e7d4:	f104 0e14 	add.w	lr, r4, #20
 800e7d8:	f100 0b14 	add.w	fp, r0, #20
 800e7dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e7e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e7e4:	9301      	str	r3, [sp, #4]
 800e7e6:	46d9      	mov	r9, fp
 800e7e8:	f04f 0c00 	mov.w	ip, #0
 800e7ec:	9b01      	ldr	r3, [sp, #4]
 800e7ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e7f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e7f6:	9301      	str	r3, [sp, #4]
 800e7f8:	fa1f f38a 	uxth.w	r3, sl
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	b283      	uxth	r3, r0
 800e800:	1acb      	subs	r3, r1, r3
 800e802:	0c00      	lsrs	r0, r0, #16
 800e804:	4463      	add	r3, ip
 800e806:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e80a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e80e:	b29b      	uxth	r3, r3
 800e810:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e814:	4576      	cmp	r6, lr
 800e816:	f849 3b04 	str.w	r3, [r9], #4
 800e81a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e81e:	d8e5      	bhi.n	800e7ec <__mdiff+0x88>
 800e820:	1b33      	subs	r3, r6, r4
 800e822:	3b15      	subs	r3, #21
 800e824:	f023 0303 	bic.w	r3, r3, #3
 800e828:	3415      	adds	r4, #21
 800e82a:	3304      	adds	r3, #4
 800e82c:	42a6      	cmp	r6, r4
 800e82e:	bf38      	it	cc
 800e830:	2304      	movcc	r3, #4
 800e832:	441d      	add	r5, r3
 800e834:	445b      	add	r3, fp
 800e836:	461e      	mov	r6, r3
 800e838:	462c      	mov	r4, r5
 800e83a:	4544      	cmp	r4, r8
 800e83c:	d30e      	bcc.n	800e85c <__mdiff+0xf8>
 800e83e:	f108 0103 	add.w	r1, r8, #3
 800e842:	1b49      	subs	r1, r1, r5
 800e844:	f021 0103 	bic.w	r1, r1, #3
 800e848:	3d03      	subs	r5, #3
 800e84a:	45a8      	cmp	r8, r5
 800e84c:	bf38      	it	cc
 800e84e:	2100      	movcc	r1, #0
 800e850:	440b      	add	r3, r1
 800e852:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e856:	b191      	cbz	r1, 800e87e <__mdiff+0x11a>
 800e858:	6117      	str	r7, [r2, #16]
 800e85a:	e79d      	b.n	800e798 <__mdiff+0x34>
 800e85c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e860:	46e6      	mov	lr, ip
 800e862:	0c08      	lsrs	r0, r1, #16
 800e864:	fa1c fc81 	uxtah	ip, ip, r1
 800e868:	4471      	add	r1, lr
 800e86a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e86e:	b289      	uxth	r1, r1
 800e870:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e874:	f846 1b04 	str.w	r1, [r6], #4
 800e878:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e87c:	e7dd      	b.n	800e83a <__mdiff+0xd6>
 800e87e:	3f01      	subs	r7, #1
 800e880:	e7e7      	b.n	800e852 <__mdiff+0xee>
 800e882:	bf00      	nop
 800e884:	0800f43d 	.word	0x0800f43d
 800e888:	0800f4bf 	.word	0x0800f4bf

0800e88c <__ulp>:
 800e88c:	b082      	sub	sp, #8
 800e88e:	ed8d 0b00 	vstr	d0, [sp]
 800e892:	9a01      	ldr	r2, [sp, #4]
 800e894:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d4 <__ulp+0x48>)
 800e896:	4013      	ands	r3, r2
 800e898:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dc08      	bgt.n	800e8b2 <__ulp+0x26>
 800e8a0:	425b      	negs	r3, r3
 800e8a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e8a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e8aa:	da04      	bge.n	800e8b6 <__ulp+0x2a>
 800e8ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e8b0:	4113      	asrs	r3, r2
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	e008      	b.n	800e8c8 <__ulp+0x3c>
 800e8b6:	f1a2 0314 	sub.w	r3, r2, #20
 800e8ba:	2b1e      	cmp	r3, #30
 800e8bc:	bfda      	itte	le
 800e8be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e8c2:	40da      	lsrle	r2, r3
 800e8c4:	2201      	movgt	r2, #1
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	ec41 0b10 	vmov	d0, r0, r1
 800e8d0:	b002      	add	sp, #8
 800e8d2:	4770      	bx	lr
 800e8d4:	7ff00000 	.word	0x7ff00000

0800e8d8 <__b2d>:
 800e8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8dc:	6906      	ldr	r6, [r0, #16]
 800e8de:	f100 0814 	add.w	r8, r0, #20
 800e8e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e8e6:	1f37      	subs	r7, r6, #4
 800e8e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e8ec:	4610      	mov	r0, r2
 800e8ee:	f7ff fd4b 	bl	800e388 <__hi0bits>
 800e8f2:	f1c0 0320 	rsb	r3, r0, #32
 800e8f6:	280a      	cmp	r0, #10
 800e8f8:	600b      	str	r3, [r1, #0]
 800e8fa:	491b      	ldr	r1, [pc, #108]	@ (800e968 <__b2d+0x90>)
 800e8fc:	dc15      	bgt.n	800e92a <__b2d+0x52>
 800e8fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800e902:	fa22 f30c 	lsr.w	r3, r2, ip
 800e906:	45b8      	cmp	r8, r7
 800e908:	ea43 0501 	orr.w	r5, r3, r1
 800e90c:	bf34      	ite	cc
 800e90e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e912:	2300      	movcs	r3, #0
 800e914:	3015      	adds	r0, #21
 800e916:	fa02 f000 	lsl.w	r0, r2, r0
 800e91a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e91e:	4303      	orrs	r3, r0
 800e920:	461c      	mov	r4, r3
 800e922:	ec45 4b10 	vmov	d0, r4, r5
 800e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e92a:	45b8      	cmp	r8, r7
 800e92c:	bf3a      	itte	cc
 800e92e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e932:	f1a6 0708 	subcc.w	r7, r6, #8
 800e936:	2300      	movcs	r3, #0
 800e938:	380b      	subs	r0, #11
 800e93a:	d012      	beq.n	800e962 <__b2d+0x8a>
 800e93c:	f1c0 0120 	rsb	r1, r0, #32
 800e940:	fa23 f401 	lsr.w	r4, r3, r1
 800e944:	4082      	lsls	r2, r0
 800e946:	4322      	orrs	r2, r4
 800e948:	4547      	cmp	r7, r8
 800e94a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e94e:	bf8c      	ite	hi
 800e950:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e954:	2200      	movls	r2, #0
 800e956:	4083      	lsls	r3, r0
 800e958:	40ca      	lsrs	r2, r1
 800e95a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e95e:	4313      	orrs	r3, r2
 800e960:	e7de      	b.n	800e920 <__b2d+0x48>
 800e962:	ea42 0501 	orr.w	r5, r2, r1
 800e966:	e7db      	b.n	800e920 <__b2d+0x48>
 800e968:	3ff00000 	.word	0x3ff00000

0800e96c <__d2b>:
 800e96c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e970:	460f      	mov	r7, r1
 800e972:	2101      	movs	r1, #1
 800e974:	ec59 8b10 	vmov	r8, r9, d0
 800e978:	4616      	mov	r6, r2
 800e97a:	f7ff fc13 	bl	800e1a4 <_Balloc>
 800e97e:	4604      	mov	r4, r0
 800e980:	b930      	cbnz	r0, 800e990 <__d2b+0x24>
 800e982:	4602      	mov	r2, r0
 800e984:	4b23      	ldr	r3, [pc, #140]	@ (800ea14 <__d2b+0xa8>)
 800e986:	4824      	ldr	r0, [pc, #144]	@ (800ea18 <__d2b+0xac>)
 800e988:	f240 310f 	movw	r1, #783	@ 0x30f
 800e98c:	f000 fab4 	bl	800eef8 <__assert_func>
 800e990:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e998:	b10d      	cbz	r5, 800e99e <__d2b+0x32>
 800e99a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	f1b8 0300 	subs.w	r3, r8, #0
 800e9a4:	d023      	beq.n	800e9ee <__d2b+0x82>
 800e9a6:	4668      	mov	r0, sp
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	f7ff fd0c 	bl	800e3c6 <__lo0bits>
 800e9ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e9b2:	b1d0      	cbz	r0, 800e9ea <__d2b+0x7e>
 800e9b4:	f1c0 0320 	rsb	r3, r0, #32
 800e9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9bc:	430b      	orrs	r3, r1
 800e9be:	40c2      	lsrs	r2, r0
 800e9c0:	6163      	str	r3, [r4, #20]
 800e9c2:	9201      	str	r2, [sp, #4]
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	61a3      	str	r3, [r4, #24]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	bf0c      	ite	eq
 800e9cc:	2201      	moveq	r2, #1
 800e9ce:	2202      	movne	r2, #2
 800e9d0:	6122      	str	r2, [r4, #16]
 800e9d2:	b1a5      	cbz	r5, 800e9fe <__d2b+0x92>
 800e9d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e9d8:	4405      	add	r5, r0
 800e9da:	603d      	str	r5, [r7, #0]
 800e9dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e9e0:	6030      	str	r0, [r6, #0]
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	b003      	add	sp, #12
 800e9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9ea:	6161      	str	r1, [r4, #20]
 800e9ec:	e7ea      	b.n	800e9c4 <__d2b+0x58>
 800e9ee:	a801      	add	r0, sp, #4
 800e9f0:	f7ff fce9 	bl	800e3c6 <__lo0bits>
 800e9f4:	9b01      	ldr	r3, [sp, #4]
 800e9f6:	6163      	str	r3, [r4, #20]
 800e9f8:	3020      	adds	r0, #32
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	e7e8      	b.n	800e9d0 <__d2b+0x64>
 800e9fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea06:	6038      	str	r0, [r7, #0]
 800ea08:	6918      	ldr	r0, [r3, #16]
 800ea0a:	f7ff fcbd 	bl	800e388 <__hi0bits>
 800ea0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea12:	e7e5      	b.n	800e9e0 <__d2b+0x74>
 800ea14:	0800f43d 	.word	0x0800f43d
 800ea18:	0800f4bf 	.word	0x0800f4bf

0800ea1c <__ratio>:
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	b085      	sub	sp, #20
 800ea22:	e9cd 1000 	strd	r1, r0, [sp]
 800ea26:	a902      	add	r1, sp, #8
 800ea28:	f7ff ff56 	bl	800e8d8 <__b2d>
 800ea2c:	9800      	ldr	r0, [sp, #0]
 800ea2e:	a903      	add	r1, sp, #12
 800ea30:	ec55 4b10 	vmov	r4, r5, d0
 800ea34:	f7ff ff50 	bl	800e8d8 <__b2d>
 800ea38:	9b01      	ldr	r3, [sp, #4]
 800ea3a:	6919      	ldr	r1, [r3, #16]
 800ea3c:	9b00      	ldr	r3, [sp, #0]
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	1ac9      	subs	r1, r1, r3
 800ea42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	ec5b ab10 	vmov	sl, fp, d0
 800ea4c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	bfce      	itee	gt
 800ea54:	462a      	movgt	r2, r5
 800ea56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea5a:	465a      	movle	r2, fp
 800ea5c:	462f      	mov	r7, r5
 800ea5e:	46d9      	mov	r9, fp
 800ea60:	bfcc      	ite	gt
 800ea62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea66:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ea6a:	464b      	mov	r3, r9
 800ea6c:	4652      	mov	r2, sl
 800ea6e:	4620      	mov	r0, r4
 800ea70:	4639      	mov	r1, r7
 800ea72:	f7f1 feeb 	bl	800084c <__aeabi_ddiv>
 800ea76:	ec41 0b10 	vmov	d0, r0, r1
 800ea7a:	b005      	add	sp, #20
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea80 <__copybits>:
 800ea80:	3901      	subs	r1, #1
 800ea82:	b570      	push	{r4, r5, r6, lr}
 800ea84:	1149      	asrs	r1, r1, #5
 800ea86:	6914      	ldr	r4, [r2, #16]
 800ea88:	3101      	adds	r1, #1
 800ea8a:	f102 0314 	add.w	r3, r2, #20
 800ea8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea96:	1f05      	subs	r5, r0, #4
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d30c      	bcc.n	800eab6 <__copybits+0x36>
 800ea9c:	1aa3      	subs	r3, r4, r2
 800ea9e:	3b11      	subs	r3, #17
 800eaa0:	f023 0303 	bic.w	r3, r3, #3
 800eaa4:	3211      	adds	r2, #17
 800eaa6:	42a2      	cmp	r2, r4
 800eaa8:	bf88      	it	hi
 800eaaa:	2300      	movhi	r3, #0
 800eaac:	4418      	add	r0, r3
 800eaae:	2300      	movs	r3, #0
 800eab0:	4288      	cmp	r0, r1
 800eab2:	d305      	bcc.n	800eac0 <__copybits+0x40>
 800eab4:	bd70      	pop	{r4, r5, r6, pc}
 800eab6:	f853 6b04 	ldr.w	r6, [r3], #4
 800eaba:	f845 6f04 	str.w	r6, [r5, #4]!
 800eabe:	e7eb      	b.n	800ea98 <__copybits+0x18>
 800eac0:	f840 3b04 	str.w	r3, [r0], #4
 800eac4:	e7f4      	b.n	800eab0 <__copybits+0x30>

0800eac6 <__any_on>:
 800eac6:	f100 0214 	add.w	r2, r0, #20
 800eaca:	6900      	ldr	r0, [r0, #16]
 800eacc:	114b      	asrs	r3, r1, #5
 800eace:	4298      	cmp	r0, r3
 800ead0:	b510      	push	{r4, lr}
 800ead2:	db11      	blt.n	800eaf8 <__any_on+0x32>
 800ead4:	dd0a      	ble.n	800eaec <__any_on+0x26>
 800ead6:	f011 011f 	ands.w	r1, r1, #31
 800eada:	d007      	beq.n	800eaec <__any_on+0x26>
 800eadc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eae0:	fa24 f001 	lsr.w	r0, r4, r1
 800eae4:	fa00 f101 	lsl.w	r1, r0, r1
 800eae8:	428c      	cmp	r4, r1
 800eaea:	d10b      	bne.n	800eb04 <__any_on+0x3e>
 800eaec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d803      	bhi.n	800eafc <__any_on+0x36>
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	bd10      	pop	{r4, pc}
 800eaf8:	4603      	mov	r3, r0
 800eafa:	e7f7      	b.n	800eaec <__any_on+0x26>
 800eafc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb00:	2900      	cmp	r1, #0
 800eb02:	d0f5      	beq.n	800eaf0 <__any_on+0x2a>
 800eb04:	2001      	movs	r0, #1
 800eb06:	e7f6      	b.n	800eaf6 <__any_on+0x30>

0800eb08 <__sread>:
 800eb08:	b510      	push	{r4, lr}
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb10:	f000 f9ce 	bl	800eeb0 <_read_r>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	bfab      	itete	ge
 800eb18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb1a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb1c:	181b      	addge	r3, r3, r0
 800eb1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb22:	bfac      	ite	ge
 800eb24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb26:	81a3      	strhlt	r3, [r4, #12]
 800eb28:	bd10      	pop	{r4, pc}

0800eb2a <__swrite>:
 800eb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2e:	461f      	mov	r7, r3
 800eb30:	898b      	ldrh	r3, [r1, #12]
 800eb32:	05db      	lsls	r3, r3, #23
 800eb34:	4605      	mov	r5, r0
 800eb36:	460c      	mov	r4, r1
 800eb38:	4616      	mov	r6, r2
 800eb3a:	d505      	bpl.n	800eb48 <__swrite+0x1e>
 800eb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb40:	2302      	movs	r3, #2
 800eb42:	2200      	movs	r2, #0
 800eb44:	f000 f9a2 	bl	800ee8c <_lseek_r>
 800eb48:	89a3      	ldrh	r3, [r4, #12]
 800eb4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb52:	81a3      	strh	r3, [r4, #12]
 800eb54:	4632      	mov	r2, r6
 800eb56:	463b      	mov	r3, r7
 800eb58:	4628      	mov	r0, r5
 800eb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5e:	f000 b9b9 	b.w	800eed4 <_write_r>

0800eb62 <__sseek>:
 800eb62:	b510      	push	{r4, lr}
 800eb64:	460c      	mov	r4, r1
 800eb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6a:	f000 f98f 	bl	800ee8c <_lseek_r>
 800eb6e:	1c43      	adds	r3, r0, #1
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	bf15      	itete	ne
 800eb74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb7e:	81a3      	strheq	r3, [r4, #12]
 800eb80:	bf18      	it	ne
 800eb82:	81a3      	strhne	r3, [r4, #12]
 800eb84:	bd10      	pop	{r4, pc}

0800eb86 <__sclose>:
 800eb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8a:	f000 b94d 	b.w	800ee28 <_close_r>

0800eb8e <_realloc_r>:
 800eb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb92:	4680      	mov	r8, r0
 800eb94:	4615      	mov	r5, r2
 800eb96:	460c      	mov	r4, r1
 800eb98:	b921      	cbnz	r1, 800eba4 <_realloc_r+0x16>
 800eb9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9e:	4611      	mov	r1, r2
 800eba0:	f7fc b958 	b.w	800ae54 <_malloc_r>
 800eba4:	b92a      	cbnz	r2, 800ebb2 <_realloc_r+0x24>
 800eba6:	f7fe fc23 	bl	800d3f0 <_free_r>
 800ebaa:	2400      	movs	r4, #0
 800ebac:	4620      	mov	r0, r4
 800ebae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb2:	f000 f9d3 	bl	800ef5c <_malloc_usable_size_r>
 800ebb6:	4285      	cmp	r5, r0
 800ebb8:	4606      	mov	r6, r0
 800ebba:	d802      	bhi.n	800ebc2 <_realloc_r+0x34>
 800ebbc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ebc0:	d8f4      	bhi.n	800ebac <_realloc_r+0x1e>
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	4640      	mov	r0, r8
 800ebc6:	f7fc f945 	bl	800ae54 <_malloc_r>
 800ebca:	4607      	mov	r7, r0
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d0ec      	beq.n	800ebaa <_realloc_r+0x1c>
 800ebd0:	42b5      	cmp	r5, r6
 800ebd2:	462a      	mov	r2, r5
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	bf28      	it	cs
 800ebd8:	4632      	movcs	r2, r6
 800ebda:	f7fd fd9c 	bl	800c716 <memcpy>
 800ebde:	4621      	mov	r1, r4
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	f7fe fc05 	bl	800d3f0 <_free_r>
 800ebe6:	463c      	mov	r4, r7
 800ebe8:	e7e0      	b.n	800ebac <_realloc_r+0x1e>

0800ebea <__swbuf_r>:
 800ebea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebec:	460e      	mov	r6, r1
 800ebee:	4614      	mov	r4, r2
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	b118      	cbz	r0, 800ebfc <__swbuf_r+0x12>
 800ebf4:	6a03      	ldr	r3, [r0, #32]
 800ebf6:	b90b      	cbnz	r3, 800ebfc <__swbuf_r+0x12>
 800ebf8:	f7fc fe06 	bl	800b808 <__sinit>
 800ebfc:	69a3      	ldr	r3, [r4, #24]
 800ebfe:	60a3      	str	r3, [r4, #8]
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	071a      	lsls	r2, r3, #28
 800ec04:	d501      	bpl.n	800ec0a <__swbuf_r+0x20>
 800ec06:	6923      	ldr	r3, [r4, #16]
 800ec08:	b943      	cbnz	r3, 800ec1c <__swbuf_r+0x32>
 800ec0a:	4621      	mov	r1, r4
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f000 f82b 	bl	800ec68 <__swsetup_r>
 800ec12:	b118      	cbz	r0, 800ec1c <__swbuf_r+0x32>
 800ec14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ec18:	4638      	mov	r0, r7
 800ec1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1c:	6823      	ldr	r3, [r4, #0]
 800ec1e:	6922      	ldr	r2, [r4, #16]
 800ec20:	1a98      	subs	r0, r3, r2
 800ec22:	6963      	ldr	r3, [r4, #20]
 800ec24:	b2f6      	uxtb	r6, r6
 800ec26:	4283      	cmp	r3, r0
 800ec28:	4637      	mov	r7, r6
 800ec2a:	dc05      	bgt.n	800ec38 <__swbuf_r+0x4e>
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	4628      	mov	r0, r5
 800ec30:	f7ff fa90 	bl	800e154 <_fflush_r>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d1ed      	bne.n	800ec14 <__swbuf_r+0x2a>
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	60a3      	str	r3, [r4, #8]
 800ec3e:	6823      	ldr	r3, [r4, #0]
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	6022      	str	r2, [r4, #0]
 800ec44:	701e      	strb	r6, [r3, #0]
 800ec46:	6962      	ldr	r2, [r4, #20]
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d004      	beq.n	800ec58 <__swbuf_r+0x6e>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	07db      	lsls	r3, r3, #31
 800ec52:	d5e1      	bpl.n	800ec18 <__swbuf_r+0x2e>
 800ec54:	2e0a      	cmp	r6, #10
 800ec56:	d1df      	bne.n	800ec18 <__swbuf_r+0x2e>
 800ec58:	4621      	mov	r1, r4
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f7ff fa7a 	bl	800e154 <_fflush_r>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d0d9      	beq.n	800ec18 <__swbuf_r+0x2e>
 800ec64:	e7d6      	b.n	800ec14 <__swbuf_r+0x2a>
	...

0800ec68 <__swsetup_r>:
 800ec68:	b538      	push	{r3, r4, r5, lr}
 800ec6a:	4b29      	ldr	r3, [pc, #164]	@ (800ed10 <__swsetup_r+0xa8>)
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	6818      	ldr	r0, [r3, #0]
 800ec70:	460c      	mov	r4, r1
 800ec72:	b118      	cbz	r0, 800ec7c <__swsetup_r+0x14>
 800ec74:	6a03      	ldr	r3, [r0, #32]
 800ec76:	b90b      	cbnz	r3, 800ec7c <__swsetup_r+0x14>
 800ec78:	f7fc fdc6 	bl	800b808 <__sinit>
 800ec7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec80:	0719      	lsls	r1, r3, #28
 800ec82:	d422      	bmi.n	800ecca <__swsetup_r+0x62>
 800ec84:	06da      	lsls	r2, r3, #27
 800ec86:	d407      	bmi.n	800ec98 <__swsetup_r+0x30>
 800ec88:	2209      	movs	r2, #9
 800ec8a:	602a      	str	r2, [r5, #0]
 800ec8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec90:	81a3      	strh	r3, [r4, #12]
 800ec92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec96:	e033      	b.n	800ed00 <__swsetup_r+0x98>
 800ec98:	0758      	lsls	r0, r3, #29
 800ec9a:	d512      	bpl.n	800ecc2 <__swsetup_r+0x5a>
 800ec9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec9e:	b141      	cbz	r1, 800ecb2 <__swsetup_r+0x4a>
 800eca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eca4:	4299      	cmp	r1, r3
 800eca6:	d002      	beq.n	800ecae <__swsetup_r+0x46>
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f7fe fba1 	bl	800d3f0 <_free_r>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecb2:	89a3      	ldrh	r3, [r4, #12]
 800ecb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ecb8:	81a3      	strh	r3, [r4, #12]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	6063      	str	r3, [r4, #4]
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	f043 0308 	orr.w	r3, r3, #8
 800ecc8:	81a3      	strh	r3, [r4, #12]
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	b94b      	cbnz	r3, 800ece2 <__swsetup_r+0x7a>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ecd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecd8:	d003      	beq.n	800ece2 <__swsetup_r+0x7a>
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f000 f84c 	bl	800ed7a <__smakebuf_r>
 800ece2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ece6:	f013 0201 	ands.w	r2, r3, #1
 800ecea:	d00a      	beq.n	800ed02 <__swsetup_r+0x9a>
 800ecec:	2200      	movs	r2, #0
 800ecee:	60a2      	str	r2, [r4, #8]
 800ecf0:	6962      	ldr	r2, [r4, #20]
 800ecf2:	4252      	negs	r2, r2
 800ecf4:	61a2      	str	r2, [r4, #24]
 800ecf6:	6922      	ldr	r2, [r4, #16]
 800ecf8:	b942      	cbnz	r2, 800ed0c <__swsetup_r+0xa4>
 800ecfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecfe:	d1c5      	bne.n	800ec8c <__swsetup_r+0x24>
 800ed00:	bd38      	pop	{r3, r4, r5, pc}
 800ed02:	0799      	lsls	r1, r3, #30
 800ed04:	bf58      	it	pl
 800ed06:	6962      	ldrpl	r2, [r4, #20]
 800ed08:	60a2      	str	r2, [r4, #8]
 800ed0a:	e7f4      	b.n	800ecf6 <__swsetup_r+0x8e>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	e7f7      	b.n	800ed00 <__swsetup_r+0x98>
 800ed10:	200001a4 	.word	0x200001a4

0800ed14 <__ascii_wctomb>:
 800ed14:	4603      	mov	r3, r0
 800ed16:	4608      	mov	r0, r1
 800ed18:	b141      	cbz	r1, 800ed2c <__ascii_wctomb+0x18>
 800ed1a:	2aff      	cmp	r2, #255	@ 0xff
 800ed1c:	d904      	bls.n	800ed28 <__ascii_wctomb+0x14>
 800ed1e:	228a      	movs	r2, #138	@ 0x8a
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed26:	4770      	bx	lr
 800ed28:	700a      	strb	r2, [r1, #0]
 800ed2a:	2001      	movs	r0, #1
 800ed2c:	4770      	bx	lr

0800ed2e <__swhatbuf_r>:
 800ed2e:	b570      	push	{r4, r5, r6, lr}
 800ed30:	460c      	mov	r4, r1
 800ed32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed36:	2900      	cmp	r1, #0
 800ed38:	b096      	sub	sp, #88	@ 0x58
 800ed3a:	4615      	mov	r5, r2
 800ed3c:	461e      	mov	r6, r3
 800ed3e:	da0d      	bge.n	800ed5c <__swhatbuf_r+0x2e>
 800ed40:	89a3      	ldrh	r3, [r4, #12]
 800ed42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed46:	f04f 0100 	mov.w	r1, #0
 800ed4a:	bf14      	ite	ne
 800ed4c:	2340      	movne	r3, #64	@ 0x40
 800ed4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed52:	2000      	movs	r0, #0
 800ed54:	6031      	str	r1, [r6, #0]
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	b016      	add	sp, #88	@ 0x58
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	466a      	mov	r2, sp
 800ed5e:	f000 f873 	bl	800ee48 <_fstat_r>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	dbec      	blt.n	800ed40 <__swhatbuf_r+0x12>
 800ed66:	9901      	ldr	r1, [sp, #4]
 800ed68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed70:	4259      	negs	r1, r3
 800ed72:	4159      	adcs	r1, r3
 800ed74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed78:	e7eb      	b.n	800ed52 <__swhatbuf_r+0x24>

0800ed7a <__smakebuf_r>:
 800ed7a:	898b      	ldrh	r3, [r1, #12]
 800ed7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed7e:	079d      	lsls	r5, r3, #30
 800ed80:	4606      	mov	r6, r0
 800ed82:	460c      	mov	r4, r1
 800ed84:	d507      	bpl.n	800ed96 <__smakebuf_r+0x1c>
 800ed86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed8a:	6023      	str	r3, [r4, #0]
 800ed8c:	6123      	str	r3, [r4, #16]
 800ed8e:	2301      	movs	r3, #1
 800ed90:	6163      	str	r3, [r4, #20]
 800ed92:	b003      	add	sp, #12
 800ed94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed96:	ab01      	add	r3, sp, #4
 800ed98:	466a      	mov	r2, sp
 800ed9a:	f7ff ffc8 	bl	800ed2e <__swhatbuf_r>
 800ed9e:	9f00      	ldr	r7, [sp, #0]
 800eda0:	4605      	mov	r5, r0
 800eda2:	4639      	mov	r1, r7
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7fc f855 	bl	800ae54 <_malloc_r>
 800edaa:	b948      	cbnz	r0, 800edc0 <__smakebuf_r+0x46>
 800edac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edb0:	059a      	lsls	r2, r3, #22
 800edb2:	d4ee      	bmi.n	800ed92 <__smakebuf_r+0x18>
 800edb4:	f023 0303 	bic.w	r3, r3, #3
 800edb8:	f043 0302 	orr.w	r3, r3, #2
 800edbc:	81a3      	strh	r3, [r4, #12]
 800edbe:	e7e2      	b.n	800ed86 <__smakebuf_r+0xc>
 800edc0:	89a3      	ldrh	r3, [r4, #12]
 800edc2:	6020      	str	r0, [r4, #0]
 800edc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edc8:	81a3      	strh	r3, [r4, #12]
 800edca:	9b01      	ldr	r3, [sp, #4]
 800edcc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edd0:	b15b      	cbz	r3, 800edea <__smakebuf_r+0x70>
 800edd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edd6:	4630      	mov	r0, r6
 800edd8:	f000 f848 	bl	800ee6c <_isatty_r>
 800eddc:	b128      	cbz	r0, 800edea <__smakebuf_r+0x70>
 800edde:	89a3      	ldrh	r3, [r4, #12]
 800ede0:	f023 0303 	bic.w	r3, r3, #3
 800ede4:	f043 0301 	orr.w	r3, r3, #1
 800ede8:	81a3      	strh	r3, [r4, #12]
 800edea:	89a3      	ldrh	r3, [r4, #12]
 800edec:	431d      	orrs	r5, r3
 800edee:	81a5      	strh	r5, [r4, #12]
 800edf0:	e7cf      	b.n	800ed92 <__smakebuf_r+0x18>

0800edf2 <memmove>:
 800edf2:	4288      	cmp	r0, r1
 800edf4:	b510      	push	{r4, lr}
 800edf6:	eb01 0402 	add.w	r4, r1, r2
 800edfa:	d902      	bls.n	800ee02 <memmove+0x10>
 800edfc:	4284      	cmp	r4, r0
 800edfe:	4623      	mov	r3, r4
 800ee00:	d807      	bhi.n	800ee12 <memmove+0x20>
 800ee02:	1e43      	subs	r3, r0, #1
 800ee04:	42a1      	cmp	r1, r4
 800ee06:	d008      	beq.n	800ee1a <memmove+0x28>
 800ee08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee10:	e7f8      	b.n	800ee04 <memmove+0x12>
 800ee12:	4402      	add	r2, r0
 800ee14:	4601      	mov	r1, r0
 800ee16:	428a      	cmp	r2, r1
 800ee18:	d100      	bne.n	800ee1c <memmove+0x2a>
 800ee1a:	bd10      	pop	{r4, pc}
 800ee1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee24:	e7f7      	b.n	800ee16 <memmove+0x24>
	...

0800ee28 <_close_r>:
 800ee28:	b538      	push	{r3, r4, r5, lr}
 800ee2a:	4d06      	ldr	r5, [pc, #24]	@ (800ee44 <_close_r+0x1c>)
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	4604      	mov	r4, r0
 800ee30:	4608      	mov	r0, r1
 800ee32:	602b      	str	r3, [r5, #0]
 800ee34:	f7f2 fea2 	bl	8001b7c <_close>
 800ee38:	1c43      	adds	r3, r0, #1
 800ee3a:	d102      	bne.n	800ee42 <_close_r+0x1a>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	b103      	cbz	r3, 800ee42 <_close_r+0x1a>
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	20000c64 	.word	0x20000c64

0800ee48 <_fstat_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d07      	ldr	r5, [pc, #28]	@ (800ee68 <_fstat_r+0x20>)
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4604      	mov	r4, r0
 800ee50:	4608      	mov	r0, r1
 800ee52:	4611      	mov	r1, r2
 800ee54:	602b      	str	r3, [r5, #0]
 800ee56:	f7f2 fe9d 	bl	8001b94 <_fstat>
 800ee5a:	1c43      	adds	r3, r0, #1
 800ee5c:	d102      	bne.n	800ee64 <_fstat_r+0x1c>
 800ee5e:	682b      	ldr	r3, [r5, #0]
 800ee60:	b103      	cbz	r3, 800ee64 <_fstat_r+0x1c>
 800ee62:	6023      	str	r3, [r4, #0]
 800ee64:	bd38      	pop	{r3, r4, r5, pc}
 800ee66:	bf00      	nop
 800ee68:	20000c64 	.word	0x20000c64

0800ee6c <_isatty_r>:
 800ee6c:	b538      	push	{r3, r4, r5, lr}
 800ee6e:	4d06      	ldr	r5, [pc, #24]	@ (800ee88 <_isatty_r+0x1c>)
 800ee70:	2300      	movs	r3, #0
 800ee72:	4604      	mov	r4, r0
 800ee74:	4608      	mov	r0, r1
 800ee76:	602b      	str	r3, [r5, #0]
 800ee78:	f7f2 fe9c 	bl	8001bb4 <_isatty>
 800ee7c:	1c43      	adds	r3, r0, #1
 800ee7e:	d102      	bne.n	800ee86 <_isatty_r+0x1a>
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	b103      	cbz	r3, 800ee86 <_isatty_r+0x1a>
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	bd38      	pop	{r3, r4, r5, pc}
 800ee88:	20000c64 	.word	0x20000c64

0800ee8c <_lseek_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4d07      	ldr	r5, [pc, #28]	@ (800eeac <_lseek_r+0x20>)
 800ee90:	4604      	mov	r4, r0
 800ee92:	4608      	mov	r0, r1
 800ee94:	4611      	mov	r1, r2
 800ee96:	2200      	movs	r2, #0
 800ee98:	602a      	str	r2, [r5, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	f7f2 fe95 	bl	8001bca <_lseek>
 800eea0:	1c43      	adds	r3, r0, #1
 800eea2:	d102      	bne.n	800eeaa <_lseek_r+0x1e>
 800eea4:	682b      	ldr	r3, [r5, #0]
 800eea6:	b103      	cbz	r3, 800eeaa <_lseek_r+0x1e>
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	bd38      	pop	{r3, r4, r5, pc}
 800eeac:	20000c64 	.word	0x20000c64

0800eeb0 <_read_r>:
 800eeb0:	b538      	push	{r3, r4, r5, lr}
 800eeb2:	4d07      	ldr	r5, [pc, #28]	@ (800eed0 <_read_r+0x20>)
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	4608      	mov	r0, r1
 800eeb8:	4611      	mov	r1, r2
 800eeba:	2200      	movs	r2, #0
 800eebc:	602a      	str	r2, [r5, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	f7f2 fe3f 	bl	8001b42 <_read>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	d102      	bne.n	800eece <_read_r+0x1e>
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	b103      	cbz	r3, 800eece <_read_r+0x1e>
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	20000c64 	.word	0x20000c64

0800eed4 <_write_r>:
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	4d07      	ldr	r5, [pc, #28]	@ (800eef4 <_write_r+0x20>)
 800eed8:	4604      	mov	r4, r0
 800eeda:	4608      	mov	r0, r1
 800eedc:	4611      	mov	r1, r2
 800eede:	2200      	movs	r2, #0
 800eee0:	602a      	str	r2, [r5, #0]
 800eee2:	461a      	mov	r2, r3
 800eee4:	f7f2 fadc 	bl	80014a0 <_write>
 800eee8:	1c43      	adds	r3, r0, #1
 800eeea:	d102      	bne.n	800eef2 <_write_r+0x1e>
 800eeec:	682b      	ldr	r3, [r5, #0]
 800eeee:	b103      	cbz	r3, 800eef2 <_write_r+0x1e>
 800eef0:	6023      	str	r3, [r4, #0]
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
 800eef4:	20000c64 	.word	0x20000c64

0800eef8 <__assert_func>:
 800eef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eefa:	4614      	mov	r4, r2
 800eefc:	461a      	mov	r2, r3
 800eefe:	4b09      	ldr	r3, [pc, #36]	@ (800ef24 <__assert_func+0x2c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4605      	mov	r5, r0
 800ef04:	68d8      	ldr	r0, [r3, #12]
 800ef06:	b954      	cbnz	r4, 800ef1e <__assert_func+0x26>
 800ef08:	4b07      	ldr	r3, [pc, #28]	@ (800ef28 <__assert_func+0x30>)
 800ef0a:	461c      	mov	r4, r3
 800ef0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef10:	9100      	str	r1, [sp, #0]
 800ef12:	462b      	mov	r3, r5
 800ef14:	4905      	ldr	r1, [pc, #20]	@ (800ef2c <__assert_func+0x34>)
 800ef16:	f000 f829 	bl	800ef6c <fiprintf>
 800ef1a:	f000 f839 	bl	800ef90 <abort>
 800ef1e:	4b04      	ldr	r3, [pc, #16]	@ (800ef30 <__assert_func+0x38>)
 800ef20:	e7f4      	b.n	800ef0c <__assert_func+0x14>
 800ef22:	bf00      	nop
 800ef24:	200001a4 	.word	0x200001a4
 800ef28:	0800f653 	.word	0x0800f653
 800ef2c:	0800f625 	.word	0x0800f625
 800ef30:	0800f618 	.word	0x0800f618

0800ef34 <_calloc_r>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	fba1 5402 	umull	r5, r4, r1, r2
 800ef3a:	b93c      	cbnz	r4, 800ef4c <_calloc_r+0x18>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	f7fb ff89 	bl	800ae54 <_malloc_r>
 800ef42:	4606      	mov	r6, r0
 800ef44:	b928      	cbnz	r0, 800ef52 <_calloc_r+0x1e>
 800ef46:	2600      	movs	r6, #0
 800ef48:	4630      	mov	r0, r6
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}
 800ef4c:	220c      	movs	r2, #12
 800ef4e:	6002      	str	r2, [r0, #0]
 800ef50:	e7f9      	b.n	800ef46 <_calloc_r+0x12>
 800ef52:	462a      	mov	r2, r5
 800ef54:	4621      	mov	r1, r4
 800ef56:	f7fd fb95 	bl	800c684 <memset>
 800ef5a:	e7f5      	b.n	800ef48 <_calloc_r+0x14>

0800ef5c <_malloc_usable_size_r>:
 800ef5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef60:	1f18      	subs	r0, r3, #4
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	bfbc      	itt	lt
 800ef66:	580b      	ldrlt	r3, [r1, r0]
 800ef68:	18c0      	addlt	r0, r0, r3
 800ef6a:	4770      	bx	lr

0800ef6c <fiprintf>:
 800ef6c:	b40e      	push	{r1, r2, r3}
 800ef6e:	b503      	push	{r0, r1, lr}
 800ef70:	4601      	mov	r1, r0
 800ef72:	ab03      	add	r3, sp, #12
 800ef74:	4805      	ldr	r0, [pc, #20]	@ (800ef8c <fiprintf+0x20>)
 800ef76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef7a:	6800      	ldr	r0, [r0, #0]
 800ef7c:	9301      	str	r3, [sp, #4]
 800ef7e:	f7fe ff3b 	bl	800ddf8 <_vfiprintf_r>
 800ef82:	b002      	add	sp, #8
 800ef84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef88:	b003      	add	sp, #12
 800ef8a:	4770      	bx	lr
 800ef8c:	200001a4 	.word	0x200001a4

0800ef90 <abort>:
 800ef90:	b508      	push	{r3, lr}
 800ef92:	2006      	movs	r0, #6
 800ef94:	f000 f82c 	bl	800eff0 <raise>
 800ef98:	2001      	movs	r0, #1
 800ef9a:	f7f2 fdc7 	bl	8001b2c <_exit>

0800ef9e <_raise_r>:
 800ef9e:	291f      	cmp	r1, #31
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	4605      	mov	r5, r0
 800efa4:	460c      	mov	r4, r1
 800efa6:	d904      	bls.n	800efb2 <_raise_r+0x14>
 800efa8:	2316      	movs	r3, #22
 800efaa:	6003      	str	r3, [r0, #0]
 800efac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efb0:	bd38      	pop	{r3, r4, r5, pc}
 800efb2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efb4:	b112      	cbz	r2, 800efbc <_raise_r+0x1e>
 800efb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efba:	b94b      	cbnz	r3, 800efd0 <_raise_r+0x32>
 800efbc:	4628      	mov	r0, r5
 800efbe:	f000 f831 	bl	800f024 <_getpid_r>
 800efc2:	4622      	mov	r2, r4
 800efc4:	4601      	mov	r1, r0
 800efc6:	4628      	mov	r0, r5
 800efc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efcc:	f000 b818 	b.w	800f000 <_kill_r>
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d00a      	beq.n	800efea <_raise_r+0x4c>
 800efd4:	1c59      	adds	r1, r3, #1
 800efd6:	d103      	bne.n	800efe0 <_raise_r+0x42>
 800efd8:	2316      	movs	r3, #22
 800efda:	6003      	str	r3, [r0, #0]
 800efdc:	2001      	movs	r0, #1
 800efde:	e7e7      	b.n	800efb0 <_raise_r+0x12>
 800efe0:	2100      	movs	r1, #0
 800efe2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efe6:	4620      	mov	r0, r4
 800efe8:	4798      	blx	r3
 800efea:	2000      	movs	r0, #0
 800efec:	e7e0      	b.n	800efb0 <_raise_r+0x12>
	...

0800eff0 <raise>:
 800eff0:	4b02      	ldr	r3, [pc, #8]	@ (800effc <raise+0xc>)
 800eff2:	4601      	mov	r1, r0
 800eff4:	6818      	ldr	r0, [r3, #0]
 800eff6:	f7ff bfd2 	b.w	800ef9e <_raise_r>
 800effa:	bf00      	nop
 800effc:	200001a4 	.word	0x200001a4

0800f000 <_kill_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4d07      	ldr	r5, [pc, #28]	@ (800f020 <_kill_r+0x20>)
 800f004:	2300      	movs	r3, #0
 800f006:	4604      	mov	r4, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	4611      	mov	r1, r2
 800f00c:	602b      	str	r3, [r5, #0]
 800f00e:	f7f2 fd7d 	bl	8001b0c <_kill>
 800f012:	1c43      	adds	r3, r0, #1
 800f014:	d102      	bne.n	800f01c <_kill_r+0x1c>
 800f016:	682b      	ldr	r3, [r5, #0]
 800f018:	b103      	cbz	r3, 800f01c <_kill_r+0x1c>
 800f01a:	6023      	str	r3, [r4, #0]
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop
 800f020:	20000c64 	.word	0x20000c64

0800f024 <_getpid_r>:
 800f024:	f7f2 bd6a 	b.w	8001afc <_getpid>

0800f028 <_init>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	bf00      	nop
 800f02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02e:	bc08      	pop	{r3}
 800f030:	469e      	mov	lr, r3
 800f032:	4770      	bx	lr

0800f034 <_fini>:
 800f034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f036:	bf00      	nop
 800f038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f03a:	bc08      	pop	{r3}
 800f03c:	469e      	mov	lr, r3
 800f03e:	4770      	bx	lr
